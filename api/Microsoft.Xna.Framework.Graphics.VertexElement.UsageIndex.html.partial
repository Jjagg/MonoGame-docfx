

<article id="content" data-uid="Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex*" role="main" class="pos-rel">
  <h1 id="Microsoft_Xna_Framework_Graphics_VertexElement_UsageIndex_" data-uid="Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex*" class="text-break">VertexElement.UsageIndex Property</h1>

  <div class="api">
    <div class="markdown level0 summary"></div>
<div class="markdown level0 conceptual"></div>

  
  
  
  
  
  
  
  
  
  




    <div class="markdown level0 summary"><p>Gets or sets the semantic index.</p>
</div>
    <div class="markdown level0 conceptual"></div>
    
      
        <div class="codewrapper">
          <pre><code class="lang-csharp hljs">public int UsageIndex { get; set; }</code></pre>
        </div>
      
      
      
      
      
      
      
      
      
    
    <h id="Microsoft_Xna_Framework_Graphics_VertexElement_UsageIndex_remarks">Remarks</h>
    <div class="markdown level0 remarks"><p>Usage indices in a vertex declaration usually start with 0. When multiple vertex buffers
are bound to the input assembler stage (see <a class="xref" href="Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers.html#Microsoft_Xna_Framework_Graphics_GraphicsDevice_SetVertexBuffers_Microsoft_Xna_Framework_Graphics_VertexBufferBinding___">SetVertexBuffers(VertexBufferBinding[])</a>),
MonoGame internally adjusts the usage indices based on the order in which the vertex
buffers are bound.</p>
</div>
    
    
    
    

  </div>
</article>
