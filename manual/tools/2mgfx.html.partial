<article id="content" data-uid="" role="main" class="pos-rel fadein">
  <h1 id="2mgfx">2MGFX</h1>
  
<p>The 2MGFX tool is used to build a MonoGame Effect from an input Microsoft FX or MGFX file.</p>
<h3 id="command-line">Command Line</h3>
<p>The command line options are:</p>
<pre><code>2MGFX &lt;SourceFile&gt; &lt;OutputFile&gt; [/Debug] [/Profile:&lt;DirectX_11,OpenGL,PlayStation4&gt;]
</code></pre><h4 id="source-file">Source File</h4>
<p>The input effect file in typical FX format with samplers, techniques, and passes defined.  This parameter is required.</p>
<h4 id="output-file">Output File</h4>
<p>The file to write for the output compiled MGFX file.  This parameter is required.</p>
<p>NOTE: The generated file is not an XNB file for use with the ContentManager.</p>
<h4 id="debug-info">Debug Info</h4>
<p>If the <code>/Debug</code> flag is passed the resulting compiled MGFX file will contain extra debug information and the fewest possible optimizations.</p>
<h4 id="platform-profile">Platform Profile</h4>
<p>The <code>/Profile</code> option defines the platform we&#39;re targeting with this effect file.  It can be one of the following:</p>
<pre><code>- DirectX_11
- OpenGL
- PlayStation4
- PSVita
- XboxOne
- Switch
</code></pre><p>NOTE: PlayStation 4, Xbox One, PS Vita, and Switch support is only available to licensed console developers.</p>
<h4 id="help">Help</h4>
<p>If you use <code>/?</code>, <code>/help</code>, or simply pass no paramters to 2MGFX.exe you will get information about these command line options.</p>
<h3 id="runtime-use">Runtime Use</h3>
<p>The resulting compiled MGFX file can be used from your game code like so:</p>
<pre><code>byte[] bytecode = File.ReadAllBytes(&quot;mycompiled.mgfx&quot;);
var effect = new Effect(bytecode);
</code></pre><p>This is basically how the stock effects (BasicEffect, DualTextureEffect, etc) are compiled and loaded.</p>

</article>

