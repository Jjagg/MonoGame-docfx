{
  "_api/Microsoft.Xna.Framework.Graphics.EffectParameterType.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectParameterType.html",
    "title": "Enum EffectParameterType | MonoGame Documentation",
    "keywords": "Enum EffectParameterType Defines types for effect parameters and shader constants. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum EffectParameterType Fields Name Description Bool Boolean type. Any non-zero will be true ; false otherwise. Int32 32-bit integer type. Single Float type. String String type. Texture Any texture type. Texture1D 1D-texture type. Texture2D 2D-texture type. Texture3D 3D-texture type. TextureCube Cubic texture type. Void Pointer to void type."
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectParameterCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectParameterCollection.html",
    "title": "Class EffectParameterCollection | MonoGame Documentation",
    "keywords": "Class EffectParameterCollection Inheritance System.Object EffectParameterCollection Implements System.Collections.Generic.IEnumerable < EffectParameter > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectParameterCollection : IEnumerable<EffectParameter>, IEnumerable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public EffectParameter this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description EffectParameter | Improve this Doc View Source Item[String] Declaration public EffectParameter this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description EffectParameter Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<EffectParameter> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < EffectParameter > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DepthFormat.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DepthFormat.html",
    "title": "Enum DepthFormat | MonoGame Documentation",
    "keywords": "Enum DepthFormat Defines formats for depth-stencil buffer. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum DepthFormat Fields Name Description Depth16 16-bit depth buffer. Depth24 24-bit depth buffer. Equivalent of Depth24Stencil8 for DirectX platforms. Depth24Stencil8 32-bit depth-stencil buffer. Where 24-bit depth and 8-bit for stencil used. None Depth-stencil buffer will not be created."
  },
  "_api/Microsoft.Xna.Framework.Graphics.CullMode.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.CullMode.html",
    "title": "Enum CullMode | MonoGame Documentation",
    "keywords": "Enum CullMode Defines a culling mode for faces in rasterization process. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum CullMode Fields Name Description CullClockwiseFace Cull faces with clockwise order. CullCounterClockwiseFace Cull faces with counter clockwise order. None Do not cull faces."
  },
  "_api/Microsoft.Xna.Framework.GameWindow.html": {
    "href": "_api/Microsoft.Xna.Framework.GameWindow.html",
    "title": "Class GameWindow | MonoGame Documentation",
    "keywords": "Class GameWindow Inheritance System.Object GameWindow Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public abstract class GameWindow Constructors | Improve this Doc View Source GameWindow() Declaration protected GameWindow() Properties | Improve this Doc View Source AllowAltF4 Gets or sets a bool that enables usage of Alt+F4 for window closing on desktop platforms. Value is true by default. Declaration public virtual bool AllowAltF4 { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AllowUserResizing Declaration public abstract bool AllowUserResizing { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ClientBounds Declaration public abstract Rectangle ClientBounds { get; } Property Value Type Description Rectangle | Improve this Doc View Source CurrentOrientation Declaration public abstract DisplayOrientation CurrentOrientation { get; } Property Value Type Description DisplayOrientation | Improve this Doc View Source Handle Declaration public abstract IntPtr Handle { get; } Property Value Type Description System.IntPtr | Improve this Doc View Source IsBorderless Determines whether the border of the window is visible. Currently only supported on the WinDX and WinGL/Linux platforms. Declaration public virtual bool IsBorderless { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.NotImplementedException Thrown when trying to use this property on a platform other than the WinDX and WinGL/Linux platforms. | Improve this Doc View Source Position The location of this window on the desktop, eg: global coordinate space which stretches across all screens. Declaration public abstract Point Position { get; set; } Property Value Type Description Point | Improve this Doc View Source ScreenDeviceName Declaration public abstract string ScreenDeviceName { get; } Property Value Type Description System.String | Improve this Doc View Source Title Gets or sets the title of the game window. Declaration public string Title { get; set; } Property Value Type Description System.String Remarks For Windows 8 and Windows 10 UWP this has no effect. For these platforms the title should be set by using the DisplayName property found in the app manifest file. Methods | Improve this Doc View Source BeginScreenDeviceChange(Boolean) Declaration public abstract void BeginScreenDeviceChange(bool willBeFullScreen) Parameters Type Name Description System.Boolean willBeFullScreen | Improve this Doc View Source Create(Game, Int32, Int32) Declaration public static GameWindow Create(Game game, int width, int height) Parameters Type Name Description Game game System.Int32 width System.Int32 height Returns Type Description GameWindow | Improve this Doc View Source EndScreenDeviceChange(String) Declaration public void EndScreenDeviceChange(string screenDeviceName) Parameters Type Name Description System.String screenDeviceName | Improve this Doc View Source EndScreenDeviceChange(String, Int32, Int32) Declaration public abstract void EndScreenDeviceChange(string screenDeviceName, int clientWidth, int clientHeight) Parameters Type Name Description System.String screenDeviceName System.Int32 clientWidth System.Int32 clientHeight | Improve this Doc View Source OnActivated() Declaration protected void OnActivated() | Improve this Doc View Source OnDeactivated() Declaration protected void OnDeactivated() | Improve this Doc View Source OnOrientationChanged() Declaration protected void OnOrientationChanged() | Improve this Doc View Source OnPaint() Declaration protected void OnPaint() | Improve this Doc View Source OnScreenDeviceNameChanged() Declaration protected void OnScreenDeviceNameChanged() | Improve this Doc View Source OnTextInput(Object, TextInputEventArgs) Declaration protected void OnTextInput(object sender, TextInputEventArgs e) Parameters Type Name Description System.Object sender TextInputEventArgs e | Improve this Doc View Source SetSupportedOrientations(DisplayOrientation) Declaration protected abstract void SetSupportedOrientations(DisplayOrientation orientations) Parameters Type Name Description DisplayOrientation orientations | Improve this Doc View Source SetTitle(String) Declaration protected abstract void SetTitle(string title) Parameters Type Name Description System.String title Events | Improve this Doc View Source ClientSizeChanged Declaration public event EventHandler<EventArgs> ClientSizeChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source OrientationChanged Declaration public event EventHandler<EventArgs> OrientationChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source ScreenDeviceNameChanged Declaration public event EventHandler<EventArgs> ScreenDeviceNameChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source TextInput Use this event to retrieve text for objects like textbox's. This event is not raised by noncharacter keys. This event also supports key repeat. For more information this event is based off: http://msdn.microsoft.com/en-AU/library/system.windows.forms.control.keypress.aspx Declaration public event EventHandler<TextInputEventArgs> TextInput Event Type Type Description System.EventHandler < TextInputEventArgs > Remarks This event is only supported on the Windows DirectX, Windows OpenGL and Linux platforms."
  },
  "_api/Microsoft.Xna.Framework.GameComponent.html": {
    "href": "_api/Microsoft.Xna.Framework.GameComponent.html",
    "title": "Class GameComponent | MonoGame Documentation",
    "keywords": "Class GameComponent Inheritance System.Object GameComponent DrawableGameComponent Implements IGameComponent IUpdateable System.IComparable < GameComponent > System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GameComponent : IGameComponent, IUpdateable, IComparable<GameComponent>, IDisposable Constructors | Improve this Doc View Source GameComponent(Game) Declaration public GameComponent(Game game) Parameters Type Name Description Game game Properties | Improve this Doc View Source Enabled Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Game Declaration public Game Game { get; } Property Value Type Description Game | Improve this Doc View Source UpdateOrder Declaration public int UpdateOrder { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareTo(GameComponent) Declaration public int CompareTo(GameComponent other) Parameters Type Name Description GameComponent other Returns Type Description System.Int32 | Improve this Doc View Source Dispose() Shuts down the component. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Shuts down the component. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Initialize() Declaration public virtual void Initialize() | Improve this Doc View Source OnEnabledChanged(Object, EventArgs) Declaration protected virtual void OnEnabledChanged(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source OnUpdateOrderChanged(Object, EventArgs) Declaration protected virtual void OnUpdateOrderChanged(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source Update(GameTime) Declaration public virtual void Update(GameTime gameTime) Parameters Type Name Description GameTime gameTime Events | Improve this Doc View Source EnabledChanged Declaration public event EventHandler<EventArgs> EnabledChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source UpdateOrderChanged Declaration public event EventHandler<EventArgs> UpdateOrderChanged Event Type Type Description System.EventHandler < System.EventArgs > Implements IGameComponent IUpdateable System.IComparable<T> System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Design.Vector2TypeConverter.html": {
    "href": "_api/Microsoft.Xna.Framework.Design.Vector2TypeConverter.html",
    "title": "Class Vector2TypeConverter | MonoGame Documentation",
    "keywords": "Class Vector2TypeConverter Inheritance System.Object System.ComponentModel.TypeConverter Vector2TypeConverter Inherited Members System.ComponentModel.TypeConverter.CanConvertFrom(System.Type) System.ComponentModel.TypeConverter.CanConvertTo(System.Type) System.ComponentModel.TypeConverter.ConvertFrom(System.Object) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String) System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary) System.ComponentModel.TypeConverter.GetConvertFromException(System.Object) System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type) System.ComponentModel.TypeConverter.GetCreateInstanceSupported() System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetProperties(System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[]) System.ComponentModel.TypeConverter.GetPropertiesSupported() System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValues() System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesExclusive() System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesSupported() System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.IsValid(System.Object) System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Design Assembly : MonoGame.Framework.dll Syntax public class Vector2TypeConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type sourceType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source CanConvertTo(ITypeDescriptorContext, Type) Declaration public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type destinationType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value System.Type destinationType Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)"
  },
  "_api/Microsoft.Xna.Framework.Content.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.html",
    "title": "Namespace Microsoft.Xna.Framework.Content | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Content Classes ContentLoadException ContentManager ContentReader ContentSerializerAttribute ContentSerializerCollectionItemNameAttribute This is used to specify the XML element name to use for each item in a collection. ContentSerializerIgnoreAttribute ContentSerializerRuntimeTypeAttribute This is used to specify the type to use when deserializing this object at runtime. ContentSerializerTypeVersionAttribute This is used to specify the version when deserializing this object at runtime. ContentTypeReader ContentTypeReader<T> ContentTypeReaderManager ResourceContentManager"
  },
  "_api/Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.html",
    "title": "Class ContentSerializerCollectionItemNameAttribute | MonoGame Documentation",
    "keywords": "Class ContentSerializerCollectionItemNameAttribute This is used to specify the XML element name to use for each item in a collection. Inheritance System.Object System.Attribute ContentSerializerCollectionItemNameAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class ContentSerializerCollectionItemNameAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ContentSerializerCollectionItemNameAttribute(String) Creates an instance of the attribute. Declaration public ContentSerializerCollectionItemNameAttribute(string collectionItemName) Parameters Type Name Description System.String collectionItemName The XML element name to use for each item in the collection. Properties | Improve this Doc View Source CollectionItemName The XML element name to use for each item in the collection. Declaration public string CollectionItemName { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "_api/Microsoft.Xna.Framework.BoundingFrustum.html": {
    "href": "_api/Microsoft.Xna.Framework.BoundingFrustum.html",
    "title": "Class BoundingFrustum | MonoGame Documentation",
    "keywords": "Class BoundingFrustum Defines a viewing frustum for intersection operations. Inheritance System.Object BoundingFrustum Implements System.IEquatable < BoundingFrustum > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class BoundingFrustum : IEquatable<BoundingFrustum> Constructors | Improve this Doc View Source BoundingFrustum(Matrix) Constructs the frustum by extracting the view planes from a matrix. Declaration public BoundingFrustum(Matrix value) Parameters Type Name Description Matrix value Combined matrix which usually is (View * Projection). Fields | Improve this Doc View Source CornerCount The number of corner points in the frustum. Declaration public const int CornerCount = 8 Field Value Type Description System.Int32 | Improve this Doc View Source PlaneCount The number of planes in the frustum. Declaration public const int PlaneCount = 6 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Bottom Gets the bottom plane of the frustum. Declaration public Plane Bottom { get; } Property Value Type Description Plane | Improve this Doc View Source Far Gets the far plane of the frustum. Declaration public Plane Far { get; } Property Value Type Description Plane | Improve this Doc View Source Left Gets the left plane of the frustum. Declaration public Plane Left { get; } Property Value Type Description Plane | Improve this Doc View Source Matrix Gets or sets the Matrix of the frustum. Declaration public Matrix Matrix { get; set; } Property Value Type Description Matrix | Improve this Doc View Source Near Gets the near plane of the frustum. Declaration public Plane Near { get; } Property Value Type Description Plane | Improve this Doc View Source Right Gets the right plane of the frustum. Declaration public Plane Right { get; } Property Value Type Description Plane | Improve this Doc View Source Top Gets the top plane of the frustum. Declaration public Plane Top { get; } Property Value Type Description Plane Methods | Improve this Doc View Source Contains(BoundingBox) Containment test between this BoundingFrustum and specified BoundingBox . Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box A BoundingBox for testing. Returns Type Description ContainmentType Result of testing for containment between this BoundingFrustum and specified BoundingBox . | Improve this Doc View Source Contains(ref BoundingBox, out ContainmentType) Containment test between this BoundingFrustum and specified BoundingBox . Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box A BoundingBox for testing. ContainmentType result Result of testing for containment between this BoundingFrustum and specified BoundingBox as an output parameter. | Improve this Doc View Source Contains(BoundingFrustum) Containment test between this BoundingFrustum and specified BoundingFrustum . Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum A BoundingFrustum for testing. Returns Type Description ContainmentType Result of testing for containment between this BoundingFrustum and specified BoundingFrustum . | Improve this Doc View Source Contains(BoundingSphere) Containment test between this BoundingFrustum and specified BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere A BoundingSphere for testing. Returns Type Description ContainmentType Result of testing for containment between this BoundingFrustum and specified BoundingSphere . | Improve this Doc View Source Contains(ref BoundingSphere, out ContainmentType) Containment test between this BoundingFrustum and specified BoundingSphere . Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere A BoundingSphere for testing. ContainmentType result Result of testing for containment between this BoundingFrustum and specified BoundingSphere as an output parameter. | Improve this Doc View Source Contains(Vector3) Containment test between this BoundingFrustum and specified Vector3 . Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point A Vector3 for testing. Returns Type Description ContainmentType Result of testing for containment between this BoundingFrustum and specified Vector3 . | Improve this Doc View Source Contains(ref Vector3, out ContainmentType) Containment test between this BoundingFrustum and specified Vector3 . Declaration public void Contains(ref Vector3 point, out ContainmentType result) Parameters Type Name Description Vector3 point A Vector3 for testing. ContainmentType result Result of testing for containment between this BoundingFrustum and specified Vector3 as an output parameter. | Improve this Doc View Source Equals(BoundingFrustum) Compares whether current instance is equal to specified BoundingFrustum . Declaration public bool Equals(BoundingFrustum other) Parameters Type Name Description BoundingFrustum other The BoundingFrustum to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified BoundingFrustum . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetCorners() Returns a copy of internal corners array. Declaration public Vector3[] GetCorners() Returns Type Description Vector3 [] The array of corners. | Improve this Doc View Source GetCorners(Vector3[]) Returns a copy of internal corners array. Declaration public void GetCorners(Vector3[] corners) Parameters Type Name Description Vector3 [] corners The array which values will be replaced to corner values of this instance. It must have size of CornerCount . | Improve this Doc View Source GetHashCode() Gets the hash code of this BoundingFrustum . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this BoundingFrustum . Overrides System.Object.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Gets whether or not a specified BoundingBox intersects with this BoundingFrustum . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box A BoundingBox for intersection test. Returns Type Description System.Boolean true if specified BoundingBox intersects with this BoundingFrustum ; false otherwise. | Improve this Doc View Source Intersects(ref BoundingBox, out Boolean) Gets whether or not a specified BoundingBox intersects with this BoundingFrustum . Declaration public void Intersects(ref BoundingBox box, out bool result) Parameters Type Name Description BoundingBox box A BoundingBox for intersection test. System.Boolean result true if specified BoundingBox intersects with this BoundingFrustum ; false otherwise as an output parameter. | Improve this Doc View Source Intersects(BoundingFrustum) Gets whether or not a specified BoundingFrustum intersects with this BoundingFrustum . Declaration public bool Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum An other BoundingFrustum for intersection test. Returns Type Description System.Boolean true if other BoundingFrustum intersects with this BoundingFrustum ; false otherwise. | Improve this Doc View Source Intersects(BoundingSphere) Gets whether or not a specified BoundingSphere intersects with this BoundingFrustum . Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere A BoundingSphere for intersection test. Returns Type Description System.Boolean true if specified BoundingSphere intersects with this BoundingFrustum ; false otherwise. | Improve this Doc View Source Intersects(ref BoundingSphere, out Boolean) Gets whether or not a specified BoundingSphere intersects with this BoundingFrustum . Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere A BoundingSphere for intersection test. System.Boolean result true if specified BoundingSphere intersects with this BoundingFrustum ; false otherwise as an output parameter. | Improve this Doc View Source Intersects(Plane) Gets type of intersection between specified Plane and this BoundingFrustum . Declaration public PlaneIntersectionType Intersects(Plane plane) Parameters Type Name Description Plane plane A Plane for intersection test. Returns Type Description PlaneIntersectionType A plane intersection type. | Improve this Doc View Source Intersects(ref Plane, out PlaneIntersectionType) Gets type of intersection between specified Plane and this BoundingFrustum . Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane A Plane for intersection test. PlaneIntersectionType result A plane intersection type as an output parameter. | Improve this Doc View Source Intersects(Ray) Gets the distance of intersection of Ray and this BoundingFrustum or null if no intersection happens. Declaration public float ? Intersects(Ray ray) Parameters Type Name Description Ray ray A Ray for intersection test. Returns Type Description System.Nullable < System.Single > Distance at which ray intersects with this BoundingFrustum or null if no intersection happens. | Improve this Doc View Source Intersects(ref Ray, out Nullable<Single>) Gets the distance of intersection of Ray and this BoundingFrustum or null if no intersection happens. Declaration public void Intersects(ref Ray ray, out float ? result) Parameters Type Name Description Ray ray A Ray for intersection test. System.Nullable < System.Single > result Distance at which ray intersects with this BoundingFrustum or null if no intersection happens as an output parameter. | Improve this Doc View Source ToString() Returns a System.String representation of this BoundingFrustum in the format: {Near:[nearPlane] Far:[farPlane] Left:[leftPlane] Right:[rightPlane] Top:[topPlane] Bottom:[bottomPlane]} Declaration public override string ToString() Returns Type Description System.String System.String representation of this BoundingFrustum . Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(BoundingFrustum, BoundingFrustum) Compares whether two BoundingFrustum instances are equal. Declaration public static bool operator ==(BoundingFrustum a, BoundingFrustum b) Parameters Type Name Description BoundingFrustum a BoundingFrustum instance on the left of the equal sign. BoundingFrustum b BoundingFrustum instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(BoundingFrustum, BoundingFrustum) Compares whether two BoundingFrustum instances are not equal. Declaration public static bool operator !=(BoundingFrustum a, BoundingFrustum b) Parameters Type Name Description BoundingFrustum a BoundingFrustum instance on the left of the not equal sign. BoundingFrustum b BoundingFrustum instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Audio.SoundBank.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.SoundBank.html",
    "title": "Class SoundBank | MonoGame Documentation",
    "keywords": "Class SoundBank Represents a collection of Cues. Inheritance System.Object SoundBank Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class SoundBank : IDisposable Constructors | Improve this Doc View Source SoundBank(AudioEngine, String) Declaration public SoundBank(AudioEngine audioEngine, string fileName) Parameters Type Name Description AudioEngine audioEngine AudioEngine that will be associated with this sound bank. System.String fileName Path to a .xsb SoundBank file. Properties | Improve this Doc View Source IsDisposed Is true if the SoundBank has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInUse Is true if the SoundBank has any live Cues in use. Declaration public bool IsInUse { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Dispose() Disposes the SoundBank. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetCue(String) Returns a pooled Cue object. Declaration public Cue GetCue(string name) Parameters Type Name Description System.String name Friendly name of the cue to get. Returns Type Description Cue a unique Cue object from a pool. Remarks Cue instances are unique, even when sharing the same name. This allows multiple instances to simultaneously play. | Improve this Doc View Source PlayCue(String) Plays a cue. Declaration public void PlayCue(string name) Parameters Type Name Description System.String name Name of the cue to play. | Improve this Doc View Source PlayCue(String, AudioListener, AudioEmitter) Plays a cue with static 3D positional information. Declaration public void PlayCue(string name, AudioListener listener, AudioEmitter emitter) Parameters Type Name Description System.String name The name of the cue to play. AudioListener listener The listener state. AudioEmitter emitter The cue emitter state. Remarks Commonly used for short lived effects. To dynamically change the 3D positional information on a cue over time use GetCue(String) and Apply3D(AudioListener, AudioEmitter) . Events | Improve this Doc View Source Disposing This event is triggered when the SoundBank is disposed. Declaration public event EventHandler<EventArgs> Disposing Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchCollection.html",
    "title": "Struct TouchCollection | MonoGame Documentation",
    "keywords": "Struct TouchCollection Provides state information for a touch screen enabled device. Implements System.Collections.Generic.IList < TouchLocation > System.Collections.Generic.ICollection < TouchLocation > System.Collections.Generic.IEnumerable < TouchLocation > System.Collections.IEnumerable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public struct TouchCollection : IList<TouchLocation>, ICollection<TouchLocation>, IEnumerable<TouchLocation>, IEnumerable Constructors | Improve this Doc View Source TouchCollection(TouchLocation[]) Initializes a new instance of the TouchCollection with a pre-determined set of touch locations. Declaration public TouchCollection(TouchLocation[] touches) Parameters Type Name Description TouchLocation [] touches Array of TouchLocation items to initialize with. Properties | Improve this Doc View Source Count Returns the number of TouchLocation items that exist in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsConnected States if a touch screen is available. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly States if touch collection is read only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets or sets the item at the specified index of the collection. Declaration public TouchLocation this[int index] { get; set; } Parameters Type Name Description System.Int32 index Position of the item. Property Value Type Description TouchLocation TouchLocation Methods | Improve this Doc View Source Add(TouchLocation) Adds a TouchLocation to the collection. Declaration public void Add(TouchLocation item) Parameters Type Name Description TouchLocation item The TouchLocation item to be added. | Improve this Doc View Source Clear() Clears all the items in collection. Declaration public void Clear() | Improve this Doc View Source Contains(TouchLocation) Returns true if specified TouchLocation item exists in the collection, false otherwise./> Declaration public bool Contains(TouchLocation item) Parameters Type Name Description TouchLocation item The TouchLocation item to query for. Returns Type Description System.Boolean Returns true if queried item is found, false otherwise. | Improve this Doc View Source CopyTo(TouchLocation[], Int32) Copies the TouchLocation collection to specified array starting from the given index. Declaration public void CopyTo(TouchLocation[] array, int arrayIndex) Parameters Type Name Description TouchLocation [] array The array to copy TouchLocation items. System.Int32 arrayIndex The starting index of the copy operation. | Improve this Doc View Source FindById(Int32, out TouchLocation) Returns TouchLocation specified by ID. Declaration public bool FindById(int id, out TouchLocation touchLocation) Parameters Type Name Description System.Int32 id TouchLocation touchLocation Returns Type Description System.Boolean | Improve this Doc View Source GetEnumerator() Returns an enumerator for the TouchCollection . Declaration public TouchCollection.Enumerator GetEnumerator() Returns Type Description TouchCollection.Enumerator Enumerable list of TouchLocation objects. | Improve this Doc View Source IndexOf(TouchLocation) Returns the index of the first occurrence of specified TouchLocation item in the collection. Declaration public int IndexOf(TouchLocation item) Parameters Type Name Description TouchLocation item TouchLocation to query. Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, TouchLocation) Inserts a TouchLocation item into the indicated position. Declaration public void Insert(int index, TouchLocation item) Parameters Type Name Description System.Int32 index The position to insert into. TouchLocation item The TouchLocation item to insert. | Improve this Doc View Source Remove(TouchLocation) Removes the specified TouchLocation item from the collection. Declaration public bool Remove(TouchLocation item) Parameters Type Name Description TouchLocation item The TouchLocation item to remove. Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Removes the TouchLocation item at specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Index of the item that will be removed from collection. Explicit Interface Implementations | Improve this Doc View Source IEnumerable<TouchLocation>.GetEnumerator() Returns an enumerator for the TouchCollection . Declaration IEnumerator<TouchLocation> IEnumerable<TouchLocation>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < TouchLocation > Enumerable list of TouchLocation objects. | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator for the TouchCollection . Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Enumerable list of objects. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator.html",
    "title": "Struct TouchCollection.Enumerator | MonoGame Documentation",
    "keywords": "Struct TouchCollection.Enumerator Provides the ability to iterate through the TouchLocations in an TouchCollection. Implements System.Collections.Generic.IEnumerator < TouchLocation > System.IDisposable System.Collections.IEnumerator Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public struct Enumerator : IEnumerator<TouchLocation>, IDisposable, IEnumerator Properties | Improve this Doc View Source Current Gets the current element in the TouchCollection. Declaration public TouchLocation Current { get; } Property Value Type Description TouchLocation Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the TouchCollection. Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "_api/Microsoft.Xna.Framework.IGraphicsDeviceManager.html": {
    "href": "_api/Microsoft.Xna.Framework.IGraphicsDeviceManager.html",
    "title": "Interface IGraphicsDeviceManager | MonoGame Documentation",
    "keywords": "Interface IGraphicsDeviceManager Used by the platform code to control the graphics device. Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public interface IGraphicsDeviceManager Methods | Improve this Doc View Source BeginDraw() Called at the start of rendering a frame. Declaration bool BeginDraw() Returns Type Description System.Boolean Returns true if the frame should be rendered. | Improve this Doc View Source CreateDevice() Called to create the graphics device. Declaration void CreateDevice() Remarks Does nothing if the graphics device is already created. | Improve this Doc View Source EndDraw() Called after rendering to present the frame to the screen. Declaration void EndDraw()"
  },
  "_api/Microsoft.Xna.Framework.IGameComponent.html": {
    "href": "_api/Microsoft.Xna.Framework.IGameComponent.html",
    "title": "Interface IGameComponent | MonoGame Documentation",
    "keywords": "Interface IGameComponent Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public interface IGameComponent Methods | Improve this Doc View Source Initialize() Declaration void Initialize()"
  },
  "_api/Microsoft.Xna.Framework.Graphics.TextureCube.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.TextureCube.html",
    "title": "Class TextureCube | MonoGame Documentation",
    "keywords": "Class TextureCube Inheritance System.Object GraphicsResource Texture TextureCube RenderTargetCube Implements System.IDisposable Inherited Members Texture.Format Texture.LevelCount Texture.GraphicsDeviceResetting() Texture.GetSharedHandle() Texture.CreateShaderResourceView() Texture.Dispose(Boolean) GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class TextureCube : Texture, IDisposable Constructors | Improve this Doc View Source TextureCube(GraphicsDevice, Int32, Boolean, SurfaceFormat) Declaration public TextureCube(GraphicsDevice graphicsDevice, int size, bool mipMap, SurfaceFormat format) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 size System.Boolean mipMap SurfaceFormat format Properties | Improve this Doc View Source Size Gets the width and height of the cube map face in pixels. Declaration public int Size { get; } Property Value Type Description System.Int32 The width and height of a cube map face in pixels. Methods | Improve this Doc View Source GetData<T>(CubeMapFace, T[]) Gets a copy of cube texture data specifying a cubemap face. Declaration public void GetData<T>(CubeMapFace cubeMapFace, T[] data)where T : struct Parameters Type Name Description CubeMapFace cubeMapFace The cube map face. T[] data The data. Type Parameters Name Description T | Improve this Doc View Source GetData<T>(CubeMapFace, T[], Int32, Int32) Declaration public void GetData<T>(CubeMapFace cubeMapFace, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description CubeMapFace cubeMapFace T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source GetData<T>(CubeMapFace, Int32, Nullable<Rectangle>, T[], Int32, Int32) Declaration public void GetData<T>(CubeMapFace cubeMapFace, int level, Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description CubeMapFace cubeMapFace System.Int32 level System.Nullable < Rectangle > rect T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetData<T>(CubeMapFace, T[]) Declaration public void SetData<T>(CubeMapFace face, T[] data)where T : struct Parameters Type Name Description CubeMapFace face T[] data Type Parameters Name Description T | Improve this Doc View Source SetData<T>(CubeMapFace, T[], Int32, Int32) Declaration public void SetData<T>(CubeMapFace face, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description CubeMapFace face T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetData<T>(CubeMapFace, Int32, Nullable<Rectangle>, T[], Int32, Int32) Declaration public void SetData<T>(CubeMapFace face, int level, Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description CubeMapFace face System.Int32 level System.Nullable < Rectangle > rect T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.TextureCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.TextureCollection.html",
    "title": "Class TextureCollection | MonoGame Documentation",
    "keywords": "Class TextureCollection Inheritance System.Object TextureCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class TextureCollection Properties | Improve this Doc View Source Item[Int32] Declaration public Texture this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description Texture"
  },
  "_api/Microsoft.Xna.Framework.Graphics.SpriteBatch.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SpriteBatch.html",
    "title": "Class SpriteBatch | MonoGame Documentation",
    "keywords": "Class SpriteBatch Helper class for drawing text strings and sprites in one or more optimized batches. Inheritance System.Object GraphicsResource SpriteBatch Implements System.IDisposable Inherited Members GraphicsResource.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class SpriteBatch : GraphicsResource, IDisposable Constructors | Improve this Doc View Source SpriteBatch(GraphicsDevice) Constructs a SpriteBatch . Declaration public SpriteBatch(GraphicsDevice graphicsDevice) Parameters Type Name Description GraphicsDevice graphicsDevice The GraphicsDevice , which will be used for sprite rendering. Exceptions Type Condition System.ArgumentNullException Thrown when graphicsDevice is null. Methods | Improve this Doc View Source Begin(SpriteSortMode, BlendState, SamplerState, DepthStencilState, RasterizerState, Effect, Nullable<Matrix>) Begins a new sprite and text batch with the specified render state. Declaration public void Begin(SpriteSortMode sortMode = SpriteSortMode.Deferred, BlendState blendState = null, SamplerState samplerState = null, DepthStencilState depthStencilState = null, RasterizerState rasterizerState = null, Effect effect = null, Matrix? transformMatrix = default (Matrix? )) Parameters Type Name Description SpriteSortMode sortMode The drawing order for sprite and text drawing. Deferred by default. BlendState blendState State of the blending. Uses AlphaBlend if null. SamplerState samplerState State of the sampler. Uses LinearClamp if null. DepthStencilState depthStencilState State of the depth-stencil buffer. Uses None if null. RasterizerState rasterizerState State of the rasterization. Uses CullCounterClockwise if null. Effect effect A custom Effect to override the default sprite effect. Uses default sprite effect if null. System.Nullable < Matrix > transformMatrix An optional matrix used to transform the sprite geometry. Uses Identity if null. Remarks This method uses optional parameters. Exceptions Type Condition System.InvalidOperationException Thrown if Begin(SpriteSortMode, BlendState, SamplerState, DepthStencilState, RasterizerState, Effect, Nullable<Matrix>) is called next time without previous End() . | Improve this Doc View Source Dispose(Boolean) Immediately releases the unmanaged resources used by this object. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source Draw(Texture2D, Rectangle, Color) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Rectangle destinationRectangle, Color color) Parameters Type Name Description Texture2D texture A texture. Rectangle destinationRectangle The drawing bounds on screen. Color color A color mask. | Improve this Doc View Source Draw(Texture2D, Rectangle, Nullable<Rectangle>, Color) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Rectangle destinationRectangle, Rectangle? sourceRectangle, Color color) Parameters Type Name Description Texture2D texture A texture. Rectangle destinationRectangle The drawing bounds on screen. System.Nullable < Rectangle > sourceRectangle An optional region on the texture which will be rendered. If null - draws full texture. Color color A color mask. | Improve this Doc View Source Draw(Texture2D, Rectangle, Nullable<Rectangle>, Color, Single, Vector2, SpriteEffects, Single) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Rectangle destinationRectangle, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, SpriteEffects effects, float layerDepth) Parameters Type Name Description Texture2D texture A texture. Rectangle destinationRectangle The drawing bounds on screen. System.Nullable < Rectangle > sourceRectangle An optional region on the texture which will be rendered. If null - draws full texture. Color color A color mask. System.Single rotation A rotation of this sprite. Vector2 origin Center of the rotation. 0,0 by default. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this sprite. | Improve this Doc View Source Draw(Texture2D, Vector2, Color) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Vector2 position, Color color) Parameters Type Name Description Texture2D texture A texture. Vector2 position The drawing location on screen. Color color A color mask. | Improve this Doc View Source Draw(Texture2D, Vector2, Nullable<Rectangle>, Color) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color) Parameters Type Name Description Texture2D texture A texture. Vector2 position The drawing location on screen. System.Nullable < Rectangle > sourceRectangle An optional region on the texture which will be rendered. If null - draws full texture. Color color A color mask. | Improve this Doc View Source Draw(Texture2D, Vector2, Nullable<Rectangle>, Color, Single, Vector2, Vector2, SpriteEffects, Single) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float layerDepth) Parameters Type Name Description Texture2D texture A texture. Vector2 position The drawing location on screen. System.Nullable < Rectangle > sourceRectangle An optional region on the texture which will be rendered. If null - draws full texture. Color color A color mask. System.Single rotation A rotation of this sprite. Vector2 origin Center of the rotation. 0,0 by default. Vector2 scale A scaling of this sprite. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this sprite. | Improve this Doc View Source Draw(Texture2D, Vector2, Nullable<Rectangle>, Color, Single, Vector2, Single, SpriteEffects, Single) Submit a sprite for drawing in the current batch. Declaration public void Draw(Texture2D texture, Vector2 position, Rectangle? sourceRectangle, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float layerDepth) Parameters Type Name Description Texture2D texture A texture. Vector2 position The drawing location on screen. System.Nullable < Rectangle > sourceRectangle An optional region on the texture which will be rendered. If null - draws full texture. Color color A color mask. System.Single rotation A rotation of this sprite. Vector2 origin Center of the rotation. 0,0 by default. System.Single scale A scaling of this sprite. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this sprite. | Improve this Doc View Source Draw(Texture2D, Nullable<Vector2>, Nullable<Rectangle>, Nullable<Rectangle>, Nullable<Vector2>, Single, Nullable<Vector2>, Nullable<Color>, SpriteEffects, Single) Submit a sprite for drawing in the current batch. Declaration [Obsolete(\"In future versions this method can be removed.\")] public void Draw(Texture2D texture, Vector2? position = default (Vector2? ), Rectangle? destinationRectangle = default (Rectangle? ), Rectangle? sourceRectangle = default (Rectangle? ), Vector2? origin = default (Vector2? ), float rotation = 0F, Vector2? scale = default (Vector2? ), Color? color = default (Color? ), SpriteEffects effects = SpriteEffects.None, float layerDepth = 0F) Parameters Type Name Description Texture2D texture A texture. System.Nullable < Vector2 > position The drawing location on screen or null if destinationRectangle System.Nullable < Rectangle > destinationRectangle The drawing bounds on screen or null if position System.Nullable < Rectangle > sourceRectangle An optional region on the texture which will be rendered. If null - draws full texture. System.Nullable < Vector2 > origin An optional center of rotation. Uses Zero if null. System.Single rotation An optional rotation of this sprite. 0 by default. System.Nullable < Vector2 > scale An optional scale vector. Uses One if null. System.Nullable < Color > color An optional color mask. Uses White if null. SpriteEffects effects The optional drawing modificators. None by default. System.Single layerDepth An optional depth of the layer of this sprite. 0 by default. Remarks This overload uses optional parameters. This overload requires only one of position and destinationRectangle been used. Exceptions Type Condition System.InvalidOperationException Throwns if both position and destinationRectangle been used. | Improve this Doc View Source DrawString(SpriteFont, String, Vector2, Color) Submit a text string of sprites for drawing in the current batch. Declaration public void DrawString(SpriteFont spriteFont, string text, Vector2 position, Color color) Parameters Type Name Description SpriteFont spriteFont A font. System.String text The text which will be drawn. Vector2 position The drawing location on screen. Color color A color mask. | Improve this Doc View Source DrawString(SpriteFont, String, Vector2, Color, Single, Vector2, Vector2, SpriteEffects, Single) Submit a text string of sprites for drawing in the current batch. Declaration public void DrawString(SpriteFont spriteFont, string text, Vector2 position, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float layerDepth) Parameters Type Name Description SpriteFont spriteFont A font. System.String text The text which will be drawn. Vector2 position The drawing location on screen. Color color A color mask. System.Single rotation A rotation of this string. Vector2 origin Center of the rotation. 0,0 by default. Vector2 scale A scaling of this string. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this string. | Improve this Doc View Source DrawString(SpriteFont, String, Vector2, Color, Single, Vector2, Single, SpriteEffects, Single) Submit a text string of sprites for drawing in the current batch. Declaration public void DrawString(SpriteFont spriteFont, string text, Vector2 position, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float layerDepth) Parameters Type Name Description SpriteFont spriteFont A font. System.String text The text which will be drawn. Vector2 position The drawing location on screen. Color color A color mask. System.Single rotation A rotation of this string. Vector2 origin Center of the rotation. 0,0 by default. System.Single scale A scaling of this string. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this string. | Improve this Doc View Source DrawString(SpriteFont, StringBuilder, Vector2, Color) Submit a text string of sprites for drawing in the current batch. Declaration public void DrawString(SpriteFont spriteFont, StringBuilder text, Vector2 position, Color color) Parameters Type Name Description SpriteFont spriteFont A font. System.Text.StringBuilder text The text which will be drawn. Vector2 position The drawing location on screen. Color color A color mask. | Improve this Doc View Source DrawString(SpriteFont, StringBuilder, Vector2, Color, Single, Vector2, Vector2, SpriteEffects, Single) Submit a text string of sprites for drawing in the current batch. Declaration public void DrawString(SpriteFont spriteFont, StringBuilder text, Vector2 position, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float layerDepth) Parameters Type Name Description SpriteFont spriteFont A font. System.Text.StringBuilder text The text which will be drawn. Vector2 position The drawing location on screen. Color color A color mask. System.Single rotation A rotation of this string. Vector2 origin Center of the rotation. 0,0 by default. Vector2 scale A scaling of this string. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this string. | Improve this Doc View Source DrawString(SpriteFont, StringBuilder, Vector2, Color, Single, Vector2, Single, SpriteEffects, Single) Submit a text string of sprites for drawing in the current batch. Declaration public void DrawString(SpriteFont spriteFont, StringBuilder text, Vector2 position, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float layerDepth) Parameters Type Name Description SpriteFont spriteFont A font. System.Text.StringBuilder text The text which will be drawn. Vector2 position The drawing location on screen. Color color A color mask. System.Single rotation A rotation of this string. Vector2 origin Center of the rotation. 0,0 by default. System.Single scale A scaling of this string. SpriteEffects effects Modificators for drawing. Can be combined. System.Single layerDepth A depth of the layer of this string. | Improve this Doc View Source End() Flushes all batched text and sprites to the screen. Declaration public void End() Remarks This command should be called after Begin(SpriteSortMode, BlendState, SamplerState, DepthStencilState, RasterizerState, Effect, Nullable<Matrix>) and drawing commands. Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.SkinnedEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SkinnedEffect.html",
    "title": "Class SkinnedEffect | MonoGame Documentation",
    "keywords": "Class SkinnedEffect Built-in effect for rendering skinned character models. Inheritance System.Object GraphicsResource Effect SkinnedEffect Implements System.IDisposable IEffectMatrices IEffectLights IEffectFog Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class SkinnedEffect : Effect, IDisposable, IEffectMatrices, IEffectLights, IEffectFog Constructors | Improve this Doc View Source SkinnedEffect(GraphicsDevice) Creates a new SkinnedEffect with default parameter settings. Declaration public SkinnedEffect(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device | Improve this Doc View Source SkinnedEffect(SkinnedEffect) Creates a new SkinnedEffect by cloning parameter settings from an existing instance. Declaration protected SkinnedEffect(SkinnedEffect cloneSource) Parameters Type Name Description SkinnedEffect cloneSource Fields | Improve this Doc View Source MaxBones Declaration public const int MaxBones = 72 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Alpha Gets or sets the material alpha. Declaration public float Alpha { get; set; } Property Value Type Description System.Single | Improve this Doc View Source AmbientLightColor Gets or sets the ambient light color (range 0 to 1). Declaration public Vector3 AmbientLightColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DiffuseColor Gets or sets the material diffuse color (range 0 to 1). Declaration public Vector3 DiffuseColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DirectionalLight0 Gets the first directional light. Declaration public DirectionalLight DirectionalLight0 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight1 Gets the second directional light. Declaration public DirectionalLight DirectionalLight1 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight2 Gets the third directional light. Declaration public DirectionalLight DirectionalLight2 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source EmissiveColor Gets or sets the material emissive color (range 0 to 1). Declaration public Vector3 EmissiveColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogColor Gets or sets the fog color. Declaration public Vector3 FogColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogEnabled Gets or sets the fog enable flag. Declaration public bool FogEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FogEnd Gets or sets the fog end distance. Declaration public float FogEnd { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FogStart Gets or sets the fog start distance. Declaration public float FogStart { get; set; } Property Value Type Description System.Single | Improve this Doc View Source PreferPerPixelLighting Gets or sets the per-pixel lighting prefer flag. Declaration public bool PreferPerPixelLighting { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Projection Gets or sets the projection matrix. Declaration public Matrix Projection { get; set; } Property Value Type Description Matrix | Improve this Doc View Source SpecularColor Gets or sets the material specular color (range 0 to 1). Declaration public Vector3 SpecularColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source SpecularPower Gets or sets the material specular power. Declaration public float SpecularPower { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Texture Gets or sets the current texture. Declaration public Texture2D Texture { get; set; } Property Value Type Description Texture2D | Improve this Doc View Source View Gets or sets the view matrix. Declaration public Matrix View { get; set; } Property Value Type Description Matrix | Improve this Doc View Source WeightsPerVertex Gets or sets the number of skinning weights to evaluate for each vertex (1, 2, or 4). Declaration public int WeightsPerVertex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source World Gets or sets the world matrix. Declaration public Matrix World { get; set; } Property Value Type Description Matrix Methods | Improve this Doc View Source Clone() Creates a clone of the current SkinnedEffect instance. Declaration public override Effect Clone() Returns Type Description Effect Overrides Effect.Clone() | Improve this Doc View Source EnableDefaultLighting() Sets up the standard key/fill/back lighting rig. Declaration public void EnableDefaultLighting() | Improve this Doc View Source GetBoneTransforms(Int32) Gets a copy of the current skinning bone transform matrices. Declaration public Matrix[] GetBoneTransforms(int count) Parameters Type Name Description System.Int32 count Returns Type Description Matrix [] | Improve this Doc View Source OnApply() Lazily computes derived parameter values immediately before applying the effect. Declaration protected override void OnApply() Overrides Effect.OnApply() | Improve this Doc View Source SetBoneTransforms(Matrix[]) Sets an array of skinning bone transform matrices. Declaration public void SetBoneTransforms(Matrix[] boneTransforms) Parameters Type Name Description Matrix [] boneTransforms Explicit Interface Implementations | Improve this Doc View Source IEffectLights.LightingEnabled This effect requires lighting, so we explicitly implement IEffectLights.LightingEnabled, and do not allow turning it off. Declaration bool IEffectLights.LightingEnabled { get; set; } Returns Type Description System.Boolean Implements System.IDisposable IEffectMatrices IEffectLights IEffectFog"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.html",
    "title": "Namespace Microsoft.Xna.Framework.Graphics.PackedVector | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Graphics.PackedVector Structs Alpha8 Packed vector type containing a single 8 bit normalized W values that is ranging from 0 to 1. Bgr565 Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits. Bgra4444 Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w. Bgra5551 Packed vector type containing unsigned normalized values ranging from 0 to 1. The x , y and z components use 5 bits, and the w component uses 1 bit. Byte4 Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255. HalfSingle HalfVector2 HalfVector4 Packed vector type containing four 16-bit floating-point values. NormalizedByte2 NormalizedByte4 NormalizedShort2 NormalizedShort4 Rg32 Packed vector type containing two 16-bit unsigned normalized values ranging from 0 to 1. Rgba1010102 Packed vector type containing unsigned normalized values ranging from 0 to 1. The x, y and z components use 10 bits, and the w component uses 2 bits. Rgba64 Packed vector type containing four 16-bit unsigned normalized values ranging from 0 to 1. Short2 Short4 Packed vector type containing four 16-bit signed integer values. Interfaces IPackedVector IPackedVector<TPacked>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Short4.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Short4.html",
    "title": "Struct Short4 | MonoGame Documentation",
    "keywords": "Struct Short4 Packed vector type containing four 16-bit signed integer values. Implements IPackedVector < System.UInt64 > IPackedVector System.IEquatable < Short4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Short4 : IPackedVector<ulong>, IPackedVector, IEquatable<Short4> Constructors | Improve this Doc View Source Short4(Vector4) Initializes a new instance of the Short4 class. Declaration public Short4(Vector4 vector) Parameters Type Name Description Vector4 vector A vector containing the initial values for the components of the Short4 structure. | Improve this Doc View Source Short4(Single, Single, Single, Single) Initializes a new instance of the Short4 class. Declaration public Short4(float x, float y, float z, float w) Parameters Type Name Description System.Single x Initial value for the x component. System.Single y Initial value for the y component. System.Single z Initial value for the z component. System.Single w Initial value for the w component. Properties | Improve this Doc View Source PackedValue Directly gets or sets the packed representation of the value. Declaration [CLSCompliant(false)] public ulong PackedValue { get; set; } Property Value Type Description System.UInt64 The packed representation of the value. Methods | Improve this Doc View Source Equals(Short4) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public bool Equals(Short4 other) Parameters Type Name Description Short4 other The object with which to make the comparison. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object with which to make the comparison. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code for the instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string representation of the current instance. Declaration public override string ToString() Returns Type Description System.String String that represents the object. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Expands the packed representation into a Vector4. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The expanded vector. Operators | Improve this Doc View Source Equality(Short4, Short4) Compares the current instance of a class to another instance to determine whether they are the same. Declaration public static bool operator ==(Short4 a, Short4 b) Parameters Type Name Description Short4 a The object to the left of the equality operator. Short4 b The object to the right of the equality operator. Returns Type Description System.Boolean true if the objects are the same; false otherwise. | Improve this Doc View Source Inequality(Short4, Short4) Compares the current instance of a class to another instance to determine whether they are different. Declaration public static bool operator !=(Short4 a, Short4 b) Parameters Type Name Description Short4 a The object to the left of the equality operator. Short4 b The object to the right of the equality operator. Returns Type Description System.Boolean true if the objects are different; false otherwise. Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed representation from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector The vector to create the packed representation from. Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.html",
    "title": "Struct Bgra5551 | MonoGame Documentation",
    "keywords": "Struct Bgra5551 Packed vector type containing unsigned normalized values ranging from 0 to 1. The x , y and z components use 5 bits, and the w component uses 1 bit. Implements IPackedVector < System.UInt16 > System.IEquatable < Bgra5551 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Bgra5551 : IPackedVector<ushort>, IEquatable<Bgra5551>, IPackedVector Constructors | Improve this Doc View Source Bgra5551(Vector4) Creates a new instance of Bgra5551. Declaration public Bgra5551(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components for the packed vector. | Improve this Doc View Source Bgra5551(Single, Single, Single, Single) Creates a new instance of Bgra5551. Declaration public Bgra5551(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x component System.Single y The y component System.Single z The z component System.Single w The w component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public ushort PackedValue { get; set; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source Equals(Bgra5551) Compares another Bgra5551 packed vector with the packed vector. Declaration public bool Equals(Bgra5551 other) Parameters Type Name Description Bgra5551 other The Bgra5551 packed vector to compare. Returns Type Description System.Boolean True if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean True if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Gets the packed vector in Vector4 format. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Operators | Improve this Doc View Source Equality(Bgra5551, Bgra5551) Declaration public static bool operator ==(Bgra5551 lhs, Bgra5551 rhs) Parameters Type Name Description Bgra5551 lhs Bgra5551 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Bgra5551, Bgra5551) Declaration public static bool operator !=(Bgra5551 lhs, Bgra5551 rhs) Parameters Type Name Description Bgra5551 lhs Bgra5551 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.html",
    "title": "Struct Bgr565 | MonoGame Documentation",
    "keywords": "Struct Bgr565 Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits. Implements IPackedVector < System.UInt16 > System.IEquatable < Bgr565 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Bgr565 : IPackedVector<ushort>, IEquatable<Bgr565>, IPackedVector Constructors | Improve this Doc View Source Bgr565(Vector3) Creates a new instance of Bgr565. Declaration public Bgr565(Vector3 vector) Parameters Type Name Description Vector3 vector Vector containing the components for the packed vector. | Improve this Doc View Source Bgr565(Single, Single, Single) Creates a new instance of Bgr565. Declaration public Bgr565(float x, float y, float z) Parameters Type Name Description System.Single x The x component System.Single y The y component System.Single z The z component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public ushort PackedValue { get; set; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source Equals(Bgr565) Compares another Bgr565 packed vector with the packed vector. Declaration public bool Equals(Bgr565 other) Parameters Type Name Description Bgr565 other The Bgr565 packed vector to compare. Returns Type Description System.Boolean true if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean true if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector3() Gets the packed vector in Vector3 format. Declaration public Vector3 ToVector3() Returns Type Description Vector3 The packed vector in Vector3 format Operators | Improve this Doc View Source Equality(Bgr565, Bgr565) Declaration public static bool operator ==(Bgr565 lhs, Bgr565 rhs) Parameters Type Name Description Bgr565 lhs Bgr565 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Bgr565, Bgr565) Declaration public static bool operator !=(Bgr565 lhs, Bgr565 rhs) Parameters Type Name Description Bgr565 lhs Bgr565 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. | Improve this Doc View Source IPackedVector.ToVector4() Gets the packed vector in Vector4 format. Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.html",
    "title": "Struct Alpha8 | MonoGame Documentation",
    "keywords": "Struct Alpha8 Packed vector type containing a single 8 bit normalized W values that is ranging from 0 to 1. Implements IPackedVector < System.Byte > System.IEquatable < Alpha8 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Alpha8 : IPackedVector<byte>, IEquatable<Alpha8>, IPackedVector Constructors | Improve this Doc View Source Alpha8(Single) Creates a new instance of Alpha8. Declaration public Alpha8(float alpha) Parameters Type Name Description System.Single alpha The alpha component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public byte PackedValue { get; set; } Property Value Type Description System.Byte Methods | Improve this Doc View Source Equals(Alpha8) Compares another Alpha8 packed vector with the packed vector. Declaration public bool Equals(Alpha8 other) Parameters Type Name Description Alpha8 other The Alpha8 packed vector to compare. Returns Type Description System.Boolean True if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean True if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToAlpha() Gets the packed vector in float format. Declaration public float ToAlpha() Returns Type Description System.Single The packed vector in Vector3 format | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(Alpha8, Alpha8) Declaration public static bool operator ==(Alpha8 lhs, Alpha8 rhs) Parameters Type Name Description Alpha8 lhs Alpha8 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Alpha8, Alpha8) Declaration public static bool operator !=(Alpha8 lhs, Alpha8 rhs) Parameters Type Name Description Alpha8 lhs Alpha8 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. | Improve this Doc View Source IPackedVector.ToVector4() Gets the packed vector in Vector4 format. Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.html",
    "title": "Interface IGraphicsDeviceService | MonoGame Documentation",
    "keywords": "Interface IGraphicsDeviceService Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public interface IGraphicsDeviceService Properties | Improve this Doc View Source GraphicsDevice Declaration GraphicsDevice GraphicsDevice { get; } Property Value Type Description GraphicsDevice Events | Improve this Doc View Source DeviceCreated Declaration event EventHandler<EventArgs> DeviceCreated Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceDisposing Declaration event EventHandler<EventArgs> DeviceDisposing Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceReset Declaration event EventHandler<EventArgs> DeviceReset Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceResetting Declaration event EventHandler<EventArgs> DeviceResetting Event Type Type Description System.EventHandler < System.EventArgs >"
  },
  "_api/Microsoft.Xna.Framework.Graphics.IEffectMatrices.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IEffectMatrices.html",
    "title": "Interface IEffectMatrices | MonoGame Documentation",
    "keywords": "Interface IEffectMatrices Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public interface IEffectMatrices Properties | Improve this Doc View Source Projection Declaration Matrix Projection { get; set; } Property Value Type Description Matrix | Improve this Doc View Source View Declaration Matrix View { get; set; } Property Value Type Description Matrix | Improve this Doc View Source World Declaration Matrix World { get; set; } Property Value Type Description Matrix"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.html",
    "title": "Class EnvironmentMapEffect | MonoGame Documentation",
    "keywords": "Class EnvironmentMapEffect Built-in effect that supports environment mapping. Inheritance System.Object GraphicsResource Effect EnvironmentMapEffect Implements System.IDisposable IEffectMatrices IEffectLights IEffectFog Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EnvironmentMapEffect : Effect, IDisposable, IEffectMatrices, IEffectLights, IEffectFog Constructors | Improve this Doc View Source EnvironmentMapEffect(EnvironmentMapEffect) Creates a new EnvironmentMapEffect by cloning parameter settings from an existing instance. Declaration protected EnvironmentMapEffect(EnvironmentMapEffect cloneSource) Parameters Type Name Description EnvironmentMapEffect cloneSource | Improve this Doc View Source EnvironmentMapEffect(GraphicsDevice) Creates a new EnvironmentMapEffect with default parameter settings. Declaration public EnvironmentMapEffect(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device Properties | Improve this Doc View Source Alpha Gets or sets the material alpha. Declaration public float Alpha { get; set; } Property Value Type Description System.Single | Improve this Doc View Source AmbientLightColor Gets or sets the ambient light color (range 0 to 1). Declaration public Vector3 AmbientLightColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DiffuseColor Gets or sets the material diffuse color (range 0 to 1). Declaration public Vector3 DiffuseColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DirectionalLight0 Gets the first directional light. Declaration public DirectionalLight DirectionalLight0 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight1 Gets the second directional light. Declaration public DirectionalLight DirectionalLight1 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight2 Gets the third directional light. Declaration public DirectionalLight DirectionalLight2 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source EmissiveColor Gets or sets the material emissive color (range 0 to 1). Declaration public Vector3 EmissiveColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source EnvironmentMap Gets or sets the current environment map texture. Declaration public TextureCube EnvironmentMap { get; set; } Property Value Type Description TextureCube | Improve this Doc View Source EnvironmentMapAmount Gets or sets the amount of the environment map RGB that will be blended over the base texture. Range 0 to 1, default 1. If set to zero, the RGB channels of the environment map will completely ignored (but the environment map alpha may still be visible if EnvironmentMapSpecular is greater than zero). Declaration public float EnvironmentMapAmount { get; set; } Property Value Type Description System.Single | Improve this Doc View Source EnvironmentMapSpecular Gets or sets the amount of the environment map alpha channel that will be added to the base texture. Range 0 to 1, default 0. This can be used to implement cheap specular lighting, by encoding one or more specular highlight patterns into the environment map alpha channel, then setting EnvironmentMapSpecular to the desired specular light color. Declaration public Vector3 EnvironmentMapSpecular { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogColor Gets or sets the fog color. Declaration public Vector3 FogColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogEnabled Gets or sets the fog enable flag. Declaration public bool FogEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FogEnd Gets or sets the fog end distance. Declaration public float FogEnd { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FogStart Gets or sets the fog start distance. Declaration public float FogStart { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FresnelFactor Gets or sets the Fresnel factor used for the environment map blending. Higher values make the environment map only visible around the silhouette edges of the object, while lower values make it visible everywhere. Setting this property to 0 disables Fresnel entirely, making the environment map equally visible regardless of view angle. The default is Fresnel only affects the environment map RGB (the intensity of which is controlled by EnvironmentMapAmount). The alpha contribution (controlled by EnvironmentMapSpecular) is not affected by the Fresnel setting. Declaration public float FresnelFactor { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Projection Gets or sets the projection matrix. Declaration public Matrix Projection { get; set; } Property Value Type Description Matrix | Improve this Doc View Source Texture Gets or sets the current texture. Declaration public Texture2D Texture { get; set; } Property Value Type Description Texture2D | Improve this Doc View Source View Gets or sets the view matrix. Declaration public Matrix View { get; set; } Property Value Type Description Matrix | Improve this Doc View Source World Gets or sets the world matrix. Declaration public Matrix World { get; set; } Property Value Type Description Matrix Methods | Improve this Doc View Source Clone() Creates a clone of the current EnvironmentMapEffect instance. Declaration public override Effect Clone() Returns Type Description Effect Overrides Effect.Clone() | Improve this Doc View Source EnableDefaultLighting() Sets up the standard key/fill/back lighting rig. Declaration public void EnableDefaultLighting() | Improve this Doc View Source OnApply() Lazily computes derived parameter values immediately before applying the effect. Declaration protected override void OnApply() Overrides Effect.OnApply() Explicit Interface Implementations | Improve this Doc View Source IEffectLights.LightingEnabled This effect requires lighting, so we explicitly implement IEffectLights.LightingEnabled, and do not allow turning it off. Declaration bool IEffectLights.LightingEnabled { get; set; } Returns Type Description System.Boolean Implements System.IDisposable IEffectMatrices IEffectLights IEffectFog"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.html",
    "title": "Class EffectTechniqueCollection | MonoGame Documentation",
    "keywords": "Class EffectTechniqueCollection Inheritance System.Object EffectTechniqueCollection Implements System.Collections.Generic.IEnumerable < EffectTechnique > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectTechniqueCollection : IEnumerable<EffectTechnique>, IEnumerable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public EffectTechnique this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description EffectTechnique | Improve this Doc View Source Item[String] Declaration public EffectTechnique this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description EffectTechnique Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<EffectTechnique> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < EffectTechnique > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DisplayModeCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DisplayModeCollection.html",
    "title": "Class DisplayModeCollection | MonoGame Documentation",
    "keywords": "Class DisplayModeCollection Inheritance System.Object DisplayModeCollection Implements System.Collections.Generic.IEnumerable < DisplayMode > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class DisplayModeCollection : IEnumerable<DisplayMode>, IEnumerable Properties | Improve this Doc View Source Item[SurfaceFormat] Declaration public IEnumerable<DisplayMode> this[SurfaceFormat format] { get; } Parameters Type Name Description SurfaceFormat format Property Value Type Description System.Collections.Generic.IEnumerable < DisplayMode > Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<DisplayMode> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < DisplayMode > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DisplayMode.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DisplayMode.html",
    "title": "Class DisplayMode | MonoGame Documentation",
    "keywords": "Class DisplayMode Inheritance System.Object DisplayMode Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public class DisplayMode Properties | Improve this Doc View Source AspectRatio Declaration public float AspectRatio { get; } Property Value Type Description System.Single | Improve this Doc View Source Format Declaration public SurfaceFormat Format { get; } Property Value Type Description SurfaceFormat | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TitleSafeArea Declaration public Rectangle TitleSafeArea { get; } Property Value Type Description Rectangle | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(DisplayMode, DisplayMode) Declaration public static bool operator ==(DisplayMode left, DisplayMode right) Parameters Type Name Description DisplayMode left DisplayMode right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(DisplayMode, DisplayMode) Declaration public static bool operator !=(DisplayMode left, DisplayMode right) Parameters Type Name Description DisplayMode left DisplayMode right Returns Type Description System.Boolean"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Blend.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Blend.html",
    "title": "Enum Blend | MonoGame Documentation",
    "keywords": "Enum Blend Defines a blend mode. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum Blend Fields Name Description BlendFactor Each component of the color is multiplied by a constant in the BlendFactor . DestinationAlpha Each component of the color is multiplied by the alpha value of the destination. {Ad, Ad, Ad, Ad}, where Ad is the destination alpha value. DestinationColor Each component color is multiplied by the destination color. {Rd, Gd, Bd, Ad}, where Rd, Gd, Bd, Ad are color destination values. InverseBlendFactor Each component of the color is multiplied by a inversed constant in the BlendFactor . InverseDestinationAlpha Each component of the color is multiplied by the inversed alpha value of the destination. {1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad}, where Ad is the destination alpha value. InverseDestinationColor Each component of the color is multiplied by the inversed destination color. {1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad}, where Rd, Gd, Bd, Ad are color destination values. InverseSourceAlpha Each component of the color is multiplied by the inverse of the alpha value of the source. {1 − As, 1 − As, 1 − As, 1 − As}, where As is the source alpha value. InverseSourceColor Each component of the color is multiplied by the inverse of the source color. {1 − Rs, 1 − Gs, 1 − Bs, 1 − As}, where Rs, Gs, Bs, As are color source values. One Each component of the color is multiplied by {1, 1, 1, 1}. SourceAlpha Each component of the color is multiplied by the alpha value of the source. {As, As, As, As}, where As is the source alpha value. SourceAlphaSaturation Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. {f, f, f, 1}, where f = min(As, 1 − As), where As is the source alpha value. SourceColor Each component of the color is multiplied by the source color. {Rs, Gs, Bs, As}, where Rs, Gs, Bs, As are color source values. Zero Each component of the color is multiplied by {0, 0, 0, 0}."
  },
  "_api/Microsoft.Xna.Framework.GameComponentCollectionEventArgs.html": {
    "href": "_api/Microsoft.Xna.Framework.GameComponentCollectionEventArgs.html",
    "title": "Class GameComponentCollectionEventArgs | MonoGame Documentation",
    "keywords": "Class GameComponentCollectionEventArgs Inheritance System.Object System.EventArgs GameComponentCollectionEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GameComponentCollectionEventArgs : EventArgs Constructors | Improve this Doc View Source GameComponentCollectionEventArgs(IGameComponent) Declaration public GameComponentCollectionEventArgs(IGameComponent gameComponent) Parameters Type Name Description IGameComponent gameComponent Properties | Improve this Doc View Source GameComponent Declaration public IGameComponent GameComponent { get; } Property Value Type Description IGameComponent"
  },
  "_api/Microsoft.Xna.Framework.Design.Vector4TypeConverter.html": {
    "href": "_api/Microsoft.Xna.Framework.Design.Vector4TypeConverter.html",
    "title": "Class Vector4TypeConverter | MonoGame Documentation",
    "keywords": "Class Vector4TypeConverter Inheritance System.Object System.ComponentModel.TypeConverter Vector4TypeConverter Inherited Members System.ComponentModel.TypeConverter.CanConvertFrom(System.Type) System.ComponentModel.TypeConverter.CanConvertTo(System.Type) System.ComponentModel.TypeConverter.ConvertFrom(System.Object) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String) System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary) System.ComponentModel.TypeConverter.GetConvertFromException(System.Object) System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type) System.ComponentModel.TypeConverter.GetCreateInstanceSupported() System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetProperties(System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[]) System.ComponentModel.TypeConverter.GetPropertiesSupported() System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValues() System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesExclusive() System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesSupported() System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.IsValid(System.Object) System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Design Assembly : MonoGame.Framework.dll Syntax public class Vector4TypeConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type sourceType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source CanConvertTo(ITypeDescriptorContext, Type) Declaration public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type destinationType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value System.Type destinationType Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)"
  },
  "_api/Microsoft.Xna.Framework.Curve.html": {
    "href": "_api/Microsoft.Xna.Framework.Curve.html",
    "title": "Class Curve | MonoGame Documentation",
    "keywords": "Class Curve Contains a collection of CurveKey points in 2D space and provides methods for evaluating features of the curve they define. Inheritance System.Object Curve Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public class Curve Constructors | Improve this Doc View Source Curve() Constructs a curve. Declaration public Curve() Properties | Improve this Doc View Source IsConstant Returns true if this curve is constant (has zero or one points); false otherwise. Declaration [DataMember] public bool IsConstant { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Keys The collection of curve keys. Declaration [DataMember] public CurveKeyCollection Keys { get; } Property Value Type Description CurveKeyCollection | Improve this Doc View Source PostLoop Defines how to handle weighting values that are greater than the last control point in the curve. Declaration [DataMember] public CurveLoopType PostLoop { get; set; } Property Value Type Description CurveLoopType | Improve this Doc View Source PreLoop Defines how to handle weighting values that are less than the first control point in the curve. Declaration [DataMember] public CurveLoopType PreLoop { get; set; } Property Value Type Description CurveLoopType Methods | Improve this Doc View Source Clone() Creates a copy of this curve. Declaration public Curve Clone() Returns Type Description Curve A copy of this curve. | Improve this Doc View Source ComputeTangent(Int32, CurveTangent) Computes tangent for the specific key in the collection. Declaration public void ComputeTangent(int keyIndex, CurveTangent tangentType) Parameters Type Name Description System.Int32 keyIndex The index of a key in the collection. CurveTangent tangentType The tangent type for both in and out. | Improve this Doc View Source ComputeTangent(Int32, CurveTangent, CurveTangent) Computes tangent for the specific key in the collection. Declaration public void ComputeTangent(int keyIndex, CurveTangent tangentInType, CurveTangent tangentOutType) Parameters Type Name Description System.Int32 keyIndex The index of key in the collection. CurveTangent tangentInType The tangent in-type. TangentIn for more details. CurveTangent tangentOutType The tangent out-type. TangentOut for more details. | Improve this Doc View Source ComputeTangents(CurveTangent) Computes tangents for all keys in the collection. Declaration public void ComputeTangents(CurveTangent tangentType) Parameters Type Name Description CurveTangent tangentType The tangent type for both in and out. | Improve this Doc View Source ComputeTangents(CurveTangent, CurveTangent) Computes tangents for all keys in the collection. Declaration public void ComputeTangents(CurveTangent tangentInType, CurveTangent tangentOutType) Parameters Type Name Description CurveTangent tangentInType The tangent in-type. TangentIn for more details. CurveTangent tangentOutType The tangent out-type. TangentOut for more details. | Improve this Doc View Source Evaluate(Single) Evaluate the value at a position of this Curve . Declaration public float Evaluate(float position) Parameters Type Name Description System.Single position The position on this Curve . Returns Type Description System.Single Value at the position on this Curve ."
  },
  "_api/Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.html",
    "title": "Class ContentSerializerIgnoreAttribute | MonoGame Documentation",
    "keywords": "Class ContentSerializerIgnoreAttribute Inheritance System.Object System.Attribute ContentSerializerIgnoreAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class ContentSerializerIgnoreAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute"
  },
  "_api/Microsoft.Xna.Framework.BoundingSphere.html": {
    "href": "_api/Microsoft.Xna.Framework.BoundingSphere.html",
    "title": "Struct BoundingSphere | MonoGame Documentation",
    "keywords": "Struct BoundingSphere Describes a sphere in 3D-space for bounding operations. Implements System.IEquatable < BoundingSphere > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct BoundingSphere : IEquatable<BoundingSphere> Constructors | Improve this Doc View Source BoundingSphere(Vector3, Single) Constructs a bounding sphere with the specified center and radius. Declaration public BoundingSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center The sphere center. System.Single radius The sphere radius. Fields | Improve this Doc View Source Center The sphere center. Declaration [DataMember] public Vector3 Center Field Value Type Description Vector3 | Improve this Doc View Source Radius The sphere radius. Declaration [DataMember] public float Radius Field Value Type Description System.Single Methods | Improve this Doc View Source Contains(BoundingBox) Test if a bounding box is fully inside, outside, or just intersecting the sphere. Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The box for testing. Returns Type Description ContainmentType The containment type. | Improve this Doc View Source Contains(ref BoundingBox, out ContainmentType) Test if a bounding box is fully inside, outside, or just intersecting the sphere. Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box The box for testing. ContainmentType result The containment type as an output parameter. | Improve this Doc View Source Contains(BoundingFrustum) Test if a frustum is fully inside, outside, or just intersecting the sphere. Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum for testing. Returns Type Description ContainmentType The containment type. | Improve this Doc View Source Contains(ref BoundingFrustum, out ContainmentType) Test if a frustum is fully inside, outside, or just intersecting the sphere. Declaration public void Contains(ref BoundingFrustum frustum, out ContainmentType result) Parameters Type Name Description BoundingFrustum frustum The frustum for testing. ContainmentType result The containment type as an output parameter. | Improve this Doc View Source Contains(BoundingSphere) Test if a sphere is fully inside, outside, or just intersecting the sphere. Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The other sphere for testing. Returns Type Description ContainmentType The containment type. | Improve this Doc View Source Contains(ref BoundingSphere, out ContainmentType) Test if a sphere is fully inside, outside, or just intersecting the sphere. Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere The other sphere for testing. ContainmentType result The containment type as an output parameter. | Improve this Doc View Source Contains(Vector3) Test if a point is fully inside, outside, or just intersecting the sphere. Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point The vector in 3D-space for testing. Returns Type Description ContainmentType The containment type. | Improve this Doc View Source Contains(ref Vector3, out ContainmentType) Test if a point is fully inside, outside, or just intersecting the sphere. Declaration public void Contains(ref Vector3 point, out ContainmentType result) Parameters Type Name Description Vector3 point The vector in 3D-space for testing. ContainmentType result The containment type as an output parameter. | Improve this Doc View Source CreateFromBoundingBox(BoundingBox) Creates the smallest BoundingSphere that can contain a specified BoundingBox . Declaration public static BoundingSphere CreateFromBoundingBox(BoundingBox box) Parameters Type Name Description BoundingBox box The box to create the sphere from. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateFromBoundingBox(ref BoundingBox, out BoundingSphere) Creates the smallest BoundingSphere that can contain a specified BoundingBox . Declaration public static void CreateFromBoundingBox(ref BoundingBox box, out BoundingSphere result) Parameters Type Name Description BoundingBox box The box to create the sphere from. BoundingSphere result The new BoundingSphere as an output parameter. | Improve this Doc View Source CreateFromFrustum(BoundingFrustum) Creates the smallest BoundingSphere that can contain a specified BoundingFrustum . Declaration public static BoundingSphere CreateFromFrustum(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum The frustum to create the sphere from. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateFromPoints(IEnumerable<Vector3>) Creates the smallest BoundingSphere that can contain a specified list of points in 3D-space. Declaration public static BoundingSphere CreateFromPoints(IEnumerable<Vector3> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < Vector3 > points List of point to create the sphere from. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateMerged(BoundingSphere, BoundingSphere) Creates the smallest BoundingSphere that can contain two spheres. Declaration public static BoundingSphere CreateMerged(BoundingSphere original, BoundingSphere additional) Parameters Type Name Description BoundingSphere original First sphere. BoundingSphere additional Second sphere. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateMerged(ref BoundingSphere, ref BoundingSphere, out BoundingSphere) Creates the smallest BoundingSphere that can contain two spheres. Declaration public static void CreateMerged(ref BoundingSphere original, ref BoundingSphere additional, out BoundingSphere result) Parameters Type Name Description BoundingSphere original First sphere. BoundingSphere additional Second sphere. BoundingSphere result The new BoundingSphere as an output parameter. | Improve this Doc View Source Equals(BoundingSphere) Compares whether current instance is equal to specified BoundingSphere . Declaration public bool Equals(BoundingSphere other) Parameters Type Name Description BoundingSphere other The BoundingSphere to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this BoundingSphere . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this BoundingSphere . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Gets whether or not a specified BoundingBox intersects with this sphere. Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The box for testing. Returns Type Description System.Boolean true if BoundingBox intersects with this sphere; false otherwise. | Improve this Doc View Source Intersects(ref BoundingBox, out Boolean) Gets whether or not a specified BoundingBox intersects with this sphere. Declaration public void Intersects(ref BoundingBox box, out bool result) Parameters Type Name Description BoundingBox box The box for testing. System.Boolean result true if BoundingBox intersects with this sphere; false otherwise. As an output parameter. | Improve this Doc View Source Intersects(BoundingSphere) Gets whether or not the other BoundingSphere intersects with this sphere. Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere The other sphere for testing. Returns Type Description System.Boolean true if other BoundingSphere intersects with this sphere; false otherwise. | Improve this Doc View Source Intersects(ref BoundingSphere, out Boolean) Gets whether or not the other BoundingSphere intersects with this sphere. Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere The other sphere for testing. System.Boolean result true if other BoundingSphere intersects with this sphere; false otherwise. As an output parameter. | Improve this Doc View Source Intersects(Plane) Gets whether or not a specified Plane intersects with this sphere. Declaration public PlaneIntersectionType Intersects(Plane plane) Parameters Type Name Description Plane plane The plane for testing. Returns Type Description PlaneIntersectionType Type of intersection. | Improve this Doc View Source Intersects(ref Plane, out PlaneIntersectionType) Gets whether or not a specified Plane intersects with this sphere. Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane The plane for testing. PlaneIntersectionType result Type of intersection as an output parameter. | Improve this Doc View Source Intersects(Ray) Gets whether or not a specified Ray intersects with this sphere. Declaration public float ? Intersects(Ray ray) Parameters Type Name Description Ray ray The ray for testing. Returns Type Description System.Nullable < System.Single > Distance of ray intersection or null if there is no intersection. | Improve this Doc View Source Intersects(ref Ray, out Nullable<Single>) Gets whether or not a specified Ray intersects with this sphere. Declaration public void Intersects(ref Ray ray, out float ? result) Parameters Type Name Description Ray ray The ray for testing. System.Nullable < System.Single > result Distance of ray intersection or null if there is no intersection as an output parameter. | Improve this Doc View Source ToString() Returns a System.String representation of this BoundingSphere in the format: {Center:[ Center ] Radius:[ Radius ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this BoundingSphere . Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Matrix) Creates a new BoundingSphere that contains a transformation of translation and scale from this sphere by the specified Matrix . Declaration public BoundingSphere Transform(Matrix matrix) Parameters Type Name Description Matrix matrix The transformation Matrix . Returns Type Description BoundingSphere Transformed BoundingSphere . | Improve this Doc View Source Transform(ref Matrix, out BoundingSphere) Creates a new BoundingSphere that contains a transformation of translation and scale from this sphere by the specified Matrix . Declaration public void Transform(ref Matrix matrix, out BoundingSphere result) Parameters Type Name Description Matrix matrix The transformation Matrix . BoundingSphere result Transformed BoundingSphere as an output parameter. Operators | Improve this Doc View Source Equality(BoundingSphere, BoundingSphere) Compares whether two BoundingSphere instances are equal. Declaration public static bool operator ==(BoundingSphere a, BoundingSphere b) Parameters Type Name Description BoundingSphere a BoundingSphere instance on the left of the equal sign. BoundingSphere b BoundingSphere instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(BoundingSphere, BoundingSphere) Compares whether two BoundingSphere instances are not equal. Declaration public static bool operator !=(BoundingSphere a, BoundingSphere b) Parameters Type Name Description BoundingSphere a BoundingSphere instance on the left of the not equal sign. BoundingSphere b BoundingSphere instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Audio.SoundEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.SoundEffect.html",
    "title": "Class SoundEffect | MonoGame Documentation",
    "keywords": "Class SoundEffect Represents a loaded sound resource. Inheritance System.Object SoundEffect Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public sealed class SoundEffect : IDisposable Remarks A SoundEffect represents the buffer used to hold audio data and metadata. SoundEffectInstances are used to play from SoundEffects. Multiple SoundEffectInstance objects can be created and played from the same SoundEffect object. The only limit on the number of loaded SoundEffects is restricted by available memory. When a SoundEffect is disposed, all SoundEffectInstances created from it will become invalid. SoundEffect.Play() can be used for 'fire and forget' sounds. If advanced playback controls like volume or pitch is required, use SoundEffect.CreateInstance(). Constructors | Improve this Doc View Source SoundEffect(Byte[], Int32, AudioChannels) Create a sound effect. Declaration public SoundEffect(byte[] buffer, int sampleRate, AudioChannels channels) Parameters Type Name Description System.Byte [] buffer The buffer with the sound data. System.Int32 sampleRate The sound data sample rate in hertz. AudioChannels channels The number of channels in the sound data. Remarks This only supports uncompressed 16bit PCM wav data. | Improve this Doc View Source SoundEffect(Byte[], Int32, Int32, Int32, AudioChannels, Int32, Int32) Create a sound effect. Declaration public SoundEffect(byte[] buffer, int offset, int count, int sampleRate, AudioChannels channels, int loopStart, int loopLength) Parameters Type Name Description System.Byte [] buffer The buffer with the sound data. System.Int32 offset The offset to the start of the sound data in bytes. System.Int32 count The length of the sound data in bytes. System.Int32 sampleRate The sound data sample rate in hertz. AudioChannels channels The number of channels in the sound data. System.Int32 loopStart The position where the sound should begin looping in samples. System.Int32 loopLength The duration of the sound data loop in samples. Remarks This only supports uncompressed 16bit PCM wav data. Properties | Improve this Doc View Source DistanceScale Gets or sets the scale of distance calculations. Declaration public static float DistanceScale { get; set; } Property Value Type Description System.Single Remarks DistanceScale defaults to 1.0 and must be greater than 0.0. Higher values reduce the rate of falloff between the sound and listener. | Improve this Doc View Source DopplerScale Gets or sets the scale of Doppler calculations applied to sounds. Declaration public static float DopplerScale { get; set; } Property Value Type Description System.Single Remarks DopplerScale defaults to 1.0 and must be greater or equal to 0.0 Affects the relative velocity of emitters and listeners. Higher values more dramatically shift the pitch for the given relative velocity of the emitter and listener. | Improve this Doc View Source Duration Gets the duration of the SoundEffect. Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source IsDisposed Indicates whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MasterVolume Gets or sets the master volume scale applied to all SoundEffectInstances. Declaration public static float MasterVolume { get; set; } Property Value Type Description System.Single Remarks Each SoundEffectInstance has its own Volume property that is independent to SoundEffect.MasterVolume. During playback SoundEffectInstance.Volume is multiplied by SoundEffect.MasterVolume. This property is used to adjust the volume on all current and newly created SoundEffectInstances. The volume of an individual SoundEffectInstance can be adjusted on its own. | Improve this Doc View Source Name Gets or sets the asset name of the SoundEffect. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Speakers Declaration [CLSCompliant(false)] public static Speakers Speakers { get; set; } Property Value Type Description SharpDX.Multimedia.Speakers | Improve this Doc View Source SpeedOfSound Returns the speed of sound used when calculating the Doppler effect.. Declaration public static float SpeedOfSound { get; set; } Property Value Type Description System.Single Remarks Defaults to 343.5. Value is measured in meters per second. Has no effect on distance attenuation. Methods | Improve this Doc View Source CreateInstance() Creates a new SoundEffectInstance for this SoundEffect. Declaration public SoundEffectInstance CreateInstance() Returns Type Description SoundEffectInstance A new SoundEffectInstance for this SoundEffect. Remarks Creating a SoundEffectInstance before calling SoundEffectInstance.Play() allows you to access advanced playback features, such as volume, pitch, and 3D positioning. | Improve this Doc View Source Dispose() Releases the resources held by this SoundEffect . Declaration public void Dispose() | Improve this Doc View Source Finalize() Releases unmanaged resources and performs other cleanup operations before the SoundEffect is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source FromStream(Stream) Creates a new SoundEffect object based on the specified data stream. Declaration public static SoundEffect FromStream(Stream stream) Parameters Type Name Description System.IO.Stream stream A stream containing the wave data. Returns Type Description SoundEffect A new SoundEffect object. Remarks The stream must point to the head of a valid wave file in the RIFF bitstream format. The formats supported are: 8-bit unsigned PCM16-bit signed PCM24-bit signed PCM32-bit IEEE float PCMMS-ADPCM 4-bit compressedIMA/ADPCM (IMA4) 4-bit compressed | Improve this Doc View Source GetSampleDuration(Int32, Int32, AudioChannels) Returns the duration for 16-bit PCM audio. Declaration public static TimeSpan GetSampleDuration(int sizeInBytes, int sampleRate, AudioChannels channels) Parameters Type Name Description System.Int32 sizeInBytes The length of the audio data in bytes. System.Int32 sampleRate Sample rate, in Hertz (Hz). Must be between 8000 Hz and 48000 Hz AudioChannels channels Number of channels in the audio data. Returns Type Description System.TimeSpan The duration of the audio data. | Improve this Doc View Source GetSampleSizeInBytes(TimeSpan, Int32, AudioChannels) Returns the data size in bytes for 16bit PCM audio. Declaration public static int GetSampleSizeInBytes(TimeSpan duration, int sampleRate, AudioChannels channels) Parameters Type Name Description System.TimeSpan duration The total duration of the audio data. System.Int32 sampleRate Sample rate, in Hertz (Hz), of audio data. Must be between 8,000 and 48,000 Hz. AudioChannels channels Number of channels in the audio data. Returns Type Description System.Int32 The size in bytes of a single sample of audio data. | Improve this Doc View Source Play() Gets an internal SoundEffectInstance and plays it. Declaration public bool Play() Returns Type Description System.Boolean True if a SoundEffectInstance was successfully played, false if not. Remarks Play returns false if more SoundEffectInstances are currently playing then the platform allows. To loop a sound or apply 3D effects, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead. SoundEffectInstances used by SoundEffect.Play() are pooled internally. | Improve this Doc View Source Play(Single, Single, Single) Gets an internal SoundEffectInstance and plays it with the specified volume, pitch, and panning. Declaration public bool Play(float volume, float pitch, float pan) Parameters Type Name Description System.Single volume Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume. System.Single pitch Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave). System.Single pan Panning, ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker). Returns Type Description System.Boolean True if a SoundEffectInstance was successfully created and played, false if not. Remarks Play returns false if more SoundEffectInstances are currently playing then the platform allows. To apply looping or simulate 3D audio, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead. SoundEffectInstances used by SoundEffect.Play() are pooled internally. Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Audio.AudioStopOptions.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.AudioStopOptions.html",
    "title": "Enum AudioStopOptions | MonoGame Documentation",
    "keywords": "Enum AudioStopOptions Controls how Cue objects should cease playback when told to stop. Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public enum AudioStopOptions Fields Name Description AsAuthored Stop normally, playing any pending release phases or transitions. Immediate Immediately stops the cue, ignoring any pending release phases or transitions."
  },
  "_api/Microsoft.Xna.Framework.Graphics.IndexBuffer.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IndexBuffer.html",
    "title": "Class IndexBuffer | MonoGame Documentation",
    "keywords": "Class IndexBuffer Inheritance System.Object GraphicsResource IndexBuffer DynamicIndexBuffer Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class IndexBuffer : GraphicsResource, IDisposable Constructors | Improve this Doc View Source IndexBuffer(GraphicsDevice, IndexElementSize, Int32, BufferUsage) Declaration public IndexBuffer(GraphicsDevice graphicsDevice, IndexElementSize indexElementSize, int indexCount, BufferUsage bufferUsage) Parameters Type Name Description GraphicsDevice graphicsDevice IndexElementSize indexElementSize System.Int32 indexCount BufferUsage bufferUsage | Improve this Doc View Source IndexBuffer(GraphicsDevice, IndexElementSize, Int32, BufferUsage, Boolean) Declaration protected IndexBuffer(GraphicsDevice graphicsDevice, IndexElementSize indexElementSize, int indexCount, BufferUsage usage, bool dynamic) Parameters Type Name Description GraphicsDevice graphicsDevice IndexElementSize indexElementSize System.Int32 indexCount BufferUsage usage System.Boolean dynamic | Improve this Doc View Source IndexBuffer(GraphicsDevice, Type, Int32, BufferUsage) Declaration public IndexBuffer(GraphicsDevice graphicsDevice, Type indexType, int indexCount, BufferUsage usage) Parameters Type Name Description GraphicsDevice graphicsDevice System.Type indexType System.Int32 indexCount BufferUsage usage | Improve this Doc View Source IndexBuffer(GraphicsDevice, Type, Int32, BufferUsage, Boolean) Declaration protected IndexBuffer(GraphicsDevice graphicsDevice, Type indexType, int indexCount, BufferUsage usage, bool dynamic) Parameters Type Name Description GraphicsDevice graphicsDevice System.Type indexType System.Int32 indexCount BufferUsage usage System.Boolean dynamic Properties | Improve this Doc View Source BufferUsage Declaration public BufferUsage BufferUsage { get; } Property Value Type Description BufferUsage | Improve this Doc View Source IndexCount Declaration public int IndexCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IndexElementSize Declaration public IndexElementSize IndexElementSize { get; } Property Value Type Description IndexElementSize Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GetData<T>(T[]) Declaration public void GetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T | Improve this Doc View Source GetData<T>(T[], Int32, Int32) Declaration public void GetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source GetData<T>(Int32, T[], Int32, Int32) Declaration public void GetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 offsetInBytes T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source GraphicsDeviceResetting() The GraphicsDevice is resetting, so GPU resources must be recreated. Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() | Improve this Doc View Source SetData<T>(T[]) Declaration public void SetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T | Improve this Doc View Source SetData<T>(T[], Int32, Int32) Declaration public void SetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetData<T>(Int32, T[], Int32, Int32) Declaration public void SetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 offsetInBytes T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetDataInternal<T>(Int32, T[], Int32, Int32, SetDataOptions) Declaration protected void SetDataInternal<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, SetDataOptions options)where T : struct Parameters Type Name Description System.Int32 offsetInBytes T[] data System.Int32 startIndex System.Int32 elementCount SetDataOptions options Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectTechnique.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectTechnique.html",
    "title": "Class EffectTechnique | MonoGame Documentation",
    "keywords": "Class EffectTechnique Inheritance System.Object EffectTechnique Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectTechnique Properties | Improve this Doc View Source Annotations Declaration public EffectAnnotationCollection Annotations { get; } Property Value Type Description EffectAnnotationCollection | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Passes Declaration public EffectPassCollection Passes { get; } Property Value Type Description EffectPassCollection"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectPassCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectPassCollection.html",
    "title": "Class EffectPassCollection | MonoGame Documentation",
    "keywords": "Class EffectPassCollection Inheritance System.Object EffectPassCollection Implements System.Collections.Generic.IEnumerable < EffectPass > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectPassCollection : IEnumerable<EffectPass>, IEnumerable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public EffectPass this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description EffectPass | Improve this Doc View Source Item[String] Declaration public EffectPass this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description EffectPass Methods | Improve this Doc View Source GetEnumerator() Declaration public EffectPassCollection.Enumerator GetEnumerator() Returns Type Description EffectPassCollection.Enumerator Explicit Interface Implementations | Improve this Doc View Source IEnumerable<EffectPass>.GetEnumerator() Declaration IEnumerator<EffectPass> IEnumerable<EffectPass>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < EffectPass > | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DeviceLostException.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DeviceLostException.html",
    "title": "Class DeviceLostException | MonoGame Documentation",
    "keywords": "Class DeviceLostException Inheritance System.Object System.Exception DeviceLostException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public sealed class DeviceLostException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source DeviceLostException() Declaration public DeviceLostException() | Improve this Doc View Source DeviceLostException(String) Declaration public DeviceLostException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source DeviceLostException(String, Exception) Declaration public DeviceLostException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DepthStencilState.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DepthStencilState.html",
    "title": "Class DepthStencilState | MonoGame Documentation",
    "keywords": "Class DepthStencilState Inheritance System.Object GraphicsResource DepthStencilState Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class DepthStencilState : GraphicsResource, IDisposable Constructors | Improve this Doc View Source DepthStencilState() Declaration public DepthStencilState() Fields | Improve this Doc View Source Default Declaration public static readonly DepthStencilState Default Field Value Type Description DepthStencilState | Improve this Doc View Source DepthRead Declaration public static readonly DepthStencilState DepthRead Field Value Type Description DepthStencilState | Improve this Doc View Source None Declaration public static readonly DepthStencilState None Field Value Type Description DepthStencilState Properties | Improve this Doc View Source CounterClockwiseStencilDepthBufferFail Declaration public StencilOperation CounterClockwiseStencilDepthBufferFail { get; set; } Property Value Type Description StencilOperation | Improve this Doc View Source CounterClockwiseStencilFail Declaration public StencilOperation CounterClockwiseStencilFail { get; set; } Property Value Type Description StencilOperation | Improve this Doc View Source CounterClockwiseStencilFunction Declaration public CompareFunction CounterClockwiseStencilFunction { get; set; } Property Value Type Description CompareFunction | Improve this Doc View Source CounterClockwiseStencilPass Declaration public StencilOperation CounterClockwiseStencilPass { get; set; } Property Value Type Description StencilOperation | Improve this Doc View Source DepthBufferEnable Declaration public bool DepthBufferEnable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DepthBufferFunction Declaration public CompareFunction DepthBufferFunction { get; set; } Property Value Type Description CompareFunction | Improve this Doc View Source DepthBufferWriteEnable Declaration public bool DepthBufferWriteEnable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ReferenceStencil Declaration public int ReferenceStencil { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source StencilDepthBufferFail Declaration public StencilOperation StencilDepthBufferFail { get; set; } Property Value Type Description StencilOperation | Improve this Doc View Source StencilEnable Declaration public bool StencilEnable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source StencilFail Declaration public StencilOperation StencilFail { get; set; } Property Value Type Description StencilOperation | Improve this Doc View Source StencilFunction Declaration public CompareFunction StencilFunction { get; set; } Property Value Type Description CompareFunction | Improve this Doc View Source StencilMask Declaration public int StencilMask { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source StencilPass Declaration public StencilOperation StencilPass { get; set; } Property Value Type Description StencilOperation | Improve this Doc View Source StencilWriteMask Declaration public int StencilWriteMask { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TwoSidedStencilMode Declaration public bool TwoSidedStencilMode { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.BasicEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.BasicEffect.html",
    "title": "Class BasicEffect | MonoGame Documentation",
    "keywords": "Class BasicEffect Built-in effect that supports optional texturing, vertex coloring, fog, and lighting. Inheritance System.Object GraphicsResource Effect BasicEffect Implements System.IDisposable IEffectMatrices IEffectLights IEffectFog Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class BasicEffect : Effect, IDisposable, IEffectMatrices, IEffectLights, IEffectFog Constructors | Improve this Doc View Source BasicEffect(BasicEffect) Creates a new BasicEffect by cloning parameter settings from an existing instance. Declaration protected BasicEffect(BasicEffect cloneSource) Parameters Type Name Description BasicEffect cloneSource | Improve this Doc View Source BasicEffect(GraphicsDevice) Creates a new BasicEffect with default parameter settings. Declaration public BasicEffect(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device Properties | Improve this Doc View Source Alpha Gets or sets the material alpha. Declaration public float Alpha { get; set; } Property Value Type Description System.Single | Improve this Doc View Source AmbientLightColor Declaration public Vector3 AmbientLightColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DiffuseColor Gets or sets the material diffuse color (range 0 to 1). Declaration public Vector3 DiffuseColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DirectionalLight0 Declaration public DirectionalLight DirectionalLight0 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight1 Declaration public DirectionalLight DirectionalLight1 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight2 Declaration public DirectionalLight DirectionalLight2 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source EmissiveColor Gets or sets the material emissive color (range 0 to 1). Declaration public Vector3 EmissiveColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogColor Declaration public Vector3 FogColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogEnabled Declaration public bool FogEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FogEnd Declaration public float FogEnd { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FogStart Declaration public float FogStart { get; set; } Property Value Type Description System.Single | Improve this Doc View Source LightingEnabled Declaration public bool LightingEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source PreferPerPixelLighting Gets or sets the per-pixel lighting prefer flag. Declaration public bool PreferPerPixelLighting { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Projection Gets or sets the projection matrix. Declaration public Matrix Projection { get; set; } Property Value Type Description Matrix | Improve this Doc View Source SpecularColor Gets or sets the material specular color (range 0 to 1). Declaration public Vector3 SpecularColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source SpecularPower Gets or sets the material specular power. Declaration public float SpecularPower { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Texture Gets or sets the current texture. Declaration public Texture2D Texture { get; set; } Property Value Type Description Texture2D | Improve this Doc View Source TextureEnabled Gets or sets whether texturing is enabled. Declaration public bool TextureEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source VertexColorEnabled Gets or sets whether vertex color is enabled. Declaration public bool VertexColorEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source View Gets or sets the view matrix. Declaration public Matrix View { get; set; } Property Value Type Description Matrix | Improve this Doc View Source World Gets or sets the world matrix. Declaration public Matrix World { get; set; } Property Value Type Description Matrix Methods | Improve this Doc View Source Clone() Creates a clone of the current BasicEffect instance. Declaration public override Effect Clone() Returns Type Description Effect Overrides Effect.Clone() | Improve this Doc View Source EnableDefaultLighting() Declaration public void EnableDefaultLighting() | Improve this Doc View Source OnApply() Lazily computes derived parameter values immediately before applying the effect. Declaration protected override void OnApply() Overrides Effect.OnApply() Implements System.IDisposable IEffectMatrices IEffectLights IEffectFog"
  },
  "_api/Microsoft.Xna.Framework.Game.html": {
    "href": "_api/Microsoft.Xna.Framework.Game.html",
    "title": "Class Game | MonoGame Documentation",
    "keywords": "Class Game Inheritance System.Object Game Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class Game : IDisposable Constructors | Improve this Doc View Source Game() Declaration public Game() Properties | Improve this Doc View Source Components Declaration public GameComponentCollection Components { get; } Property Value Type Description GameComponentCollection | Improve this Doc View Source Content Declaration public ContentManager Content { get; set; } Property Value Type Description ContentManager | Improve this Doc View Source GraphicsDevice Declaration public GraphicsDevice GraphicsDevice { get; } Property Value Type Description GraphicsDevice | Improve this Doc View Source InactiveSleepTime Declaration public TimeSpan InactiveSleepTime { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source IsActive Declaration public bool IsActive { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFixedTimeStep Declaration public bool IsFixedTimeStep { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMouseVisible Declaration public bool IsMouseVisible { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LaunchParameters Declaration public LaunchParameters LaunchParameters { get; } Property Value Type Description LaunchParameters | Improve this Doc View Source MaxElapsedTime The maximum amount of time we will frameskip over and only perform Update calls with no Draw calls. MonoGame extension. Declaration public TimeSpan MaxElapsedTime { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Services Declaration public GameServiceContainer Services { get; } Property Value Type Description GameServiceContainer | Improve this Doc View Source TargetElapsedTime Declaration public TimeSpan TargetElapsedTime { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Window Declaration [CLSCompliant(false)] public GameWindow Window { get; } Property Value Type Description GameWindow Methods | Improve this Doc View Source BeginDraw() Declaration protected virtual bool BeginDraw() Returns Type Description System.Boolean | Improve this Doc View Source BeginRun() Declaration protected virtual void BeginRun() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Draw(GameTime) Declaration protected virtual void Draw(GameTime gameTime) Parameters Type Name Description GameTime gameTime | Improve this Doc View Source EndDraw() Declaration protected virtual void EndDraw() | Improve this Doc View Source EndRun() Declaration protected virtual void EndRun() | Improve this Doc View Source Exit() Declaration public void Exit() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Initialize() Declaration protected virtual void Initialize() | Improve this Doc View Source LoadContent() Declaration protected virtual void LoadContent() | Improve this Doc View Source OnActivated(Object, EventArgs) Declaration protected virtual void OnActivated(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source OnDeactivated(Object, EventArgs) Declaration protected virtual void OnDeactivated(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source OnExiting(Object, EventArgs) Declaration protected virtual void OnExiting(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source ResetElapsedTime() Declaration public void ResetElapsedTime() | Improve this Doc View Source Run() Declaration public void Run() | Improve this Doc View Source Run(GameRunBehavior) Declaration public void Run(GameRunBehavior runBehavior) Parameters Type Name Description GameRunBehavior runBehavior | Improve this Doc View Source RunOneFrame() Declaration public void RunOneFrame() | Improve this Doc View Source SuppressDraw() Declaration public void SuppressDraw() | Improve this Doc View Source Tick() Declaration public void Tick() | Improve this Doc View Source UnloadContent() Declaration protected virtual void UnloadContent() | Improve this Doc View Source Update(GameTime) Declaration protected virtual void Update(GameTime gameTime) Parameters Type Name Description GameTime gameTime Events | Improve this Doc View Source Activated Declaration public event EventHandler<EventArgs> Activated Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source Deactivated Declaration public event EventHandler<EventArgs> Deactivated Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source Disposed Declaration public event EventHandler<EventArgs> Disposed Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source Exiting Declaration public event EventHandler<EventArgs> Exiting Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.CurveTangent.html": {
    "href": "_api/Microsoft.Xna.Framework.CurveTangent.html",
    "title": "Enum CurveTangent | MonoGame Documentation",
    "keywords": "Enum CurveTangent Defines the different tangent types to be calculated for CurveKey points in a Curve . Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum CurveTangent Fields Name Description Flat The tangent which always has a value equal to zero. Linear The tangent which contains a difference between current tangent value and the tangent value from the previous CurveKey . Smooth The smoouth tangent which contains the inflection between TangentIn and TangentOut by taking into account the values of both neighbors of the CurveKey ."
  },
  "_api/Microsoft.Xna.Framework.Content.ContentTypeReaderManager.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentTypeReaderManager.html",
    "title": "Class ContentTypeReaderManager | MonoGame Documentation",
    "keywords": "Class ContentTypeReaderManager Inheritance System.Object ContentTypeReaderManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public sealed class ContentTypeReaderManager Methods | Improve this Doc View Source AddTypeCreator(String, Func<ContentTypeReader>) Adds the type creator. Declaration public static void AddTypeCreator(string typeString, Func<ContentTypeReader> createFunction) Parameters Type Name Description System.String typeString Type string. System.Func < ContentTypeReader > createFunction Create function. | Improve this Doc View Source ClearTypeCreators() Declaration public static void ClearTypeCreators() | Improve this Doc View Source GetTypeReader(Type) Declaration public ContentTypeReader GetTypeReader(Type targetType) Parameters Type Name Description System.Type targetType Returns Type Description ContentTypeReader | Improve this Doc View Source PrepareType(String) Removes Version, Culture and PublicKeyToken from a type string. Declaration public static string PrepareType(string type) Parameters Type Name Description System.String type A System.String Returns Type Description System.String A System.String Remarks Supports multiple generic types (e.g. Dictionary<TKey,TValue>) and nested generic types (e.g. List<List<int>>)."
  },
  "_api/Microsoft.Xna.Framework.Content.ContentReader.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentReader.html",
    "title": "Class ContentReader | MonoGame Documentation",
    "keywords": "Class ContentReader Inheritance System.Object System.IO.BinaryReader ContentReader Implements System.IDisposable Inherited Members System.IO.BinaryReader.Close() System.IO.BinaryReader.Dispose(System.Boolean) System.IO.BinaryReader.Dispose() System.IO.BinaryReader.PeekChar() System.IO.BinaryReader.Read() System.IO.BinaryReader.ReadBoolean() System.IO.BinaryReader.ReadByte() System.IO.BinaryReader.ReadSByte() System.IO.BinaryReader.ReadChar() System.IO.BinaryReader.ReadInt16() System.IO.BinaryReader.ReadUInt16() System.IO.BinaryReader.ReadInt32() System.IO.BinaryReader.ReadUInt32() System.IO.BinaryReader.ReadInt64() System.IO.BinaryReader.ReadUInt64() System.IO.BinaryReader.ReadSingle() System.IO.BinaryReader.ReadDouble() System.IO.BinaryReader.ReadDecimal() System.IO.BinaryReader.ReadString() System.IO.BinaryReader.Read(System.Char[], System.Int32, System.Int32) System.IO.BinaryReader.ReadChars(System.Int32) System.IO.BinaryReader.Read(System.Byte[], System.Int32, System.Int32) System.IO.BinaryReader.ReadBytes(System.Int32) System.IO.BinaryReader.FillBuffer(System.Int32) System.IO.BinaryReader.Read7BitEncodedInt() System.IO.BinaryReader.BaseStream System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public sealed class ContentReader : BinaryReader, IDisposable Properties | Improve this Doc View Source AssetName Declaration public string AssetName { get; } Property Value Type Description System.String | Improve this Doc View Source ContentManager Declaration public ContentManager ContentManager { get; } Property Value Type Description ContentManager Methods | Improve this Doc View Source ReadColor() Declaration public Color ReadColor() Returns Type Description Color | Improve this Doc View Source ReadExternalReference<T>() Declaration public T ReadExternalReference<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadMatrix() Declaration public Matrix ReadMatrix() Returns Type Description Matrix | Improve this Doc View Source ReadObject<T>() Declaration public T ReadObject<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadObject<T>(T) Declaration public T ReadObject<T>(T existingInstance) Parameters Type Name Description T existingInstance Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadObject<T>(ContentTypeReader) Declaration public T ReadObject<T>(ContentTypeReader typeReader) Parameters Type Name Description ContentTypeReader typeReader Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadObject<T>(ContentTypeReader, T) Declaration public T ReadObject<T>(ContentTypeReader typeReader, T existingInstance) Parameters Type Name Description ContentTypeReader typeReader T existingInstance Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadQuaternion() Declaration public Quaternion ReadQuaternion() Returns Type Description Quaternion | Improve this Doc View Source ReadRawObject<T>() Declaration public T ReadRawObject<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadRawObject<T>(T) Declaration public T ReadRawObject<T>(T existingInstance) Parameters Type Name Description T existingInstance Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadRawObject<T>(ContentTypeReader) Declaration public T ReadRawObject<T>(ContentTypeReader typeReader) Parameters Type Name Description ContentTypeReader typeReader Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadRawObject<T>(ContentTypeReader, T) Declaration public T ReadRawObject<T>(ContentTypeReader typeReader, T existingInstance) Parameters Type Name Description ContentTypeReader typeReader T existingInstance Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadSharedResource<T>(Action<T>) Declaration public void ReadSharedResource<T>(Action<T> fixup) Parameters Type Name Description System.Action <T> fixup Type Parameters Name Description T | Improve this Doc View Source ReadVector2() Declaration public Vector2 ReadVector2() Returns Type Description Vector2 | Improve this Doc View Source ReadVector3() Declaration public Vector3 ReadVector3() Returns Type Description Vector3 | Improve this Doc View Source ReadVector4() Declaration public Vector4 ReadVector4() Returns Type Description Vector4 Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Audio.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.html",
    "title": "Namespace Microsoft.Xna.Framework.Audio | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Audio Classes AudioEmitter Represents a 3D audio emitter. Used to simulate 3D audio effects. AudioEngine Class used to create and manipulate code audio objects. AudioListener Represents a 3D audio listener. Used when simulating 3D Audio. Cue Manages the playback of a sound or set of sounds. DynamicSoundEffectInstance A SoundEffectInstance for which the audio buffer is provided by the game at run time. InstancePlayLimitException The exception thrown when the system attempts to play more SoundEffectInstances than allotted. Microphone Provides microphones capture features. NoAudioHardwareException The exception thrown when no audio hardware is present, or driver issues are detected. NoMicrophoneConnectedException The exception thrown when no audio hardware is present, or driver issues are detected. SoundBank Represents a collection of Cues. SoundEffect Represents a loaded sound resource. SoundEffectInstance Represents a single instance of a playing, paused, or stopped sound. WaveBank Represents a collection of wave files. Structs AudioCategory Provides functionality for manipulating multiple sounds at a time. Enums AudioChannels Represents how many channels are used in the audio data. AudioStopOptions Controls how Cue objects should cease playback when told to stop. MicrophoneState Microphone state. SoundState Described the playback state of a SoundEffectInstance."
  },
  "_api/Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException.html",
    "title": "Class NoMicrophoneConnectedException | MonoGame Documentation",
    "keywords": "Class NoMicrophoneConnectedException The exception thrown when no audio hardware is present, or driver issues are detected. Inheritance System.Object System.Exception NoMicrophoneConnectedException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax [DataContract] public sealed class NoMicrophoneConnectedException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source NoMicrophoneConnectedException(String) Declaration public NoMicrophoneConnectedException(string msg) Parameters Type Name Description System.String msg A message describing the error. | Improve this Doc View Source NoMicrophoneConnectedException(String, Exception) Declaration public NoMicrophoneConnectedException(string msg, Exception innerException) Parameters Type Name Description System.String msg A message describing the error. System.Exception innerException The exception that is the underlying cause of the current exception. If not null, the current exception is raised in a try/catch block that handled the innerException. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.html",
    "title": "Class DynamicSoundEffectInstance | MonoGame Documentation",
    "keywords": "Class DynamicSoundEffectInstance A SoundEffectInstance for which the audio buffer is provided by the game at run time. Inheritance System.Object SoundEffectInstance DynamicSoundEffectInstance Implements System.IDisposable Inherited Members SoundEffectInstance.Pan SoundEffectInstance.Pitch SoundEffectInstance.Volume SoundEffectInstance.IsDisposed SoundEffectInstance.Apply3D(AudioListener, AudioEmitter) SoundEffectInstance.Apply3D(AudioListener[], AudioEmitter) SoundEffectInstance.Dispose() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public sealed class DynamicSoundEffectInstance : SoundEffectInstance, IDisposable Constructors | Improve this Doc View Source DynamicSoundEffectInstance(Int32, AudioChannels) Declaration public DynamicSoundEffectInstance(int sampleRate, AudioChannels channels) Parameters Type Name Description System.Int32 sampleRate Sample rate, in Hertz (Hz). AudioChannels channels Number of channels (mono or stereo). Properties | Improve this Doc View Source IsLooped This value has no effect on DynamicSoundEffectInstance. It may not be set. Declaration public override bool IsLooped { get; set; } Property Value Type Description System.Boolean Overrides SoundEffectInstance.IsLooped | Improve this Doc View Source PendingBufferCount Returns the number of audio buffers queued for playback. Declaration public int PendingBufferCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source State Declaration public override SoundState State { get; } Property Value Type Description SoundState Overrides SoundEffectInstance.State Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides SoundEffectInstance.Dispose(Boolean) | Improve this Doc View Source GetSampleDuration(Int32) Returns the duration of an audio buffer of the specified size, based on the settings of this instance. Declaration public TimeSpan GetSampleDuration(int sizeInBytes) Parameters Type Name Description System.Int32 sizeInBytes Size of the buffer, in bytes. Returns Type Description System.TimeSpan The playback length of the buffer. | Improve this Doc View Source GetSampleSizeInBytes(TimeSpan) Returns the size, in bytes, of a buffer of the specified duration, based on the settings of this instance. Declaration public int GetSampleSizeInBytes(TimeSpan duration) Parameters Type Name Description System.TimeSpan duration The playback length of the buffer. Returns Type Description System.Int32 The data size of the buffer, in bytes. | Improve this Doc View Source Pause() Pauses playback of the DynamicSoundEffectInstance. Declaration public override void Pause() Overrides SoundEffectInstance.Pause() | Improve this Doc View Source Play() Plays or resumes the DynamicSoundEffectInstance. Declaration public override void Play() Overrides SoundEffectInstance.Play() | Improve this Doc View Source Resume() Resumes playback of the DynamicSoundEffectInstance. Declaration public override void Resume() Overrides SoundEffectInstance.Resume() | Improve this Doc View Source Stop() Immediately stops playing the DynamicSoundEffectInstance. Declaration public override void Stop() Overrides SoundEffectInstance.Stop() Remarks Calling this also releases all queued buffers. | Improve this Doc View Source Stop(Boolean) Stops playing the DynamicSoundEffectInstance. If the immediate parameter is false, this call has no effect. Declaration public override void Stop(bool immediate) Parameters Type Name Description System.Boolean immediate When set to false, this call has no effect. Overrides SoundEffectInstance.Stop(Boolean) Remarks Calling this also releases all queued buffers. | Improve this Doc View Source SubmitBuffer(Byte[]) Queues an audio buffer for playback. Declaration public void SubmitBuffer(byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer containing PCM audio data. Remarks The buffer length must conform to alignment requirements for the audio format. | Improve this Doc View Source SubmitBuffer(Byte[], Int32, Int32) Queues an audio buffer for playback. Declaration public void SubmitBuffer(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer containing PCM audio data. System.Int32 offset The starting position of audio data. System.Int32 count The amount of bytes to use. Remarks The buffer length must conform to alignment requirements for the audio format. Events | Improve this Doc View Source BufferNeeded The event that occurs when the number of queued audio buffers is less than or equal to 2. Declaration public event EventHandler<EventArgs> BufferNeeded Event Type Type Description System.EventHandler < System.EventArgs > Remarks This event may occur when Play() is called or during playback when a buffer is completed. Implements System.IDisposable"
  },
  "_api/MonoGame.Utilities.Png.PngReader.html": {
    "href": "_api/MonoGame.Utilities.Png.PngReader.html",
    "title": "Class PngReader | MonoGame Documentation",
    "keywords": "Class PngReader Inheritance System.Object PngReader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MonoGame.Utilities.Png Assembly : MonoGame.Framework.dll Syntax public class PngReader Constructors | Improve this Doc View Source PngReader() Declaration public PngReader() Methods | Improve this Doc View Source IsPngImage(Stream) Declaration public static bool IsPngImage(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description System.Boolean | Improve this Doc View Source Read(Stream, GraphicsDevice) Declaration public Texture2D Read(Stream inputStream, GraphicsDevice graphicsDevice) Parameters Type Name Description System.IO.Stream inputStream GraphicsDevice graphicsDevice Returns Type Description Texture2D"
  },
  "_api/MonoGame.Utilities.PlatformParameters.html": {
    "href": "_api/MonoGame.Utilities.PlatformParameters.html",
    "title": "Class PlatformParameters | MonoGame Documentation",
    "keywords": "Class PlatformParameters Inheritance System.Object PlatformParameters Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MonoGame.Utilities Assembly : MonoGame.Framework.dll Syntax public static class PlatformParameters Fields | Improve this Doc View Source DetectWindowsArchitecture If true, MonoGame will detect the CPU architecture (x86 or x86-64) and add the \"./x86\" or \"./x64\" folder to the native DLL resolution paths. This allows MonoGame to work with Any CPU by loading the correct dependencies at runtime. If false, MonoGame will look for native DLLs in the executing folder, which typically is the .exe home. This parameter only works on Windows and doesn't affect other platforms. Declaration public static bool DetectWindowsArchitecture Field Value Type Description System.Boolean"
  },
  "_api/MonoGame.Utilities.FlushType.html": {
    "href": "_api/MonoGame.Utilities.FlushType.html",
    "title": "Enum FlushType | MonoGame Documentation",
    "keywords": "Enum FlushType Describes how to flush the current deflate operation. Namespace : MonoGame.Utilities Assembly : MonoGame.Framework.dll Syntax public enum FlushType Remarks The different FlushType values are useful when using a Deflate in a streaming application. Fields Name Description Finish Signals the end of the compression/decompression stream. Full Use this during compression to specify that all output should be flushed, as with FlushType.Sync , but also, the compression state should be reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using FlushType.Full too often can significantly degrade the compression. None No flush at all. Partial Closes the current block, but doesn't flush it to the output. Used internally only in hypothetical scenarios. This was supposed to be removed by Zlib, but it is still in use in some edge cases. Sync Use this during compression to specify that all pending output should be flushed to the output buffer and the output should be aligned on a byte boundary. You might use this in a streaming communication scenario, so that the decompressor can get all input data available so far. When using this with a ZlibCodec, AvailableBytesIn will be zero after the call if enough output space has been provided before the call. Flushing will degrade compression and so it should be used only when necessary."
  },
  "_api/MonoGame.Utilities.CompressionMode.html": {
    "href": "_api/MonoGame.Utilities.CompressionMode.html",
    "title": "Enum CompressionMode | MonoGame Documentation",
    "keywords": "Enum CompressionMode An enum to specify the direction of transcoding - whether to compress or decompress. Namespace : MonoGame.Utilities Assembly : MonoGame.Framework.dll Syntax public enum CompressionMode Fields Name Description Compress Used to specify that the stream should compress the data. Decompress Used to specify that the stream should decompress the data."
  },
  "_api/Microsoft.Xna.Framework.Media.Artist.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.Artist.html",
    "title": "Class Artist | MonoGame Documentation",
    "keywords": "Class Artist Inheritance System.Object Artist Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class Artist : IDisposable Constructors | Improve this Doc View Source Artist(String) Declaration public Artist(string artist) Parameters Type Name Description System.String artist Properties | Improve this Doc View Source Albums Gets the AlbumCollection for the Artist. Declaration public AlbumCollection Albums { get; } Property Value Type Description AlbumCollection | Improve this Doc View Source IsDisposed Gets a value indicating whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the Artist. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Songs Gets the SongCollection for the Artist. Declaration public SongCollection Songs { get; } Property Value Type Description SongCollection Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source GetHashCode() Gets the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Returns a String representation of the Artist. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.AlbumCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.AlbumCollection.html",
    "title": "Class AlbumCollection | MonoGame Documentation",
    "keywords": "Class AlbumCollection Inheritance System.Object AlbumCollection Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class AlbumCollection : IDisposable Constructors | Improve this Doc View Source AlbumCollection(List<Album>) Declaration public AlbumCollection(List<Album> albums) Parameters Type Name Description System.Collections.Generic.List < Album > albums Properties | Improve this Doc View Source Count Gets the number of Album objects in the AlbumCollection. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsDisposed Gets a value indicating whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets the Album at the specified index in the AlbumCollection. Declaration public Album this[int index] { get; } Parameters Type Name Description System.Int32 index Index of the Album to get. Property Value Type Description Album Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.Album.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.Album.html",
    "title": "Class Album | MonoGame Documentation",
    "keywords": "Class Album Inheritance System.Object Album Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class Album : IDisposable Properties | Improve this Doc View Source Artist Declaration public Artist Artist { get; } Property Value Type Description Artist | Improve this Doc View Source Duration Gets the duration of the Album. Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Genre Gets the Genre of the Album. Declaration public Genre Genre { get; } Property Value Type Description Genre | Improve this Doc View Source HasArt Gets a value indicating whether the Album has associated album art. Declaration public bool HasArt { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDisposed Gets a value indicating whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the Album. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Songs Gets a SongCollection that contains the songs on the album. Declaration public SongCollection Songs { get; } Property Value Type Description SongCollection Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source GetAlbumArt() Returns the stream that contains the album art image data. Declaration public Stream GetAlbumArt() Returns Type Description System.IO.Stream | Improve this Doc View Source GetHashCode() Gets the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetThumbnail() Returns the stream that contains the album thumbnail image data. Declaration public Stream GetThumbnail() Returns Type Description System.IO.Stream | Improve this Doc View Source ToString() Returns a String representation of this Album. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Matrix.html": {
    "href": "_api/Microsoft.Xna.Framework.Matrix.html",
    "title": "Struct Matrix | MonoGame Documentation",
    "keywords": "Struct Matrix Represents the right-handed 4x4 floating point matrix, which can store translation, scale and rotation information. Implements System.IEquatable < Matrix > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Matrix : IEquatable<Matrix> Constructors | Improve this Doc View Source Matrix(Vector4, Vector4, Vector4, Vector4) Constructs a matrix. Declaration public Matrix(Vector4 row1, Vector4 row2, Vector4 row3, Vector4 row4) Parameters Type Name Description Vector4 row1 A first row of the created matrix. Vector4 row2 A second row of the created matrix. Vector4 row3 A third row of the created matrix. Vector4 row4 A fourth row of the created matrix. | Improve this Doc View Source Matrix(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Constructs a matrix. Declaration public Matrix(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) Parameters Type Name Description System.Single m11 A first row and first column value. System.Single m12 A first row and second column value. System.Single m13 A first row and third column value. System.Single m14 A first row and fourth column value. System.Single m21 A second row and first column value. System.Single m22 A second row and second column value. System.Single m23 A second row and third column value. System.Single m24 A second row and fourth column value. System.Single m31 A third row and first column value. System.Single m32 A third row and second column value. System.Single m33 A third row and third column value. System.Single m34 A third row and fourth column value. System.Single m41 A fourth row and first column value. System.Single m42 A fourth row and second column value. System.Single m43 A fourth row and third column value. System.Single m44 A fourth row and fourth column value. Fields | Improve this Doc View Source M11 A first row and first column value. Declaration [DataMember] public float M11 Field Value Type Description System.Single | Improve this Doc View Source M12 A first row and second column value. Declaration [DataMember] public float M12 Field Value Type Description System.Single | Improve this Doc View Source M13 A first row and third column value. Declaration [DataMember] public float M13 Field Value Type Description System.Single | Improve this Doc View Source M14 A first row and fourth column value. Declaration [DataMember] public float M14 Field Value Type Description System.Single | Improve this Doc View Source M21 A second row and first column value. Declaration [DataMember] public float M21 Field Value Type Description System.Single | Improve this Doc View Source M22 A second row and second column value. Declaration [DataMember] public float M22 Field Value Type Description System.Single | Improve this Doc View Source M23 A second row and third column value. Declaration [DataMember] public float M23 Field Value Type Description System.Single | Improve this Doc View Source M24 A second row and fourth column value. Declaration [DataMember] public float M24 Field Value Type Description System.Single | Improve this Doc View Source M31 A third row and first column value. Declaration [DataMember] public float M31 Field Value Type Description System.Single | Improve this Doc View Source M32 A third row and second column value. Declaration [DataMember] public float M32 Field Value Type Description System.Single | Improve this Doc View Source M33 A third row and third column value. Declaration [DataMember] public float M33 Field Value Type Description System.Single | Improve this Doc View Source M34 A third row and fourth column value. Declaration [DataMember] public float M34 Field Value Type Description System.Single | Improve this Doc View Source M41 A fourth row and first column value. Declaration [DataMember] public float M41 Field Value Type Description System.Single | Improve this Doc View Source M42 A fourth row and second column value. Declaration [DataMember] public float M42 Field Value Type Description System.Single | Improve this Doc View Source M43 A fourth row and third column value. Declaration [DataMember] public float M43 Field Value Type Description System.Single | Improve this Doc View Source M44 A fourth row and fourth column value. Declaration [DataMember] public float M44 Field Value Type Description System.Single Properties | Improve this Doc View Source Backward The backward vector formed from the third row M31, M32, M33 elements. Declaration public Vector3 Backward { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Down The down vector formed from the second row -M21, -M22, -M23 elements. Declaration public Vector3 Down { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Forward The forward vector formed from the third row -M31, -M32, -M33 elements. Declaration public Vector3 Forward { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Identity Returns the identity matrix. Declaration public static Matrix Identity { get; } Property Value Type Description Matrix | Improve this Doc View Source Item[Int32] Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Single | Improve this Doc View Source Item[Int32, Int32] Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description System.Int32 row System.Int32 column Property Value Type Description System.Single | Improve this Doc View Source Left The left vector formed from the first row -M11, -M12, -M13 elements. Declaration public Vector3 Left { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Right The right vector formed from the first row M11, M12, M13 elements. Declaration public Vector3 Right { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Translation Position stored in this matrix. Declaration public Vector3 Translation { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Up The upper vector formed from the second row M21, M22, M23 elements. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Add(Matrix, Matrix) Creates a new Matrix which contains sum of two matrixes. Declaration public static Matrix Add(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 The first matrix to add. Matrix matrix2 The second matrix to add. Returns Type Description Matrix The result of the matrix addition. | Improve this Doc View Source Add(ref Matrix, ref Matrix, out Matrix) Creates a new Matrix which contains sum of two matrixes. Declaration public static void Add(ref Matrix matrix1, ref Matrix matrix2, out Matrix result) Parameters Type Name Description Matrix matrix1 The first matrix to add. Matrix matrix2 The second matrix to add. Matrix result The result of the matrix addition as an output parameter. | Improve this Doc View Source CreateBillboard(Vector3, Vector3, Vector3, Nullable<Vector3>) Creates a new Matrix for spherical billboarding that rotates around specified object position. Declaration public static Matrix CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3? cameraForwardVector) Parameters Type Name Description Vector3 objectPosition Position of billboard object. It will rotate around that vector. Vector3 cameraPosition The camera position. Vector3 cameraUpVector The camera up vector. System.Nullable < Vector3 > cameraForwardVector Optional camera forward vector. Returns Type Description Matrix The Matrix for spherical billboarding. | Improve this Doc View Source CreateBillboard(ref Vector3, ref Vector3, ref Vector3, Nullable<Vector3>, out Matrix) Creates a new Matrix for spherical billboarding that rotates around specified object position. Declaration public static void CreateBillboard(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 cameraUpVector, Vector3? cameraForwardVector, out Matrix result) Parameters Type Name Description Vector3 objectPosition Position of billboard object. It will rotate around that vector. Vector3 cameraPosition The camera position. Vector3 cameraUpVector The camera up vector. System.Nullable < Vector3 > cameraForwardVector Optional camera forward vector. Matrix result The Matrix for spherical billboarding as an output parameter. | Improve this Doc View Source CreateConstrainedBillboard(Vector3, Vector3, Vector3, Nullable<Vector3>, Nullable<Vector3>) Creates a new Matrix for cylindrical billboarding that rotates around specified axis. Declaration public static Matrix CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3? cameraForwardVector, Vector3? objectForwardVector) Parameters Type Name Description Vector3 objectPosition Object position the billboard will rotate around. Vector3 cameraPosition Camera position. Vector3 rotateAxis Axis of billboard for rotation. System.Nullable < Vector3 > cameraForwardVector Optional camera forward vector. System.Nullable < Vector3 > objectForwardVector Optional object forward vector. Returns Type Description Matrix The Matrix for cylindrical billboarding. | Improve this Doc View Source CreateConstrainedBillboard(ref Vector3, ref Vector3, ref Vector3, Nullable<Vector3>, Nullable<Vector3>, out Matrix) Creates a new Matrix for cylindrical billboarding that rotates around specified axis. Declaration public static void CreateConstrainedBillboard(ref Vector3 objectPosition, ref Vector3 cameraPosition, ref Vector3 rotateAxis, Vector3? cameraForwardVector, Vector3? objectForwardVector, out Matrix result) Parameters Type Name Description Vector3 objectPosition Object position the billboard will rotate around. Vector3 cameraPosition Camera position. Vector3 rotateAxis Axis of billboard for rotation. System.Nullable < Vector3 > cameraForwardVector Optional camera forward vector. System.Nullable < Vector3 > objectForwardVector Optional object forward vector. Matrix result The Matrix for cylindrical billboarding as an output parameter. | Improve this Doc View Source CreateFromAxisAngle(Vector3, Single) Creates a new Matrix which contains the rotation moment around specified axis. Declaration public static Matrix CreateFromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis of rotation. System.Single angle The angle of rotation in radians. Returns Type Description Matrix The rotation Matrix . | Improve this Doc View Source CreateFromAxisAngle(ref Vector3, Single, out Matrix) Creates a new Matrix which contains the rotation moment around specified axis. Declaration public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out Matrix result) Parameters Type Name Description Vector3 axis The axis of rotation. System.Single angle The angle of rotation in radians. Matrix result The rotation Matrix as an output parameter. | Improve this Doc View Source CreateFromQuaternion(Quaternion) Creates a new rotation Matrix from a Quaternion . Declaration public static Matrix CreateFromQuaternion(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Quaternion of rotation moment. Returns Type Description Matrix The rotation Matrix . | Improve this Doc View Source CreateFromQuaternion(ref Quaternion, out Matrix) Creates a new rotation Matrix from a Quaternion . Declaration public static void CreateFromQuaternion(ref Quaternion quaternion, out Matrix result) Parameters Type Name Description Quaternion quaternion Quaternion of rotation moment. Matrix result The rotation Matrix as an output parameter. | Improve this Doc View Source CreateFromYawPitchRoll(Single, Single, Single) Creates a new rotation Matrix from the specified yaw, pitch and roll values. Declaration public static Matrix CreateFromYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description System.Single yaw The yaw rotation value in radians. System.Single pitch The pitch rotation value in radians. System.Single roll The roll rotation value in radians. Returns Type Description Matrix The rotation Matrix . Remarks For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles . | Improve this Doc View Source CreateFromYawPitchRoll(Single, Single, Single, out Matrix) Creates a new rotation Matrix from the specified yaw, pitch and roll values. Declaration public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out Matrix result) Parameters Type Name Description System.Single yaw The yaw rotation value in radians. System.Single pitch The pitch rotation value in radians. System.Single roll The roll rotation value in radians. Matrix result The rotation Matrix as an output parameter. Remarks For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles . | Improve this Doc View Source CreateLookAt(Vector3, Vector3, Vector3) Creates a new viewing Matrix . Declaration public static Matrix CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector) Parameters Type Name Description Vector3 cameraPosition Position of the camera. Vector3 cameraTarget Lookup vector of the camera. Vector3 cameraUpVector The direction of the upper edge of the camera. Returns Type Description Matrix The viewing Matrix . | Improve this Doc View Source CreateLookAt(ref Vector3, ref Vector3, ref Vector3, out Matrix) Creates a new viewing Matrix . Declaration public static void CreateLookAt(ref Vector3 cameraPosition, ref Vector3 cameraTarget, ref Vector3 cameraUpVector, out Matrix result) Parameters Type Name Description Vector3 cameraPosition Position of the camera. Vector3 cameraTarget Lookup vector of the camera. Vector3 cameraUpVector The direction of the upper edge of the camera. Matrix result The viewing Matrix as an output parameter. | Improve this Doc View Source CreateOrthographic(Single, Single, Single, Single) Creates a new projection Matrix for orthographic view. Declaration public static Matrix CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single zNearPlane Depth of the near plane. System.Single zFarPlane Depth of the far plane. Returns Type Description Matrix The new projection Matrix for orthographic view. | Improve this Doc View Source CreateOrthographic(Single, Single, Single, Single, out Matrix) Creates a new projection Matrix for orthographic view. Declaration public static void CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane, out Matrix result) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single zNearPlane Depth of the near plane. System.Single zFarPlane Depth of the far plane. Matrix result The new projection Matrix for orthographic view as an output parameter. | Improve this Doc View Source CreateOrthographicOffCenter(Rectangle, Single, Single) Creates a new projection Matrix for customized orthographic view. Declaration public static Matrix CreateOrthographicOffCenter(Rectangle viewingVolume, float zNearPlane, float zFarPlane) Parameters Type Name Description Rectangle viewingVolume The viewing volume. System.Single zNearPlane Depth of the near plane. System.Single zFarPlane Depth of the far plane. Returns Type Description Matrix The new projection Matrix for customized orthographic view. | Improve this Doc View Source CreateOrthographicOffCenter(Single, Single, Single, Single, Single, Single) Creates a new projection Matrix for customized orthographic view. Declaration public static Matrix CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane) Parameters Type Name Description System.Single left Lower x-value at the near plane. System.Single right Upper x-value at the near plane. System.Single bottom Lower y-coordinate at the near plane. System.Single top Upper y-value at the near plane. System.Single zNearPlane Depth of the near plane. System.Single zFarPlane Depth of the far plane. Returns Type Description Matrix The new projection Matrix for customized orthographic view. | Improve this Doc View Source CreateOrthographicOffCenter(Single, Single, Single, Single, Single, Single, out Matrix) Creates a new projection Matrix for customized orthographic view. Declaration public static void CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane, out Matrix result) Parameters Type Name Description System.Single left Lower x-value at the near plane. System.Single right Upper x-value at the near plane. System.Single bottom Lower y-coordinate at the near plane. System.Single top Upper y-value at the near plane. System.Single zNearPlane Depth of the near plane. System.Single zFarPlane Depth of the far plane. Matrix result The new projection Matrix for customized orthographic view as an output parameter. | Improve this Doc View Source CreatePerspective(Single, Single, Single, Single) Creates a new projection Matrix for perspective view. Declaration public static Matrix CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single nearPlaneDistance Distance to the near plane. System.Single farPlaneDistance Distance to the far plane. Returns Type Description Matrix The new projection Matrix for perspective view. | Improve this Doc View Source CreatePerspective(Single, Single, Single, Single, out Matrix) Creates a new projection Matrix for perspective view. Declaration public static void CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance, out Matrix result) Parameters Type Name Description System.Single width Width of the viewing volume. System.Single height Height of the viewing volume. System.Single nearPlaneDistance Distance to the near plane. System.Single farPlaneDistance Distance to the far plane. Matrix result The new projection Matrix for perspective view as an output parameter. | Improve this Doc View Source CreatePerspectiveFieldOfView(Single, Single, Single, Single) Creates a new projection Matrix for perspective view with field of view. Declaration public static Matrix CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance) Parameters Type Name Description System.Single fieldOfView Field of view in the y direction in radians. System.Single aspectRatio Width divided by height of the viewing volume. System.Single nearPlaneDistance Distance to the near plane. System.Single farPlaneDistance Distance to the far plane. Returns Type Description Matrix The new projection Matrix for perspective view with FOV. | Improve this Doc View Source CreatePerspectiveFieldOfView(Single, Single, Single, Single, out Matrix) Creates a new projection Matrix for perspective view with field of view. Declaration public static void CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance, out Matrix result) Parameters Type Name Description System.Single fieldOfView Field of view in the y direction in radians. System.Single aspectRatio Width divided by height of the viewing volume. System.Single nearPlaneDistance Distance of the near plane. System.Single farPlaneDistance Distance of the far plane. Matrix result The new projection Matrix for perspective view with FOV as an output parameter. | Improve this Doc View Source CreatePerspectiveOffCenter(Rectangle, Single, Single) Creates a new projection Matrix for customized perspective view. Declaration public static Matrix CreatePerspectiveOffCenter(Rectangle viewingVolume, float nearPlaneDistance, float farPlaneDistance) Parameters Type Name Description Rectangle viewingVolume The viewing volume. System.Single nearPlaneDistance Distance to the near plane. System.Single farPlaneDistance Distance to the far plane. Returns Type Description Matrix The new Matrix for customized perspective view. | Improve this Doc View Source CreatePerspectiveOffCenter(Single, Single, Single, Single, Single, Single) Creates a new projection Matrix for customized perspective view. Declaration public static Matrix CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance) Parameters Type Name Description System.Single left Lower x-value at the near plane. System.Single right Upper x-value at the near plane. System.Single bottom Lower y-coordinate at the near plane. System.Single top Upper y-value at the near plane. System.Single nearPlaneDistance Distance to the near plane. System.Single farPlaneDistance Distance to the far plane. Returns Type Description Matrix The new Matrix for customized perspective view. | Improve this Doc View Source CreatePerspectiveOffCenter(Single, Single, Single, Single, Single, Single, out Matrix) Creates a new projection Matrix for customized perspective view. Declaration public static void CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance, out Matrix result) Parameters Type Name Description System.Single left Lower x-value at the near plane. System.Single right Upper x-value at the near plane. System.Single bottom Lower y-coordinate at the near plane. System.Single top Upper y-value at the near plane. System.Single nearPlaneDistance Distance to the near plane. System.Single farPlaneDistance Distance to the far plane. Matrix result The new Matrix for customized perspective view as an output parameter. | Improve this Doc View Source CreateReflection(Plane) Creates a new reflection Matrix . Declaration public static Matrix CreateReflection(Plane value) Parameters Type Name Description Plane value The plane that used for reflection calculation. Returns Type Description Matrix The reflection Matrix . | Improve this Doc View Source CreateReflection(ref Plane, out Matrix) Creates a new reflection Matrix . Declaration public static void CreateReflection(ref Plane value, out Matrix result) Parameters Type Name Description Plane value The plane that used for reflection calculation. Matrix result The reflection Matrix as an output parameter. | Improve this Doc View Source CreateRotationX(Single) Creates a new rotation Matrix around X axis. Declaration public static Matrix CreateRotationX(float radians) Parameters Type Name Description System.Single radians Angle in radians. Returns Type Description Matrix The rotation Matrix around X axis. | Improve this Doc View Source CreateRotationX(Single, out Matrix) Creates a new rotation Matrix around X axis. Declaration public static void CreateRotationX(float radians, out Matrix result) Parameters Type Name Description System.Single radians Angle in radians. Matrix result The rotation Matrix around X axis as an output parameter. | Improve this Doc View Source CreateRotationY(Single) Creates a new rotation Matrix around Y axis. Declaration public static Matrix CreateRotationY(float radians) Parameters Type Name Description System.Single radians Angle in radians. Returns Type Description Matrix The rotation Matrix around Y axis. | Improve this Doc View Source CreateRotationY(Single, out Matrix) Creates a new rotation Matrix around Y axis. Declaration public static void CreateRotationY(float radians, out Matrix result) Parameters Type Name Description System.Single radians Angle in radians. Matrix result The rotation Matrix around Y axis as an output parameter. | Improve this Doc View Source CreateRotationZ(Single) Creates a new rotation Matrix around Z axis. Declaration public static Matrix CreateRotationZ(float radians) Parameters Type Name Description System.Single radians Angle in radians. Returns Type Description Matrix The rotation Matrix around Z axis. | Improve this Doc View Source CreateRotationZ(Single, out Matrix) Creates a new rotation Matrix around Z axis. Declaration public static void CreateRotationZ(float radians, out Matrix result) Parameters Type Name Description System.Single radians Angle in radians. Matrix result The rotation Matrix around Z axis as an output parameter. | Improve this Doc View Source CreateScale(Vector3) Creates a new scaling Matrix . Declaration public static Matrix CreateScale(Vector3 scales) Parameters Type Name Description Vector3 scales Vector3 representing x,y and z scale values. Returns Type Description Matrix The scaling Matrix . | Improve this Doc View Source CreateScale(ref Vector3, out Matrix) Creates a new scaling Matrix . Declaration public static void CreateScale(ref Vector3 scales, out Matrix result) Parameters Type Name Description Vector3 scales Vector3 representing x,y and z scale values. Matrix result The scaling Matrix as an output parameter. | Improve this Doc View Source CreateScale(Single) Creates a new scaling Matrix . Declaration public static Matrix CreateScale(float scale) Parameters Type Name Description System.Single scale Scale value for all three axises. Returns Type Description Matrix The scaling Matrix . | Improve this Doc View Source CreateScale(Single, out Matrix) Creates a new scaling Matrix . Declaration public static void CreateScale(float scale, out Matrix result) Parameters Type Name Description System.Single scale Scale value for all three axises. Matrix result The scaling Matrix as an output parameter. | Improve this Doc View Source CreateScale(Single, Single, Single) Creates a new scaling Matrix . Declaration public static Matrix CreateScale(float xScale, float yScale, float zScale) Parameters Type Name Description System.Single xScale Scale value for X axis. System.Single yScale Scale value for Y axis. System.Single zScale Scale value for Z axis. Returns Type Description Matrix The scaling Matrix . | Improve this Doc View Source CreateScale(Single, Single, Single, out Matrix) Creates a new scaling Matrix . Declaration public static void CreateScale(float xScale, float yScale, float zScale, out Matrix result) Parameters Type Name Description System.Single xScale Scale value for X axis. System.Single yScale Scale value for Y axis. System.Single zScale Scale value for Z axis. Matrix result The scaling Matrix as an output parameter. | Improve this Doc View Source CreateShadow(Vector3, Plane) Creates a new Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source. Declaration public static Matrix CreateShadow(Vector3 lightDirection, Plane plane) Parameters Type Name Description Vector3 lightDirection A vector specifying the direction from which the light that will cast the shadow is coming. Plane plane The plane onto which the new matrix should flatten geometry so as to cast a shadow. Returns Type Description Matrix A Matrix that can be used to flatten geometry onto the specified plane from the specified direction. | Improve this Doc View Source CreateShadow(ref Vector3, ref Plane, out Matrix) Creates a new Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source. Declaration public static void CreateShadow(ref Vector3 lightDirection, ref Plane plane, out Matrix result) Parameters Type Name Description Vector3 lightDirection A vector specifying the direction from which the light that will cast the shadow is coming. Plane plane The plane onto which the new matrix should flatten geometry so as to cast a shadow. Matrix result A Matrix that can be used to flatten geometry onto the specified plane from the specified direction as an output parameter. | Improve this Doc View Source CreateTranslation(Vector3) Creates a new translation Matrix . Declaration public static Matrix CreateTranslation(Vector3 position) Parameters Type Name Description Vector3 position X,Y and Z coordinates of translation. Returns Type Description Matrix The translation Matrix . | Improve this Doc View Source CreateTranslation(ref Vector3, out Matrix) Creates a new translation Matrix . Declaration public static void CreateTranslation(ref Vector3 position, out Matrix result) Parameters Type Name Description Vector3 position X,Y and Z coordinates of translation. Matrix result The translation Matrix as an output parameter. | Improve this Doc View Source CreateTranslation(Single, Single, Single) Creates a new translation Matrix . Declaration public static Matrix CreateTranslation(float xPosition, float yPosition, float zPosition) Parameters Type Name Description System.Single xPosition X coordinate of translation. System.Single yPosition Y coordinate of translation. System.Single zPosition Z coordinate of translation. Returns Type Description Matrix The translation Matrix . | Improve this Doc View Source CreateTranslation(Single, Single, Single, out Matrix) Creates a new translation Matrix . Declaration public static void CreateTranslation(float xPosition, float yPosition, float zPosition, out Matrix result) Parameters Type Name Description System.Single xPosition X coordinate of translation. System.Single yPosition Y coordinate of translation. System.Single zPosition Z coordinate of translation. Matrix result The translation Matrix as an output parameter. | Improve this Doc View Source CreateWorld(Vector3, Vector3, Vector3) Creates a new world Matrix . Declaration public static Matrix CreateWorld(Vector3 position, Vector3 forward, Vector3 up) Parameters Type Name Description Vector3 position The position vector. Vector3 forward The forward direction vector. Vector3 up The upward direction vector. Usually Up . Returns Type Description Matrix The world Matrix . | Improve this Doc View Source CreateWorld(ref Vector3, ref Vector3, ref Vector3, out Matrix) Creates a new world Matrix . Declaration public static void CreateWorld(ref Vector3 position, ref Vector3 forward, ref Vector3 up, out Matrix result) Parameters Type Name Description Vector3 position The position vector. Vector3 forward The forward direction vector. Vector3 up The upward direction vector. Usually Up . Matrix result The world Matrix as an output parameter. | Improve this Doc View Source Decompose(out Vector3, out Quaternion, out Vector3) Decomposes this matrix to translation, rotation and scale elements. Returns true if matrix can be decomposed; false otherwise. Declaration public bool Decompose(out Vector3 scale, out Quaternion rotation, out Vector3 translation) Parameters Type Name Description Vector3 scale Scale vector as an output parameter. Quaternion rotation Rotation quaternion as an output parameter. Vector3 translation Translation vector as an output parameter. Returns Type Description System.Boolean true if matrix can be decomposed; false otherwise. | Improve this Doc View Source Determinant() Returns a determinant of this Matrix . Declaration public float Determinant() Returns Type Description System.Single Determinant of this Matrix Remarks See more about determinant here - http://en.wikipedia.org/wiki/Determinant . | Improve this Doc View Source Divide(Matrix, Matrix) Divides the elements of a Matrix by the elements of another matrix. Declaration public static Matrix Divide(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix . Matrix matrix2 Divisor Matrix . Returns Type Description Matrix The result of dividing the matrix. | Improve this Doc View Source Divide(Matrix, Single) Divides the elements of a Matrix by a scalar. Declaration public static Matrix Divide(Matrix matrix1, float divider) Parameters Type Name Description Matrix matrix1 Source Matrix . System.Single divider Divisor scalar. Returns Type Description Matrix The result of dividing a matrix by a scalar. | Improve this Doc View Source Divide(ref Matrix, ref Matrix, out Matrix) Divides the elements of a Matrix by the elements of another matrix. Declaration public static void Divide(ref Matrix matrix1, ref Matrix matrix2, out Matrix result) Parameters Type Name Description Matrix matrix1 Source Matrix . Matrix matrix2 Divisor Matrix . Matrix result The result of dividing the matrix as an output parameter. | Improve this Doc View Source Divide(ref Matrix, Single, out Matrix) Divides the elements of a Matrix by a scalar. Declaration public static void Divide(ref Matrix matrix1, float divider, out Matrix result) Parameters Type Name Description Matrix matrix1 Source Matrix . System.Single divider Divisor scalar. Matrix result The result of dividing a matrix by a scalar as an output parameter. | Improve this Doc View Source Equals(Matrix) Compares whether current instance is equal to specified Matrix without any tolerance. Declaration public bool Equals(Matrix other) Parameters Type Name Description Matrix other The Matrix to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object without any tolerance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Matrix . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Matrix . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Invert(Matrix) Creates a new Matrix which contains inversion of the specified matrix. Declaration public static Matrix Invert(Matrix matrix) Parameters Type Name Description Matrix matrix Source Matrix . Returns Type Description Matrix The inverted matrix. | Improve this Doc View Source Invert(ref Matrix, out Matrix) Creates a new Matrix which contains inversion of the specified matrix. Declaration public static void Invert(ref Matrix matrix, out Matrix result) Parameters Type Name Description Matrix matrix Source Matrix . Matrix result The inverted matrix as output parameter. | Improve this Doc View Source Lerp(Matrix, Matrix, Single) Creates a new Matrix that contains linear interpolation of the values in specified matrixes. Declaration public static Matrix Lerp(Matrix matrix1, Matrix matrix2, float amount) Parameters Type Name Description Matrix matrix1 The first Matrix . Matrix matrix2 The second Vector2 . System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Matrix The result of linear interpolation of the specified matrixes. | Improve this Doc View Source Lerp(ref Matrix, ref Matrix, Single, out Matrix) Creates a new Matrix that contains linear interpolation of the values in specified matrixes. Declaration public static void Lerp(ref Matrix matrix1, ref Matrix matrix2, float amount, out Matrix result) Parameters Type Name Description Matrix matrix1 The first Matrix . Matrix matrix2 The second Vector2 . System.Single amount Weighting value(between 0.0 and 1.0). Matrix result The result of linear interpolation of the specified matrixes as an output parameter. | Improve this Doc View Source Multiply(Matrix, Matrix) Creates a new Matrix that contains a multiplication of two matrix. Declaration public static Matrix Multiply(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix . Matrix matrix2 Source Matrix . Returns Type Description Matrix Result of the matrix multiplication. | Improve this Doc View Source Multiply(Matrix, Single) Creates a new Matrix that contains a multiplication of Matrix and a scalar. Declaration public static Matrix Multiply(Matrix matrix1, float scaleFactor) Parameters Type Name Description Matrix matrix1 Source Matrix . System.Single scaleFactor Scalar value. Returns Type Description Matrix Result of the matrix multiplication with a scalar. | Improve this Doc View Source Multiply(ref Matrix, ref Matrix, out Matrix) Creates a new Matrix that contains a multiplication of two matrix. Declaration public static void Multiply(ref Matrix matrix1, ref Matrix matrix2, out Matrix result) Parameters Type Name Description Matrix matrix1 Source Matrix . Matrix matrix2 Source Matrix . Matrix result Result of the matrix multiplication as an output parameter. | Improve this Doc View Source Multiply(ref Matrix, Single, out Matrix) Creates a new Matrix that contains a multiplication of Matrix and a scalar. Declaration public static void Multiply(ref Matrix matrix1, float scaleFactor, out Matrix result) Parameters Type Name Description Matrix matrix1 Source Matrix . System.Single scaleFactor Scalar value. Matrix result Result of the matrix multiplication with a scalar as an output parameter. | Improve this Doc View Source Negate(Matrix) Returns a matrix with the all values negated. Declaration public static Matrix Negate(Matrix matrix) Parameters Type Name Description Matrix matrix Source Matrix . Returns Type Description Matrix Result of the matrix negation. | Improve this Doc View Source Negate(ref Matrix, out Matrix) Returns a matrix with the all values negated. Declaration public static void Negate(ref Matrix matrix, out Matrix result) Parameters Type Name Description Matrix matrix Source Matrix . Matrix result Result of the matrix negation as an output parameter. | Improve this Doc View Source Subtract(Matrix, Matrix) Creates a new Matrix that contains subtraction of one matrix from another. Declaration public static Matrix Subtract(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 The first Matrix . Matrix matrix2 The second Matrix . Returns Type Description Matrix The result of the matrix subtraction. | Improve this Doc View Source Subtract(ref Matrix, ref Matrix, out Matrix) Creates a new Matrix that contains subtraction of one matrix from another. Declaration public static void Subtract(ref Matrix matrix1, ref Matrix matrix2, out Matrix result) Parameters Type Name Description Matrix matrix1 The first Matrix . Matrix matrix2 The second Matrix . Matrix result The result of the matrix subtraction as an output parameter. | Improve this Doc View Source ToFloatArray(Matrix) Copy the values of specified Matrix to the float array. Declaration public static float[] ToFloatArray(Matrix matrix) Parameters Type Name Description Matrix matrix The source Matrix . Returns Type Description System.Single [] The array which matrix values will be stored. Remarks Required for OpenGL 2.0 projection matrix stuff. | Improve this Doc View Source ToString() Returns a System.String representation of this Matrix in the format: {M11:[ M11 ] M12:[ M12 ] M13:[ M13 ] M14:[ M14 ]} {M21:[ M21 ] M12:[ M22 ] M13:[ M23 ] M14:[ M24 ]} {M31:[ M31 ] M32:[ M32 ] M33:[ M33 ] M34:[ M34 ]} {M41:[ M41 ] M42:[ M42 ] M43:[ M43 ] M44:[ M44 ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this Matrix . Overrides System.ValueType.ToString() | Improve this Doc View Source Transpose(Matrix) Swap the matrix rows and columns. Declaration public static Matrix Transpose(Matrix matrix) Parameters Type Name Description Matrix matrix The matrix for transposing operation. Returns Type Description Matrix The new Matrix which contains the transposing result. | Improve this Doc View Source Transpose(ref Matrix, out Matrix) Swap the matrix rows and columns. Declaration public static void Transpose(ref Matrix matrix, out Matrix result) Parameters Type Name Description Matrix matrix The matrix for transposing operation. Matrix result The new Matrix which contains the transposing result as an output parameter. Operators | Improve this Doc View Source Addition(Matrix, Matrix) Adds two matrixes. Declaration public static Matrix operator +(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix on the left of the add sign. Matrix matrix2 Source Matrix on the right of the add sign. Returns Type Description Matrix Sum of the matrixes. | Improve this Doc View Source Division(Matrix, Matrix) Divides the elements of a Matrix by the elements of another Matrix . Declaration public static Matrix operator /(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix on the left of the div sign. Matrix matrix2 Divisor Matrix on the right of the div sign. Returns Type Description Matrix The result of dividing the matrixes. | Improve this Doc View Source Division(Matrix, Single) Divides the elements of a Matrix by a scalar. Declaration public static Matrix operator /(Matrix matrix, float divider) Parameters Type Name Description Matrix matrix Source Matrix on the left of the div sign. System.Single divider Divisor scalar on the right of the div sign. Returns Type Description Matrix The result of dividing a matrix by a scalar. | Improve this Doc View Source Equality(Matrix, Matrix) Compares whether two Matrix instances are equal without any tolerance. Declaration public static bool operator ==(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix on the left of the equal sign. Matrix matrix2 Source Matrix on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Matrix, Matrix) Compares whether two Matrix instances are not equal without any tolerance. Declaration public static bool operator !=(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix on the left of the not equal sign. Matrix matrix2 Source Matrix on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Matrix, Matrix) Multiplies two matrixes. Declaration public static Matrix operator *(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix on the left of the mul sign. Matrix matrix2 Source Matrix on the right of the mul sign. Returns Type Description Matrix Result of the matrix multiplication. Remarks Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication . | Improve this Doc View Source Multiply(Matrix, Single) Multiplies the elements of matrix by a scalar. Declaration public static Matrix operator *(Matrix matrix, float scaleFactor) Parameters Type Name Description Matrix matrix Source Matrix on the left of the mul sign. System.Single scaleFactor Scalar value on the right of the mul sign. Returns Type Description Matrix Result of the matrix multiplication with a scalar. | Improve this Doc View Source Subtraction(Matrix, Matrix) Subtracts the values of one Matrix from another Matrix . Declaration public static Matrix operator -(Matrix matrix1, Matrix matrix2) Parameters Type Name Description Matrix matrix1 Source Matrix on the left of the sub sign. Matrix matrix2 Source Matrix on the right of the sub sign. Returns Type Description Matrix Result of the matrix subtraction. | Improve this Doc View Source UnaryNegation(Matrix) Inverts values in the specified Matrix . Declaration public static Matrix operator -(Matrix matrix) Parameters Type Name Description Matrix matrix Source Matrix on the right of the sub sign. Returns Type Description Matrix Result of the inversion. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Input.Keyboard.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Keyboard.html",
    "title": "Class Keyboard | MonoGame Documentation",
    "keywords": "Class Keyboard Allows getting keystrokes from keyboard. Inheritance System.Object Keyboard Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public static class Keyboard Methods | Improve this Doc View Source GetState() Returns the current keyboard state. Declaration public static KeyboardState GetState() Returns Type Description KeyboardState Current keyboard state. | Improve this Doc View Source GetState(PlayerIndex) Returns the current keyboard state for a given player. Declaration [Obsolete(\"Use GetState() instead. In future versions this method can be removed.\")] public static KeyboardState GetState(PlayerIndex playerIndex) Parameters Type Name Description PlayerIndex playerIndex Player index of the keyboard. Returns Type Description KeyboardState Current keyboard state."
  },
  "_api/Microsoft.Xna.Framework.Input.JoystickState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.JoystickState.html",
    "title": "Struct JoystickState | MonoGame Documentation",
    "keywords": "Struct JoystickState Describes current joystick state. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct JoystickState Properties | Improve this Doc View Source Axes Gets the joystick axis values. Declaration public int[] Axes { get; } Property Value Type Description System.Int32 [] An array list of ints that indicate axis values. | Improve this Doc View Source Buttons Gets the joystick button values. Declaration public ButtonState[] Buttons { get; } Property Value Type Description ButtonState [] An array list of ButtonState that indicate button values. | Improve this Doc View Source Hats Gets the joystick hat values. Declaration public JoystickHat[] Hats { get; } Property Value Type Description JoystickHat [] An array list of JoystickHat that indicate hat values. | Improve this Doc View Source IsConnected Gets a value indicating whether the joystick is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean true if the joystick is connected; otherwise, false . Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to the current JoystickState . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current JoystickState . Returns Type Description System.Boolean true if the specified System.Object is equal to the current JoystickState ; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a JoystickState object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current JoystickState . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current JoystickState . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(JoystickState, JoystickState) Determines whether a specified instance of JoystickState is equal to another specified JoystickState . Declaration public static bool operator ==(JoystickState left, JoystickState right) Parameters Type Name Description JoystickState left The first JoystickState to compare. JoystickState right The second JoystickState to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(JoystickState, JoystickState) Determines whether a specified instance of JoystickState is not equal to another specified JoystickState . Declaration public static bool operator !=(JoystickState left, JoystickState right) Parameters Type Name Description JoystickState left The first JoystickState to compare. JoystickState right The second JoystickState to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false ."
  },
  "_api/Microsoft.Xna.Framework.Input.JoystickHat.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.JoystickHat.html",
    "title": "Struct JoystickHat | MonoGame Documentation",
    "keywords": "Struct JoystickHat Describes joystick hat state. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct JoystickHat Properties | Improve this Doc View Source Down Gets if joysticks hat \"down\" is pressed. Declaration public ButtonState Down { get; } Property Value Type Description ButtonState Pressed if the button is pressed otherwise, Released . | Improve this Doc View Source Left Gets if joysticks hat \"left\" is pressed. Declaration public ButtonState Left { get; } Property Value Type Description ButtonState Pressed if the button is pressed otherwise, Released . | Improve this Doc View Source Right Gets if joysticks hat \"right\" is pressed. Declaration public ButtonState Right { get; } Property Value Type Description ButtonState Pressed if the button is pressed otherwise, Released . | Improve this Doc View Source Up Gets if joysticks hat \"up\" is pressed. Declaration public ButtonState Up { get; } Property Value Type Description ButtonState Pressed if the button is pressed otherwise, Released . Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to the current JoystickHat . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current JoystickHat . Returns Type Description System.Boolean true if the specified System.Object is equal to the current JoystickHat ; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a JoystickHat object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current JoystickHat in a format of 0000 where each number represents a boolean value of each respecting object property: Left, Up, Right, Down. Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current JoystickHat . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(JoystickHat, JoystickHat) Determines whether a specified instance of JoystickHat is equal to another specified JoystickHat . Declaration public static bool operator ==(JoystickHat left, JoystickHat right) Parameters Type Name Description JoystickHat left The first JoystickHat to compare. JoystickHat right The second JoystickHat to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(JoystickHat, JoystickHat) Determines whether a specified instance of JoystickHat is not equal to another specified JoystickHat . Declaration public static bool operator !=(JoystickHat left, JoystickHat right) Parameters Type Name Description JoystickHat left The first JoystickHat to compare. JoystickHat right The second JoystickHat to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false ."
  },
  "_api/Microsoft.Xna.Framework.Input.JoystickCapabilities.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.JoystickCapabilities.html",
    "title": "Struct JoystickCapabilities | MonoGame Documentation",
    "keywords": "Struct JoystickCapabilities Describes joystick capabilities. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct JoystickCapabilities Properties | Improve this Doc View Source AxisCount Gets the axis count. Declaration public int AxisCount { get; } Property Value Type Description System.Int32 The number of axes that the joystick possesses. | Improve this Doc View Source ButtonCount Gets the button count. Declaration public int ButtonCount { get; } Property Value Type Description System.Int32 The number of buttons that the joystick possesses. | Improve this Doc View Source HatCount Gets the hat count. Declaration public int HatCount { get; } Property Value Type Description System.Int32 The number of hats/dpads that the joystick possesses. | Improve this Doc View Source Identifier Gets the unique identifier of the joystick. Declaration public string Identifier { get; } Property Value Type Description System.String String representing the unique identifier of the joystick. | Improve this Doc View Source IsConnected Gets a value indicating whether the joystick is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean true if the joystick is connected; otherwise, false . | Improve this Doc View Source IsGamepad Gets a value indicating if the joystick is a gamepad. Declaration public bool IsGamepad { get; } Property Value Type Description System.Boolean true if the joystick is a gamepad; otherwise, false . Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to the current JoystickCapabilities . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current JoystickCapabilities . Returns Type Description System.Boolean true if the specified System.Object is equal to the current JoystickCapabilities ; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a JoystickCapabilities object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current JoystickCapabilities . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current JoystickCapabilities . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(JoystickCapabilities, JoystickCapabilities) Determines whether a specified instance of JoystickCapabilities is equal to another specified JoystickCapabilities . Declaration public static bool operator ==(JoystickCapabilities left, JoystickCapabilities right) Parameters Type Name Description JoystickCapabilities left The first JoystickCapabilities to compare. JoystickCapabilities right The second JoystickCapabilities to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(JoystickCapabilities, JoystickCapabilities) Determines whether a specified instance of JoystickCapabilities is not equal to another specified JoystickCapabilities . Declaration public static bool operator !=(JoystickCapabilities left, JoystickCapabilities right) Parameters Type Name Description JoystickCapabilities left The first JoystickCapabilities to compare. JoystickCapabilities right The second JoystickCapabilities to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false ."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexPositionColor.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexPositionColor.html",
    "title": "Struct VertexPositionColor | MonoGame Documentation",
    "keywords": "Struct VertexPositionColor Implements IVertexType Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct VertexPositionColor : IVertexType Constructors | Improve this Doc View Source VertexPositionColor(Vector3, Color) Declaration public VertexPositionColor(Vector3 position, Color color) Parameters Type Name Description Vector3 position Color color Fields | Improve this Doc View Source Color Declaration [DataMember] public Color Color Field Value Type Description Color | Improve this Doc View Source Position Declaration [DataMember] public Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source VertexDeclaration Declaration public static readonly VertexDeclaration VertexDeclaration Field Value Type Description VertexDeclaration Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(VertexPositionColor, VertexPositionColor) Declaration public static bool operator ==(VertexPositionColor left, VertexPositionColor right) Parameters Type Name Description VertexPositionColor left VertexPositionColor right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(VertexPositionColor, VertexPositionColor) Declaration public static bool operator !=(VertexPositionColor left, VertexPositionColor right) Parameters Type Name Description VertexPositionColor left VertexPositionColor right Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IVertexType.VertexDeclaration Declaration VertexDeclaration IVertexType.VertexDeclaration { get; } Returns Type Description VertexDeclaration Implements IVertexType"
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexPosition.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexPosition.html",
    "title": "Struct VertexPosition | MonoGame Documentation",
    "keywords": "Struct VertexPosition Implements IVertexType Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct VertexPosition : IVertexType Constructors | Improve this Doc View Source VertexPosition(Vector3) Declaration public VertexPosition(Vector3 position) Parameters Type Name Description Vector3 position Fields | Improve this Doc View Source Position Declaration [DataMember] public Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source VertexDeclaration Declaration public static readonly VertexDeclaration VertexDeclaration Field Value Type Description VertexDeclaration Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(VertexPosition, VertexPosition) Declaration public static bool operator ==(VertexPosition left, VertexPosition right) Parameters Type Name Description VertexPosition left VertexPosition right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(VertexPosition, VertexPosition) Declaration public static bool operator !=(VertexPosition left, VertexPosition right) Parameters Type Name Description VertexPosition left VertexPosition right Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IVertexType.VertexDeclaration Declaration VertexDeclaration IVertexType.VertexDeclaration { get; } Returns Type Description VertexDeclaration Implements IVertexType"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Texture.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Texture.html",
    "title": "Class Texture | MonoGame Documentation",
    "keywords": "Class Texture Inheritance System.Object GraphicsResource Texture Texture2D Texture3D TextureCube Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public abstract class Texture : GraphicsResource, IDisposable Properties | Improve this Doc View Source Format Declaration public SurfaceFormat Format { get; } Property Value Type Description SurfaceFormat | Improve this Doc View Source LevelCount Declaration public int LevelCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CreateShaderResourceView() Declaration protected virtual ShaderResourceView CreateShaderResourceView() Returns Type Description SharpDX.Direct3D11.ShaderResourceView | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GetSharedHandle() Gets the handle to a shared resource. Declaration public IntPtr GetSharedHandle() Returns Type Description System.IntPtr The handle of the shared resource, or System.IntPtr.Zero if the texture was not created as a shared resource. | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.TargetBlendState.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.TargetBlendState.html",
    "title": "Class TargetBlendState | MonoGame Documentation",
    "keywords": "Class TargetBlendState Inheritance System.Object TargetBlendState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class TargetBlendState Properties | Improve this Doc View Source AlphaBlendFunction Declaration public BlendFunction AlphaBlendFunction { get; set; } Property Value Type Description BlendFunction | Improve this Doc View Source AlphaDestinationBlend Declaration public Blend AlphaDestinationBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source AlphaSourceBlend Declaration public Blend AlphaSourceBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source ColorBlendFunction Declaration public BlendFunction ColorBlendFunction { get; set; } Property Value Type Description BlendFunction | Improve this Doc View Source ColorDestinationBlend Declaration public Blend ColorDestinationBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source ColorSourceBlend Declaration public Blend ColorSourceBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source ColorWriteChannels Declaration public ColorWriteChannels ColorWriteChannels { get; set; } Property Value Type Description ColorWriteChannels"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.html",
    "title": "Class ResourceCreatedEventArgs | MonoGame Documentation",
    "keywords": "Class ResourceCreatedEventArgs Inheritance System.Object System.EventArgs ResourceCreatedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ResourceCreatedEventArgs : EventArgs Properties | Improve this Doc View Source Resource The newly created resource object. Declaration public object Resource { get; } Property Value Type Description System.Object"
  },
  "_api/Microsoft.Xna.Framework.Graphics.RenderTargetUsage.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.RenderTargetUsage.html",
    "title": "Enum RenderTargetUsage | MonoGame Documentation",
    "keywords": "Enum RenderTargetUsage Defines if the previous content in a render target is preserved when it set on the graphics device. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum RenderTargetUsage Fields Name Description DiscardContents The render target content will not be preserved. PlatformContents The render target content might be preserved if the platform can do so without a penalty in performance or memory usage. PreserveContents The render target content will be preserved even if it is slow or requires extra memory."
  },
  "_api/Microsoft.Xna.Framework.Audio.AudioChannels.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.AudioChannels.html",
    "title": "Enum AudioChannels | MonoGame Documentation",
    "keywords": "Enum AudioChannels Represents how many channels are used in the audio data. Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public enum AudioChannels Fields Name Description Mono Single channel. Stereo Two channels."
  },
  "_api/Microsoft.Xna.Framework.Vector4.html": {
    "href": "_api/Microsoft.Xna.Framework.Vector4.html",
    "title": "Struct Vector4 | MonoGame Documentation",
    "keywords": "Struct Vector4 Describes a 4D-vector. Implements System.IEquatable < Vector4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [TypeConverter(typeof (Vector4TypeConverter))] [DataContract] public struct Vector4 : IEquatable<Vector4> Constructors | Improve this Doc View Source Vector4(Vector2, Single, Single) Constructs a 3d vector with X and Z from Vector2 and Z and W from the scalars. Declaration public Vector4(Vector2 value, float z, float w) Parameters Type Name Description Vector2 value The x and y coordinates in 4d-space. System.Single z The z coordinate in 4d-space. System.Single w The w coordinate in 4d-space. | Improve this Doc View Source Vector4(Vector3, Single) Constructs a 3d vector with X, Y, Z from Vector3 and W from a scalar. Declaration public Vector4(Vector3 value, float w) Parameters Type Name Description Vector3 value The x, y and z coordinates in 4d-space. System.Single w The w coordinate in 4d-space. | Improve this Doc View Source Vector4(Single) Constructs a 4d vector with X, Y, Z and W set to the same value. Declaration public Vector4(float value) Parameters Type Name Description System.Single value The x, y, z and w coordinates in 4d-space. | Improve this Doc View Source Vector4(Single, Single, Single, Single) Constructs a 3d vector with X, Y, Z and W from four values. Declaration public Vector4(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x coordinate in 4d-space. System.Single y The y coordinate in 4d-space. System.Single z The z coordinate in 4d-space. System.Single w The w coordinate in 4d-space. Fields | Improve this Doc View Source W The w coordinate of this Vector4 . Declaration [DataMember] public float W Field Value Type Description System.Single | Improve this Doc View Source X The x coordinate of this Vector4 . Declaration [DataMember] public float X Field Value Type Description System.Single | Improve this Doc View Source Y The y coordinate of this Vector4 . Declaration [DataMember] public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The z coordinate of this Vector4 . Declaration [DataMember] public float Z Field Value Type Description System.Single Properties | Improve this Doc View Source One Returns a Vector4 with components 1, 1, 1, 1. Declaration public static Vector4 One { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitW Returns a Vector4 with components 0, 0, 0, 1. Declaration public static Vector4 UnitW { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitX Returns a Vector4 with components 1, 0, 0, 0. Declaration public static Vector4 UnitX { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitY Returns a Vector4 with components 0, 1, 0, 0. Declaration public static Vector4 UnitY { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitZ Returns a Vector4 with components 0, 0, 1, 0. Declaration public static Vector4 UnitZ { get; } Property Value Type Description Vector4 | Improve this Doc View Source Zero Returns a Vector4 with components 0, 0, 0, 0. Declaration public static Vector4 Zero { get; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Add(Vector4, Vector4) Performs vector addition on value1 and value2 . Declaration public static Vector4 Add(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector to add. Vector4 value2 The second vector to add. Returns Type Description Vector4 The result of the vector addition. | Improve this Doc View Source Add(ref Vector4, ref Vector4, out Vector4) Performs vector addition on value1 and value2 , storing the result of the addition in result . Declaration public static void Add(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector to add. Vector4 value2 The second vector to add. Vector4 result The result of the vector addition. | Improve this Doc View Source Barycentric(Vector4, Vector4, Vector4, Single, Single) Creates a new Vector4 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle. Declaration public static Vector4 Barycentric(Vector4 value1, Vector4 value2, Vector4 value3, float amount1, float amount2) Parameters Type Name Description Vector4 value1 The first vector of 4d-triangle. Vector4 value2 The second vector of 4d-triangle. Vector4 value3 The third vector of 4d-triangle. System.Single amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 4d-triangle. System.Single amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 4d-triangle. Returns Type Description Vector4 The cartesian translation of barycentric coordinates. | Improve this Doc View Source Barycentric(ref Vector4, ref Vector4, ref Vector4, Single, Single, out Vector4) Creates a new Vector4 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle. Declaration public static void Barycentric(ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, float amount1, float amount2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector of 4d-triangle. Vector4 value2 The second vector of 4d-triangle. Vector4 value3 The third vector of 4d-triangle. System.Single amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 4d-triangle. System.Single amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 4d-triangle. Vector4 result The cartesian translation of barycentric coordinates as an output parameter. | Improve this Doc View Source CatmullRom(Vector4, Vector4, Vector4, Vector4, Single) Creates a new Vector4 that contains CatmullRom interpolation of the specified vectors. Declaration public static Vector4 CatmullRom(Vector4 value1, Vector4 value2, Vector4 value3, Vector4 value4, float amount) Parameters Type Name Description Vector4 value1 The first vector in interpolation. Vector4 value2 The second vector in interpolation. Vector4 value3 The third vector in interpolation. Vector4 value4 The fourth vector in interpolation. System.Single amount Weighting factor. Returns Type Description Vector4 The result of CatmullRom interpolation. | Improve this Doc View Source CatmullRom(ref Vector4, ref Vector4, ref Vector4, ref Vector4, Single, out Vector4) Creates a new Vector4 that contains CatmullRom interpolation of the specified vectors. Declaration public static void CatmullRom(ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, ref Vector4 value4, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector in interpolation. Vector4 value2 The second vector in interpolation. Vector4 value3 The third vector in interpolation. Vector4 value4 The fourth vector in interpolation. System.Single amount Weighting factor. Vector4 result The result of CatmullRom interpolation as an output parameter. | Improve this Doc View Source Clamp(Vector4, Vector4, Vector4) Clamps the specified value within a range. Declaration public static Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 value1 The value to clamp. Vector4 min The min value. Vector4 max The max value. Returns Type Description Vector4 The clamped value. | Improve this Doc View Source Clamp(ref Vector4, ref Vector4, ref Vector4, out Vector4) Clamps the specified value within a range. Declaration public static void Clamp(ref Vector4 value1, ref Vector4 min, ref Vector4 max, out Vector4 result) Parameters Type Name Description Vector4 value1 The value to clamp. Vector4 min The min value. Vector4 max The max value. Vector4 result The clamped value as an output parameter. | Improve this Doc View Source Distance(Vector4, Vector4) Returns the distance between two vectors. Declaration public static float Distance(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description System.Single The distance between two vectors. | Improve this Doc View Source Distance(ref Vector4, ref Vector4, out Single) Returns the distance between two vectors. Declaration public static void Distance(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single result The distance between two vectors as an output parameter. | Improve this Doc View Source DistanceSquared(Vector4, Vector4) Returns the squared distance between two vectors. Declaration public static float DistanceSquared(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description System.Single The squared distance between two vectors. | Improve this Doc View Source DistanceSquared(ref Vector4, ref Vector4, out Single) Returns the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single result The squared distance between two vectors as an output parameter. | Improve this Doc View Source Divide(Vector4, Vector4) Divides the components of a Vector4 by the components of another Vector4 . Declaration public static Vector4 Divide(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Divisor Vector4 . Returns Type Description Vector4 The result of dividing the vectors. | Improve this Doc View Source Divide(Vector4, Single) Divides the components of a Vector4 by a scalar. Declaration public static Vector4 Divide(Vector4 value1, float divider) Parameters Type Name Description Vector4 value1 Source Vector4 . System.Single divider Divisor scalar. Returns Type Description Vector4 The result of dividing a vector by a scalar. | Improve this Doc View Source Divide(ref Vector4, ref Vector4, out Vector4) Divides the components of a Vector4 by the components of another Vector4 . Declaration public static void Divide(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Divisor Vector4 . Vector4 result The result of dividing the vectors as an output parameter. | Improve this Doc View Source Divide(ref Vector4, Single, out Vector4) Divides the components of a Vector4 by a scalar. Declaration public static void Divide(ref Vector4 value1, float divider, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4 . System.Single divider Divisor scalar. Vector4 result The result of dividing a vector by a scalar as an output parameter. | Improve this Doc View Source Dot(Vector4, Vector4) Returns a dot product of two vectors. Declaration public static float Dot(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description System.Single The dot product of two vectors. | Improve this Doc View Source Dot(ref Vector4, ref Vector4, out Single) Returns a dot product of two vectors. Declaration public static void Dot(ref Vector4 value1, ref Vector4 value2, out float result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single result The dot product of two vectors as an output parameter. | Improve this Doc View Source Equals(Vector4) Compares whether current instance is equal to specified Vector4 . Declaration public bool Equals(Vector4 other) Parameters Type Name Description Vector4 other The Vector4 to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Vector4 . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Vector4 . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Hermite(Vector4, Vector4, Vector4, Vector4, Single) Creates a new Vector4 that contains hermite spline interpolation. Declaration public static Vector4 Hermite(Vector4 value1, Vector4 tangent1, Vector4 value2, Vector4 tangent2, float amount) Parameters Type Name Description Vector4 value1 The first position vector. Vector4 tangent1 The first tangent vector. Vector4 value2 The second position vector. Vector4 tangent2 The second tangent vector. System.Single amount Weighting factor. Returns Type Description Vector4 The hermite spline interpolation vector. | Improve this Doc View Source Hermite(ref Vector4, ref Vector4, ref Vector4, ref Vector4, Single, out Vector4) Creates a new Vector4 that contains hermite spline interpolation. Declaration public static void Hermite(ref Vector4 value1, ref Vector4 tangent1, ref Vector4 value2, ref Vector4 tangent2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first position vector. Vector4 tangent1 The first tangent vector. Vector4 value2 The second position vector. Vector4 tangent2 The second tangent vector. System.Single amount Weighting factor. Vector4 result The hermite spline interpolation vector as an output parameter. | Improve this Doc View Source Length() Returns the length of this Vector4 . Declaration public float Length() Returns Type Description System.Single The length of this Vector4 . | Improve this Doc View Source LengthSquared() Returns the squared length of this Vector4 . Declaration public float LengthSquared() Returns Type Description System.Single The squared length of this Vector4 . | Improve this Doc View Source Lerp(Vector4, Vector4, Single) Creates a new Vector4 that contains linear interpolation of the specified vectors. Declaration public static Vector4 Lerp(Vector4 value1, Vector4 value2, float amount) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector4 The result of linear interpolation of the specified vectors. | Improve this Doc View Source Lerp(ref Vector4, ref Vector4, Single, out Vector4) Creates a new Vector4 that contains linear interpolation of the specified vectors. Declaration public static void Lerp(ref Vector4 value1, ref Vector4 value2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Vector4 result The result of linear interpolation of the specified vectors as an output parameter. | Improve this Doc View Source LerpPrecise(Vector4, Vector4, Single) Creates a new Vector4 that contains linear interpolation of the specified vectors. Uses LerpPrecise(Single, Single, Single) on MathHelper for the interpolation. Less efficient but more precise compared to Lerp(Vector4, Vector4, Single) . See remarks section of LerpPrecise(Single, Single, Single) on MathHelper for more info. Declaration public static Vector4 LerpPrecise(Vector4 value1, Vector4 value2, float amount) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector4 The result of linear interpolation of the specified vectors. | Improve this Doc View Source LerpPrecise(ref Vector4, ref Vector4, Single, out Vector4) Creates a new Vector4 that contains linear interpolation of the specified vectors. Uses LerpPrecise(Single, Single, Single) on MathHelper for the interpolation. Less efficient but more precise compared to Lerp(ref Vector4, ref Vector4, Single, out Vector4) . See remarks section of LerpPrecise(Single, Single, Single) on MathHelper for more info. Declaration public static void LerpPrecise(ref Vector4 value1, ref Vector4 value2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Vector4 result The result of linear interpolation of the specified vectors as an output parameter. | Improve this Doc View Source Max(Vector4, Vector4) Creates a new Vector4 that contains a maximal values from the two vectors. Declaration public static Vector4 Max(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description Vector4 The Vector4 with maximal values from the two vectors. | Improve this Doc View Source Max(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains a maximal values from the two vectors. Declaration public static void Max(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Vector4 result The Vector4 with maximal values from the two vectors as an output parameter. | Improve this Doc View Source Min(Vector4, Vector4) Creates a new Vector4 that contains a minimal values from the two vectors. Declaration public static Vector4 Min(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Returns Type Description Vector4 The Vector4 with minimal values from the two vectors. | Improve this Doc View Source Min(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains a minimal values from the two vectors. Declaration public static void Min(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 The first vector. Vector4 value2 The second vector. Vector4 result The Vector4 with minimal values from the two vectors as an output parameter. | Improve this Doc View Source Multiply(Vector4, Vector4) Creates a new Vector4 that contains a multiplication of two vectors. Declaration public static Vector4 Multiply(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Source Vector4 . Returns Type Description Vector4 The result of the vector multiplication. | Improve this Doc View Source Multiply(Vector4, Single) Creates a new Vector4 that contains a multiplication of Vector4 and a scalar. Declaration public static Vector4 Multiply(Vector4 value1, float scaleFactor) Parameters Type Name Description Vector4 value1 Source Vector4 . System.Single scaleFactor Scalar value. Returns Type Description Vector4 The result of the vector multiplication with a scalar. | Improve this Doc View Source Multiply(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains a multiplication of two vectors. Declaration public static void Multiply(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Source Vector4 . Vector4 result The result of the vector multiplication as an output parameter. | Improve this Doc View Source Multiply(ref Vector4, Single, out Vector4) Creates a new Vector4 that contains a multiplication of Vector4 and a scalar. Declaration public static void Multiply(ref Vector4 value1, float scaleFactor, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4 . System.Single scaleFactor Scalar value. Vector4 result The result of the multiplication with a scalar as an output parameter. | Improve this Doc View Source Negate(Vector4) Creates a new Vector4 that contains the specified vector inversion. Declaration public static Vector4 Negate(Vector4 value) Parameters Type Name Description Vector4 value Source Vector4 . Returns Type Description Vector4 The result of the vector inversion. | Improve this Doc View Source Negate(ref Vector4, out Vector4) Creates a new Vector4 that contains the specified vector inversion. Declaration public static void Negate(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value Source Vector4 . Vector4 result The result of the vector inversion as an output parameter. | Improve this Doc View Source Normalize() Turns this Vector4 to a unit vector with the same direction. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector4) Creates a new Vector4 that contains a normalized values from another vector. Declaration public static Vector4 Normalize(Vector4 value) Parameters Type Name Description Vector4 value Source Vector4 . Returns Type Description Vector4 Unit vector. | Improve this Doc View Source Normalize(ref Vector4, out Vector4) Creates a new Vector4 that contains a normalized values from another vector. Declaration public static void Normalize(ref Vector4 value, out Vector4 result) Parameters Type Name Description Vector4 value Source Vector4 . Vector4 result Unit vector as an output parameter. | Improve this Doc View Source SmoothStep(Vector4, Vector4, Single) Creates a new Vector4 that contains cubic interpolation of the specified vectors. Declaration public static Vector4 SmoothStep(Vector4 value1, Vector4 value2, float amount) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Source Vector4 . System.Single amount Weighting value. Returns Type Description Vector4 Cubic interpolation of the specified vectors. | Improve this Doc View Source SmoothStep(ref Vector4, ref Vector4, Single, out Vector4) Creates a new Vector4 that contains cubic interpolation of the specified vectors. Declaration public static void SmoothStep(ref Vector4 value1, ref Vector4 value2, float amount, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Source Vector4 . System.Single amount Weighting value. Vector4 result Cubic interpolation of the specified vectors as an output parameter. | Improve this Doc View Source Subtract(Vector4, Vector4) Creates a new Vector4 that contains subtraction of on Vector4 from a another. Declaration public static Vector4 Subtract(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Source Vector4 . Returns Type Description Vector4 The result of the vector subtraction. | Improve this Doc View Source Subtract(ref Vector4, ref Vector4, out Vector4) Creates a new Vector4 that contains subtraction of on Vector4 from a another. Declaration public static void Subtract(ref Vector4 value1, ref Vector4 value2, out Vector4 result) Parameters Type Name Description Vector4 value1 Source Vector4 . Vector4 value2 Source Vector4 . Vector4 result The result of the vector subtraction as an output parameter. | Improve this Doc View Source ToString() Returns a System.String representation of this Vector4 in the format: {X:[ X ] Y:[ Y ] Z:[ Z ] W:[ W ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this Vector4 . Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Vector2, Matrix) Creates a new Vector4 that contains a transformation of 2d-vector by the specified Matrix . Declaration public static Vector4 Transform(Vector2 value, Matrix matrix) Parameters Type Name Description Vector2 value Source Vector2 . Matrix matrix The transformation Matrix . Returns Type Description Vector4 Transformed Vector4 . | Improve this Doc View Source Transform(Vector2, Quaternion) Creates a new Vector4 that contains a transformation of 2d-vector by the specified Quaternion . Declaration public static Vector4 Transform(Vector2 value, Quaternion rotation) Parameters Type Name Description Vector2 value Source Vector2 . Quaternion rotation The Quaternion which contains rotation transformation. Returns Type Description Vector4 Transformed Vector4 . | Improve this Doc View Source Transform(ref Vector2, ref Matrix, out Vector4) Creates a new Vector4 that contains a transformation of 2d-vector by the specified Matrix . Declaration public static void Transform(ref Vector2 value, ref Matrix matrix, out Vector4 result) Parameters Type Name Description Vector2 value Source Vector2 . Matrix matrix The transformation Matrix . Vector4 result Transformed Vector4 as an output parameter. | Improve this Doc View Source Transform(ref Vector2, ref Quaternion, out Vector4) Creates a new Vector4 that contains a transformation of 2d-vector by the specified Quaternion . Declaration public static void Transform(ref Vector2 value, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector2 value Source Vector2 . Quaternion rotation The Quaternion which contains rotation transformation. Vector4 result Transformed Vector4 as an output parameter. | Improve this Doc View Source Transform(Vector3, Matrix) Creates a new Vector4 that contains a transformation of 3d-vector by the specified Matrix . Declaration public static Vector4 Transform(Vector3 value, Matrix matrix) Parameters Type Name Description Vector3 value Source Vector3 . Matrix matrix The transformation Matrix . Returns Type Description Vector4 Transformed Vector4 . | Improve this Doc View Source Transform(Vector3, Quaternion) Creates a new Vector4 that contains a transformation of 3d-vector by the specified Quaternion . Declaration public static Vector4 Transform(Vector3 value, Quaternion rotation) Parameters Type Name Description Vector3 value Source Vector3 . Quaternion rotation The Quaternion which contains rotation transformation. Returns Type Description Vector4 Transformed Vector4 . | Improve this Doc View Source Transform(ref Vector3, ref Matrix, out Vector4) Creates a new Vector4 that contains a transformation of 3d-vector by the specified Matrix . Declaration public static void Transform(ref Vector3 value, ref Matrix matrix, out Vector4 result) Parameters Type Name Description Vector3 value Source Vector3 . Matrix matrix The transformation Matrix . Vector4 result Transformed Vector4 as an output parameter. | Improve this Doc View Source Transform(ref Vector3, ref Quaternion, out Vector4) Creates a new Vector4 that contains a transformation of 3d-vector by the specified Quaternion . Declaration public static void Transform(ref Vector3 value, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector3 value Source Vector3 . Quaternion rotation The Quaternion which contains rotation transformation. Vector4 result Transformed Vector4 as an output parameter. | Improve this Doc View Source Transform(Vector4, Matrix) Creates a new Vector4 that contains a transformation of 4d-vector by the specified Matrix . Declaration public static Vector4 Transform(Vector4 value, Matrix matrix) Parameters Type Name Description Vector4 value Source Vector4 . Matrix matrix The transformation Matrix . Returns Type Description Vector4 Transformed Vector4 . | Improve this Doc View Source Transform(Vector4, Quaternion) Creates a new Vector4 that contains a transformation of 4d-vector by the specified Quaternion . Declaration public static Vector4 Transform(Vector4 value, Quaternion rotation) Parameters Type Name Description Vector4 value Source Vector4 . Quaternion rotation The Quaternion which contains rotation transformation. Returns Type Description Vector4 Transformed Vector4 . | Improve this Doc View Source Transform(ref Vector4, ref Matrix, out Vector4) Creates a new Vector4 that contains a transformation of 4d-vector by the specified Matrix . Declaration public static void Transform(ref Vector4 value, ref Matrix matrix, out Vector4 result) Parameters Type Name Description Vector4 value Source Vector4 . Matrix matrix The transformation Matrix . Vector4 result Transformed Vector4 as an output parameter. | Improve this Doc View Source Transform(ref Vector4, ref Quaternion, out Vector4) Creates a new Vector4 that contains a transformation of 4d-vector by the specified Quaternion . Declaration public static void Transform(ref Vector4 value, ref Quaternion rotation, out Vector4 result) Parameters Type Name Description Vector4 value Source Vector4 . Quaternion rotation The Quaternion which contains rotation transformation. Vector4 result Transformed Vector4 as an output parameter. | Improve this Doc View Source Transform(Vector4[], ref Matrix, Vector4[]) Apply transformation on all vectors within array of Vector4 by the specified Matrix and places the results in an another array. Declaration public static void Transform(Vector4[] sourceArray, ref Matrix matrix, Vector4[] destinationArray) Parameters Type Name Description Vector4 [] sourceArray Source array. Matrix matrix The transformation Matrix . Vector4 [] destinationArray Destination array. | Improve this Doc View Source Transform(Vector4[], ref Quaternion, Vector4[]) Apply transformation on all vectors within array of Vector4 by the specified Quaternion and places the results in an another array. Declaration public static void Transform(Vector4[] sourceArray, ref Quaternion rotation, Vector4[] destinationArray) Parameters Type Name Description Vector4 [] sourceArray Source array. Quaternion rotation The Quaternion which contains rotation transformation. Vector4 [] destinationArray Destination array. | Improve this Doc View Source Transform(Vector4[], Int32, ref Matrix, Vector4[], Int32, Int32) Apply transformation on vectors within array of Vector4 by the specified Matrix and places the results in an another array. Declaration public static void Transform(Vector4[] sourceArray, int sourceIndex, ref Matrix matrix, Vector4[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector4 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Matrix matrix The transformation Matrix . Vector4 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector4 should be written. System.Int32 length The number of vectors to be transformed. | Improve this Doc View Source Transform(Vector4[], Int32, ref Quaternion, Vector4[], Int32, Int32) Apply transformation on vectors within array of Vector4 by the specified Quaternion and places the results in an another array. Declaration public static void Transform(Vector4[] sourceArray, int sourceIndex, ref Quaternion rotation, Vector4[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector4 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Quaternion rotation The Quaternion which contains rotation transformation. Vector4 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector4 should be written. System.Int32 length The number of vectors to be transformed. Operators | Improve this Doc View Source Addition(Vector4, Vector4) Adds two vectors. Declaration public static Vector4 operator +(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the add sign. Vector4 value2 Source Vector4 on the right of the add sign. Returns Type Description Vector4 Sum of the vectors. | Improve this Doc View Source Division(Vector4, Vector4) Divides the components of a Vector4 by the components of another Vector4 . Declaration public static Vector4 operator /(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the div sign. Vector4 value2 Divisor Vector4 on the right of the div sign. Returns Type Description Vector4 The result of dividing the vectors. | Improve this Doc View Source Division(Vector4, Single) Divides the components of a Vector4 by a scalar. Declaration public static Vector4 operator /(Vector4 value1, float divider) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the div sign. System.Single divider Divisor scalar on the right of the div sign. Returns Type Description Vector4 The result of dividing a vector by a scalar. | Improve this Doc View Source Equality(Vector4, Vector4) Compares whether two Vector4 instances are equal. Declaration public static bool operator ==(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Vector4 instance on the left of the equal sign. Vector4 value2 Vector4 instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Vector4, Vector4) Compares whether two Vector4 instances are not equal. Declaration public static bool operator !=(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Vector4 instance on the left of the not equal sign. Vector4 value2 Vector4 instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Vector4, Vector4) Multiplies the components of two vectors by each other. Declaration public static Vector4 operator *(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the mul sign. Vector4 value2 Source Vector4 on the right of the mul sign. Returns Type Description Vector4 Result of the vector multiplication. | Improve this Doc View Source Multiply(Vector4, Single) Multiplies the components of vector by a scalar. Declaration public static Vector4 operator *(Vector4 value, float scaleFactor) Parameters Type Name Description Vector4 value Source Vector4 on the left of the mul sign. System.Single scaleFactor Scalar value on the right of the mul sign. Returns Type Description Vector4 Result of the vector multiplication with a scalar. | Improve this Doc View Source Multiply(Single, Vector4) Multiplies the components of vector by a scalar. Declaration public static Vector4 operator *(float scaleFactor, Vector4 value) Parameters Type Name Description System.Single scaleFactor Scalar value on the left of the mul sign. Vector4 value Source Vector4 on the right of the mul sign. Returns Type Description Vector4 Result of the vector multiplication with a scalar. | Improve this Doc View Source Subtraction(Vector4, Vector4) Subtracts a Vector4 from a Vector4 . Declaration public static Vector4 operator -(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 Source Vector4 on the left of the sub sign. Vector4 value2 Source Vector4 on the right of the sub sign. Returns Type Description Vector4 Result of the vector subtraction. | Improve this Doc View Source UnaryNegation(Vector4) Inverts values in the specified Vector4 . Declaration public static Vector4 operator -(Vector4 value) Parameters Type Name Description Vector4 value Source Vector4 on the right of the sub sign. Returns Type Description Vector4 Result of the inversion. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Vector3.html": {
    "href": "_api/Microsoft.Xna.Framework.Vector3.html",
    "title": "Struct Vector3 | MonoGame Documentation",
    "keywords": "Struct Vector3 Describes a 3D-vector. Implements System.IEquatable < Vector3 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [TypeConverter(typeof (Vector3TypeConverter))] [DataContract] public struct Vector3 : IEquatable<Vector3> Constructors | Improve this Doc View Source Vector3(Vector2, Single) Constructs a 3d vector with X, Y from Vector2 and Z from a scalar. Declaration public Vector3(Vector2 value, float z) Parameters Type Name Description Vector2 value The x and y coordinates in 3d-space. System.Single z The z coordinate in 3d-space. | Improve this Doc View Source Vector3(Single) Constructs a 3d vector with X, Y and Z set to the same value. Declaration public Vector3(float value) Parameters Type Name Description System.Single value The x, y and z coordinates in 3d-space. | Improve this Doc View Source Vector3(Single, Single, Single) Constructs a 3d vector with X, Y and Z from three values. Declaration public Vector3(float x, float y, float z) Parameters Type Name Description System.Single x The x coordinate in 3d-space. System.Single y The y coordinate in 3d-space. System.Single z The z coordinate in 3d-space. Fields | Improve this Doc View Source X The x coordinate of this Vector3 . Declaration [DataMember] public float X Field Value Type Description System.Single | Improve this Doc View Source Y The y coordinate of this Vector3 . Declaration [DataMember] public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The z coordinate of this Vector3 . Declaration [DataMember] public float Z Field Value Type Description System.Single Properties | Improve this Doc View Source Backward Returns a Vector3 with components 0, 0, 1. Declaration public static Vector3 Backward { get; } Property Value Type Description Vector3 | Improve this Doc View Source Down Returns a Vector3 with components 0, -1, 0. Declaration public static Vector3 Down { get; } Property Value Type Description Vector3 | Improve this Doc View Source Forward Returns a Vector3 with components 0, 0, -1. Declaration public static Vector3 Forward { get; } Property Value Type Description Vector3 | Improve this Doc View Source Left Returns a Vector3 with components -1, 0, 0. Declaration public static Vector3 Left { get; } Property Value Type Description Vector3 | Improve this Doc View Source One Returns a Vector3 with components 1, 1, 1. Declaration public static Vector3 One { get; } Property Value Type Description Vector3 | Improve this Doc View Source Right Returns a Vector3 with components 1, 0, 0. Declaration public static Vector3 Right { get; } Property Value Type Description Vector3 | Improve this Doc View Source UnitX Returns a Vector3 with components 1, 0, 0. Declaration public static Vector3 UnitX { get; } Property Value Type Description Vector3 | Improve this Doc View Source UnitY Returns a Vector3 with components 0, 1, 0. Declaration public static Vector3 UnitY { get; } Property Value Type Description Vector3 | Improve this Doc View Source UnitZ Returns a Vector3 with components 0, 0, 1. Declaration public static Vector3 UnitZ { get; } Property Value Type Description Vector3 | Improve this Doc View Source Up Returns a Vector3 with components 0, 1, 0. Declaration public static Vector3 Up { get; } Property Value Type Description Vector3 | Improve this Doc View Source Zero Returns a Vector3 with components 0, 0, 0. Declaration public static Vector3 Zero { get; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Add(Vector3, Vector3) Performs vector addition on value1 and value2 . Declaration public static Vector3 Add(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector to add. Vector3 value2 The second vector to add. Returns Type Description Vector3 The result of the vector addition. | Improve this Doc View Source Add(ref Vector3, ref Vector3, out Vector3) Performs vector addition on value1 and value2 , storing the result of the addition in result . Declaration public static void Add(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector to add. Vector3 value2 The second vector to add. Vector3 result The result of the vector addition. | Improve this Doc View Source Barycentric(Vector3, Vector3, Vector3, Single, Single) Creates a new Vector3 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle. Declaration public static Vector3 Barycentric(Vector3 value1, Vector3 value2, Vector3 value3, float amount1, float amount2) Parameters Type Name Description Vector3 value1 The first vector of 3d-triangle. Vector3 value2 The second vector of 3d-triangle. Vector3 value3 The third vector of 3d-triangle. System.Single amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 3d-triangle. System.Single amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 3d-triangle. Returns Type Description Vector3 The cartesian translation of barycentric coordinates. | Improve this Doc View Source Barycentric(ref Vector3, ref Vector3, ref Vector3, Single, Single, out Vector3) Creates a new Vector3 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle. Declaration public static void Barycentric(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, float amount1, float amount2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector of 3d-triangle. Vector3 value2 The second vector of 3d-triangle. Vector3 value3 The third vector of 3d-triangle. System.Single amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 3d-triangle. System.Single amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 3d-triangle. Vector3 result The cartesian translation of barycentric coordinates as an output parameter. | Improve this Doc View Source CatmullRom(Vector3, Vector3, Vector3, Vector3, Single) Creates a new Vector3 that contains CatmullRom interpolation of the specified vectors. Declaration public static Vector3 CatmullRom(Vector3 value1, Vector3 value2, Vector3 value3, Vector3 value4, float amount) Parameters Type Name Description Vector3 value1 The first vector in interpolation. Vector3 value2 The second vector in interpolation. Vector3 value3 The third vector in interpolation. Vector3 value4 The fourth vector in interpolation. System.Single amount Weighting factor. Returns Type Description Vector3 The result of CatmullRom interpolation. | Improve this Doc View Source CatmullRom(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3) Creates a new Vector3 that contains CatmullRom interpolation of the specified vectors. Declaration public static void CatmullRom(ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, ref Vector3 value4, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector in interpolation. Vector3 value2 The second vector in interpolation. Vector3 value3 The third vector in interpolation. Vector3 value4 The fourth vector in interpolation. System.Single amount Weighting factor. Vector3 result The result of CatmullRom interpolation as an output parameter. | Improve this Doc View Source Clamp(Vector3, Vector3, Vector3) Clamps the specified value within a range. Declaration public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 value1 The value to clamp. Vector3 min The min value. Vector3 max The max value. Returns Type Description Vector3 The clamped value. | Improve this Doc View Source Clamp(ref Vector3, ref Vector3, ref Vector3, out Vector3) Clamps the specified value within a range. Declaration public static void Clamp(ref Vector3 value1, ref Vector3 min, ref Vector3 max, out Vector3 result) Parameters Type Name Description Vector3 value1 The value to clamp. Vector3 min The min value. Vector3 max The max value. Vector3 result The clamped value as an output parameter. | Improve this Doc View Source Cross(Vector3, Vector3) Computes the cross product of two vectors. Declaration public static Vector3 Cross(Vector3 vector1, Vector3 vector2) Parameters Type Name Description Vector3 vector1 The first vector. Vector3 vector2 The second vector. Returns Type Description Vector3 The cross product of two vectors. | Improve this Doc View Source Cross(ref Vector3, ref Vector3, out Vector3) Computes the cross product of two vectors. Declaration public static void Cross(ref Vector3 vector1, ref Vector3 vector2, out Vector3 result) Parameters Type Name Description Vector3 vector1 The first vector. Vector3 vector2 The second vector. Vector3 result The cross product of two vectors as an output parameter. | Improve this Doc View Source Distance(Vector3, Vector3) Returns the distance between two vectors. Declaration public static float Distance(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description System.Single The distance between two vectors. | Improve this Doc View Source Distance(ref Vector3, ref Vector3, out Single) Returns the distance between two vectors. Declaration public static void Distance(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single result The distance between two vectors as an output parameter. | Improve this Doc View Source DistanceSquared(Vector3, Vector3) Returns the squared distance between two vectors. Declaration public static float DistanceSquared(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description System.Single The squared distance between two vectors. | Improve this Doc View Source DistanceSquared(ref Vector3, ref Vector3, out Single) Returns the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single result The squared distance between two vectors as an output parameter. | Improve this Doc View Source Divide(Vector3, Vector3) Divides the components of a Vector3 by the components of another Vector3 . Declaration public static Vector3 Divide(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Divisor Vector3 . Returns Type Description Vector3 The result of dividing the vectors. | Improve this Doc View Source Divide(Vector3, Single) Divides the components of a Vector3 by a scalar. Declaration public static Vector3 Divide(Vector3 value1, float divider) Parameters Type Name Description Vector3 value1 Source Vector3 . System.Single divider Divisor scalar. Returns Type Description Vector3 The result of dividing a vector by a scalar. | Improve this Doc View Source Divide(ref Vector3, ref Vector3, out Vector3) Divides the components of a Vector3 by the components of another Vector3 . Declaration public static void Divide(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Divisor Vector3 . Vector3 result The result of dividing the vectors as an output parameter. | Improve this Doc View Source Divide(ref Vector3, Single, out Vector3) Divides the components of a Vector3 by a scalar. Declaration public static void Divide(ref Vector3 value1, float divider, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3 . System.Single divider Divisor scalar. Vector3 result The result of dividing a vector by a scalar as an output parameter. | Improve this Doc View Source Dot(Vector3, Vector3) Returns a dot product of two vectors. Declaration public static float Dot(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description System.Single The dot product of two vectors. | Improve this Doc View Source Dot(ref Vector3, ref Vector3, out Single) Returns a dot product of two vectors. Declaration public static void Dot(ref Vector3 value1, ref Vector3 value2, out float result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single result The dot product of two vectors as an output parameter. | Improve this Doc View Source Equals(Vector3) Compares whether current instance is equal to specified Vector3 . Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other The Vector3 to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Vector3 . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Vector3 . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Hermite(Vector3, Vector3, Vector3, Vector3, Single) Creates a new Vector3 that contains hermite spline interpolation. Declaration public static Vector3 Hermite(Vector3 value1, Vector3 tangent1, Vector3 value2, Vector3 tangent2, float amount) Parameters Type Name Description Vector3 value1 The first position vector. Vector3 tangent1 The first tangent vector. Vector3 value2 The second position vector. Vector3 tangent2 The second tangent vector. System.Single amount Weighting factor. Returns Type Description Vector3 The hermite spline interpolation vector. | Improve this Doc View Source Hermite(ref Vector3, ref Vector3, ref Vector3, ref Vector3, Single, out Vector3) Creates a new Vector3 that contains hermite spline interpolation. Declaration public static void Hermite(ref Vector3 value1, ref Vector3 tangent1, ref Vector3 value2, ref Vector3 tangent2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first position vector. Vector3 tangent1 The first tangent vector. Vector3 value2 The second position vector. Vector3 tangent2 The second tangent vector. System.Single amount Weighting factor. Vector3 result The hermite spline interpolation vector as an output parameter. | Improve this Doc View Source Length() Returns the length of this Vector3 . Declaration public float Length() Returns Type Description System.Single The length of this Vector3 . | Improve this Doc View Source LengthSquared() Returns the squared length of this Vector3 . Declaration public float LengthSquared() Returns Type Description System.Single The squared length of this Vector3 . | Improve this Doc View Source Lerp(Vector3, Vector3, Single) Creates a new Vector3 that contains linear interpolation of the specified vectors. Declaration public static Vector3 Lerp(Vector3 value1, Vector3 value2, float amount) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector3 The result of linear interpolation of the specified vectors. | Improve this Doc View Source Lerp(ref Vector3, ref Vector3, Single, out Vector3) Creates a new Vector3 that contains linear interpolation of the specified vectors. Declaration public static void Lerp(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Vector3 result The result of linear interpolation of the specified vectors as an output parameter. | Improve this Doc View Source LerpPrecise(Vector3, Vector3, Single) Creates a new Vector3 that contains linear interpolation of the specified vectors. Uses LerpPrecise(Single, Single, Single) on MathHelper for the interpolation. Less efficient but more precise compared to Lerp(Vector3, Vector3, Single) . See remarks section of LerpPrecise(Single, Single, Single) on MathHelper for more info. Declaration public static Vector3 LerpPrecise(Vector3 value1, Vector3 value2, float amount) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector3 The result of linear interpolation of the specified vectors. | Improve this Doc View Source LerpPrecise(ref Vector3, ref Vector3, Single, out Vector3) Creates a new Vector3 that contains linear interpolation of the specified vectors. Uses LerpPrecise(Single, Single, Single) on MathHelper for the interpolation. Less efficient but more precise compared to Lerp(ref Vector3, ref Vector3, Single, out Vector3) . See remarks section of LerpPrecise(Single, Single, Single) on MathHelper for more info. Declaration public static void LerpPrecise(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Vector3 result The result of linear interpolation of the specified vectors as an output parameter. | Improve this Doc View Source Max(Vector3, Vector3) Creates a new Vector3 that contains a maximal values from the two vectors. Declaration public static Vector3 Max(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description Vector3 The Vector3 with maximal values from the two vectors. | Improve this Doc View Source Max(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains a maximal values from the two vectors. Declaration public static void Max(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Vector3 result The Vector3 with maximal values from the two vectors as an output parameter. | Improve this Doc View Source Min(Vector3, Vector3) Creates a new Vector3 that contains a minimal values from the two vectors. Declaration public static Vector3 Min(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Returns Type Description Vector3 The Vector3 with minimal values from the two vectors. | Improve this Doc View Source Min(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains a minimal values from the two vectors. Declaration public static void Min(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 The first vector. Vector3 value2 The second vector. Vector3 result The Vector3 with minimal values from the two vectors as an output parameter. | Improve this Doc View Source Multiply(Vector3, Vector3) Creates a new Vector3 that contains a multiplication of two vectors. Declaration public static Vector3 Multiply(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Source Vector3 . Returns Type Description Vector3 The result of the vector multiplication. | Improve this Doc View Source Multiply(Vector3, Single) Creates a new Vector3 that contains a multiplication of Vector3 and a scalar. Declaration public static Vector3 Multiply(Vector3 value1, float scaleFactor) Parameters Type Name Description Vector3 value1 Source Vector3 . System.Single scaleFactor Scalar value. Returns Type Description Vector3 The result of the vector multiplication with a scalar. | Improve this Doc View Source Multiply(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains a multiplication of two vectors. Declaration public static void Multiply(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Source Vector3 . Vector3 result The result of the vector multiplication as an output parameter. | Improve this Doc View Source Multiply(ref Vector3, Single, out Vector3) Creates a new Vector3 that contains a multiplication of Vector3 and a scalar. Declaration public static void Multiply(ref Vector3 value1, float scaleFactor, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3 . System.Single scaleFactor Scalar value. Vector3 result The result of the multiplication with a scalar as an output parameter. | Improve this Doc View Source Negate(Vector3) Creates a new Vector3 that contains the specified vector inversion. Declaration public static Vector3 Negate(Vector3 value) Parameters Type Name Description Vector3 value Source Vector3 . Returns Type Description Vector3 The result of the vector inversion. | Improve this Doc View Source Negate(ref Vector3, out Vector3) Creates a new Vector3 that contains the specified vector inversion. Declaration public static void Negate(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value Source Vector3 . Vector3 result The result of the vector inversion as an output parameter. | Improve this Doc View Source Normalize() Turns this Vector3 to a unit vector with the same direction. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector3) Creates a new Vector3 that contains a normalized values from another vector. Declaration public static Vector3 Normalize(Vector3 value) Parameters Type Name Description Vector3 value Source Vector3 . Returns Type Description Vector3 Unit vector. | Improve this Doc View Source Normalize(ref Vector3, out Vector3) Creates a new Vector3 that contains a normalized values from another vector. Declaration public static void Normalize(ref Vector3 value, out Vector3 result) Parameters Type Name Description Vector3 value Source Vector3 . Vector3 result Unit vector as an output parameter. | Improve this Doc View Source Reflect(Vector3, Vector3) Creates a new Vector3 that contains reflect vector of the given vector and normal. Declaration public static Vector3 Reflect(Vector3 vector, Vector3 normal) Parameters Type Name Description Vector3 vector Source Vector3 . Vector3 normal Reflection normal. Returns Type Description Vector3 Reflected vector. | Improve this Doc View Source Reflect(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains reflect vector of the given vector and normal. Declaration public static void Reflect(ref Vector3 vector, ref Vector3 normal, out Vector3 result) Parameters Type Name Description Vector3 vector Source Vector3 . Vector3 normal Reflection normal. Vector3 result Reflected vector as an output parameter. | Improve this Doc View Source SmoothStep(Vector3, Vector3, Single) Creates a new Vector3 that contains cubic interpolation of the specified vectors. Declaration public static Vector3 SmoothStep(Vector3 value1, Vector3 value2, float amount) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Source Vector3 . System.Single amount Weighting value. Returns Type Description Vector3 Cubic interpolation of the specified vectors. | Improve this Doc View Source SmoothStep(ref Vector3, ref Vector3, Single, out Vector3) Creates a new Vector3 that contains cubic interpolation of the specified vectors. Declaration public static void SmoothStep(ref Vector3 value1, ref Vector3 value2, float amount, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Source Vector3 . System.Single amount Weighting value. Vector3 result Cubic interpolation of the specified vectors as an output parameter. | Improve this Doc View Source Subtract(Vector3, Vector3) Creates a new Vector3 that contains subtraction of on Vector3 from a another. Declaration public static Vector3 Subtract(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Source Vector3 . Returns Type Description Vector3 The result of the vector subtraction. | Improve this Doc View Source Subtract(ref Vector3, ref Vector3, out Vector3) Creates a new Vector3 that contains subtraction of on Vector3 from a another. Declaration public static void Subtract(ref Vector3 value1, ref Vector3 value2, out Vector3 result) Parameters Type Name Description Vector3 value1 Source Vector3 . Vector3 value2 Source Vector3 . Vector3 result The result of the vector subtraction as an output parameter. | Improve this Doc View Source ToString() Returns a System.String representation of this Vector3 in the format: {X:[ X ] Y:[ Y ] Z:[ Z ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this Vector3 . Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Vector3, Matrix) Creates a new Vector3 that contains a transformation of 3d-vector by the specified Matrix . Declaration public static Vector3 Transform(Vector3 position, Matrix matrix) Parameters Type Name Description Vector3 position Source Vector3 . Matrix matrix The transformation Matrix . Returns Type Description Vector3 Transformed Vector3 . | Improve this Doc View Source Transform(Vector3, Quaternion) Creates a new Vector3 that contains a transformation of 3d-vector by the specified Quaternion , representing the rotation. Declaration public static Vector3 Transform(Vector3 value, Quaternion rotation) Parameters Type Name Description Vector3 value Source Vector3 . Quaternion rotation The Quaternion which contains rotation transformation. Returns Type Description Vector3 Transformed Vector3 . | Improve this Doc View Source Transform(ref Vector3, ref Matrix, out Vector3) Creates a new Vector3 that contains a transformation of 3d-vector by the specified Matrix . Declaration public static void Transform(ref Vector3 position, ref Matrix matrix, out Vector3 result) Parameters Type Name Description Vector3 position Source Vector3 . Matrix matrix The transformation Matrix . Vector3 result Transformed Vector3 as an output parameter. | Improve this Doc View Source Transform(ref Vector3, ref Quaternion, out Vector3) Creates a new Vector3 that contains a transformation of 3d-vector by the specified Quaternion , representing the rotation. Declaration public static void Transform(ref Vector3 value, ref Quaternion rotation, out Vector3 result) Parameters Type Name Description Vector3 value Source Vector3 . Quaternion rotation The Quaternion which contains rotation transformation. Vector3 result Transformed Vector3 as an output parameter. | Improve this Doc View Source Transform(Vector3[], ref Matrix, Vector3[]) Apply transformation on all vectors within array of Vector3 by the specified Matrix and places the results in an another array. Declaration public static void Transform(Vector3[] sourceArray, ref Matrix matrix, Vector3[] destinationArray) Parameters Type Name Description Vector3 [] sourceArray Source array. Matrix matrix The transformation Matrix . Vector3 [] destinationArray Destination array. | Improve this Doc View Source Transform(Vector3[], ref Quaternion, Vector3[]) Apply transformation on all vectors within array of Vector3 by the specified Quaternion and places the results in an another array. Declaration public static void Transform(Vector3[] sourceArray, ref Quaternion rotation, Vector3[] destinationArray) Parameters Type Name Description Vector3 [] sourceArray Source array. Quaternion rotation The Quaternion which contains rotation transformation. Vector3 [] destinationArray Destination array. | Improve this Doc View Source Transform(Vector3[], Int32, ref Matrix, Vector3[], Int32, Int32) Apply transformation on vectors within array of Vector3 by the specified Matrix and places the results in an another array. Declaration public static void Transform(Vector3[] sourceArray, int sourceIndex, ref Matrix matrix, Vector3[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector3 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Matrix matrix The transformation Matrix . Vector3 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector3 should be written. System.Int32 length The number of vectors to be transformed. | Improve this Doc View Source Transform(Vector3[], Int32, ref Quaternion, Vector3[], Int32, Int32) Apply transformation on vectors within array of Vector3 by the specified Quaternion and places the results in an another array. Declaration public static void Transform(Vector3[] sourceArray, int sourceIndex, ref Quaternion rotation, Vector3[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector3 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Quaternion rotation The Quaternion which contains rotation transformation. Vector3 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector3 should be written. System.Int32 length The number of vectors to be transformed. | Improve this Doc View Source TransformNormal(Vector3, Matrix) Creates a new Vector3 that contains a transformation of the specified normal by the specified Matrix . Declaration public static Vector3 TransformNormal(Vector3 normal, Matrix matrix) Parameters Type Name Description Vector3 normal Source Vector3 which represents a normal vector. Matrix matrix The transformation Matrix . Returns Type Description Vector3 Transformed normal. | Improve this Doc View Source TransformNormal(ref Vector3, ref Matrix, out Vector3) Creates a new Vector3 that contains a transformation of the specified normal by the specified Matrix . Declaration public static void TransformNormal(ref Vector3 normal, ref Matrix matrix, out Vector3 result) Parameters Type Name Description Vector3 normal Source Vector3 which represents a normal vector. Matrix matrix The transformation Matrix . Vector3 result Transformed normal as an output parameter. | Improve this Doc View Source TransformNormal(Vector3[], ref Matrix, Vector3[]) Apply transformation on all normals within array of Vector3 by the specified Matrix and places the results in an another array. Declaration public static void TransformNormal(Vector3[] sourceArray, ref Matrix matrix, Vector3[] destinationArray) Parameters Type Name Description Vector3 [] sourceArray Source array. Matrix matrix The transformation Matrix . Vector3 [] destinationArray Destination array. | Improve this Doc View Source TransformNormal(Vector3[], Int32, ref Matrix, Vector3[], Int32, Int32) Apply transformation on normals within array of Vector3 by the specified Matrix and places the results in an another array. Declaration public static void TransformNormal(Vector3[] sourceArray, int sourceIndex, ref Matrix matrix, Vector3[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector3 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Matrix matrix The transformation Matrix . Vector3 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector3 should be written. System.Int32 length The number of normals to be transformed. Operators | Improve this Doc View Source Addition(Vector3, Vector3) Adds two vectors. Declaration public static Vector3 operator +(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the add sign. Vector3 value2 Source Vector3 on the right of the add sign. Returns Type Description Vector3 Sum of the vectors. | Improve this Doc View Source Division(Vector3, Vector3) Divides the components of a Vector3 by the components of another Vector3 . Declaration public static Vector3 operator /(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the div sign. Vector3 value2 Divisor Vector3 on the right of the div sign. Returns Type Description Vector3 The result of dividing the vectors. | Improve this Doc View Source Division(Vector3, Single) Divides the components of a Vector3 by a scalar. Declaration public static Vector3 operator /(Vector3 value1, float divider) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the div sign. System.Single divider Divisor scalar on the right of the div sign. Returns Type Description Vector3 The result of dividing a vector by a scalar. | Improve this Doc View Source Equality(Vector3, Vector3) Compares whether two Vector3 instances are equal. Declaration public static bool operator ==(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Vector3 instance on the left of the equal sign. Vector3 value2 Vector3 instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Vector3, Vector3) Compares whether two Vector3 instances are not equal. Declaration public static bool operator !=(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Vector3 instance on the left of the not equal sign. Vector3 value2 Vector3 instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Vector3, Vector3) Multiplies the components of two vectors by each other. Declaration public static Vector3 operator *(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the mul sign. Vector3 value2 Source Vector3 on the right of the mul sign. Returns Type Description Vector3 Result of the vector multiplication. | Improve this Doc View Source Multiply(Vector3, Single) Multiplies the components of vector by a scalar. Declaration public static Vector3 operator *(Vector3 value, float scaleFactor) Parameters Type Name Description Vector3 value Source Vector3 on the left of the mul sign. System.Single scaleFactor Scalar value on the right of the mul sign. Returns Type Description Vector3 Result of the vector multiplication with a scalar. | Improve this Doc View Source Multiply(Single, Vector3) Multiplies the components of vector by a scalar. Declaration public static Vector3 operator *(float scaleFactor, Vector3 value) Parameters Type Name Description System.Single scaleFactor Scalar value on the left of the mul sign. Vector3 value Source Vector3 on the right of the mul sign. Returns Type Description Vector3 Result of the vector multiplication with a scalar. | Improve this Doc View Source Subtraction(Vector3, Vector3) Subtracts a Vector3 from a Vector3 . Declaration public static Vector3 operator -(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 Source Vector3 on the left of the sub sign. Vector3 value2 Source Vector3 on the right of the sub sign. Returns Type Description Vector3 Result of the vector subtraction. | Improve this Doc View Source UnaryNegation(Vector3) Inverts values in the specified Vector3 . Declaration public static Vector3 operator -(Vector3 value) Parameters Type Name Description Vector3 value Source Vector3 on the right of the sub sign. Returns Type Description Vector3 Result of the inversion. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Vector2.html": {
    "href": "_api/Microsoft.Xna.Framework.Vector2.html",
    "title": "Struct Vector2 | MonoGame Documentation",
    "keywords": "Struct Vector2 Describes a 2D-vector. Implements System.IEquatable < Vector2 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [TypeConverter(typeof (Vector2TypeConverter))] [DataContract] public struct Vector2 : IEquatable<Vector2> Constructors | Improve this Doc View Source Vector2(Single) Constructs a 2d vector with X and Y set to the same value. Declaration public Vector2(float value) Parameters Type Name Description System.Single value The x and y coordinates in 2d-space. | Improve this Doc View Source Vector2(Single, Single) Constructs a 2d vector with X and Y from two values. Declaration public Vector2(float x, float y) Parameters Type Name Description System.Single x The x coordinate in 2d-space. System.Single y The y coordinate in 2d-space. Fields | Improve this Doc View Source X The x coordinate of this Vector2 . Declaration [DataMember] public float X Field Value Type Description System.Single | Improve this Doc View Source Y The y coordinate of this Vector2 . Declaration [DataMember] public float Y Field Value Type Description System.Single Properties | Improve this Doc View Source One Returns a Vector2 with components 1, 1. Declaration public static Vector2 One { get; } Property Value Type Description Vector2 | Improve this Doc View Source UnitX Returns a Vector2 with components 1, 0. Declaration public static Vector2 UnitX { get; } Property Value Type Description Vector2 | Improve this Doc View Source UnitY Returns a Vector2 with components 0, 1. Declaration public static Vector2 UnitY { get; } Property Value Type Description Vector2 | Improve this Doc View Source Zero Returns a Vector2 with components 0, 0. Declaration public static Vector2 Zero { get; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Add(Vector2, Vector2) Performs vector addition on value1 and value2 . Declaration public static Vector2 Add(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector to add. Vector2 value2 The second vector to add. Returns Type Description Vector2 The result of the vector addition. | Improve this Doc View Source Add(ref Vector2, ref Vector2, out Vector2) Performs vector addition on value1 and value2 , storing the result of the addition in result . Declaration public static void Add(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector to add. Vector2 value2 The second vector to add. Vector2 result The result of the vector addition. | Improve this Doc View Source Barycentric(Vector2, Vector2, Vector2, Single, Single) Creates a new Vector2 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle. Declaration public static Vector2 Barycentric(Vector2 value1, Vector2 value2, Vector2 value3, float amount1, float amount2) Parameters Type Name Description Vector2 value1 The first vector of 2d-triangle. Vector2 value2 The second vector of 2d-triangle. Vector2 value3 The third vector of 2d-triangle. System.Single amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 2d-triangle. System.Single amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 2d-triangle. Returns Type Description Vector2 The cartesian translation of barycentric coordinates. | Improve this Doc View Source Barycentric(ref Vector2, ref Vector2, ref Vector2, Single, Single, out Vector2) Creates a new Vector2 that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle. Declaration public static void Barycentric(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, float amount1, float amount2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector of 2d-triangle. Vector2 value2 The second vector of 2d-triangle. Vector2 value3 The third vector of 2d-triangle. System.Single amount1 Barycentric scalar b2 which represents a weighting factor towards second vector of 2d-triangle. System.Single amount2 Barycentric scalar b3 which represents a weighting factor towards third vector of 2d-triangle. Vector2 result The cartesian translation of barycentric coordinates as an output parameter. | Improve this Doc View Source CatmullRom(Vector2, Vector2, Vector2, Vector2, Single) Creates a new Vector2 that contains CatmullRom interpolation of the specified vectors. Declaration public static Vector2 CatmullRom(Vector2 value1, Vector2 value2, Vector2 value3, Vector2 value4, float amount) Parameters Type Name Description Vector2 value1 The first vector in interpolation. Vector2 value2 The second vector in interpolation. Vector2 value3 The third vector in interpolation. Vector2 value4 The fourth vector in interpolation. System.Single amount Weighting factor. Returns Type Description Vector2 The result of CatmullRom interpolation. | Improve this Doc View Source CatmullRom(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2) Creates a new Vector2 that contains CatmullRom interpolation of the specified vectors. Declaration public static void CatmullRom(ref Vector2 value1, ref Vector2 value2, ref Vector2 value3, ref Vector2 value4, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector in interpolation. Vector2 value2 The second vector in interpolation. Vector2 value3 The third vector in interpolation. Vector2 value4 The fourth vector in interpolation. System.Single amount Weighting factor. Vector2 result The result of CatmullRom interpolation as an output parameter. | Improve this Doc View Source Clamp(Vector2, Vector2, Vector2) Clamps the specified value within a range. Declaration public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 value1 The value to clamp. Vector2 min The min value. Vector2 max The max value. Returns Type Description Vector2 The clamped value. | Improve this Doc View Source Clamp(ref Vector2, ref Vector2, ref Vector2, out Vector2) Clamps the specified value within a range. Declaration public static void Clamp(ref Vector2 value1, ref Vector2 min, ref Vector2 max, out Vector2 result) Parameters Type Name Description Vector2 value1 The value to clamp. Vector2 min The min value. Vector2 max The max value. Vector2 result The clamped value as an output parameter. | Improve this Doc View Source Distance(Vector2, Vector2) Returns the distance between two vectors. Declaration public static float Distance(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description System.Single The distance between two vectors. | Improve this Doc View Source Distance(ref Vector2, ref Vector2, out Single) Returns the distance between two vectors. Declaration public static void Distance(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single result The distance between two vectors as an output parameter. | Improve this Doc View Source DistanceSquared(Vector2, Vector2) Returns the squared distance between two vectors. Declaration public static float DistanceSquared(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description System.Single The squared distance between two vectors. | Improve this Doc View Source DistanceSquared(ref Vector2, ref Vector2, out Single) Returns the squared distance between two vectors. Declaration public static void DistanceSquared(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single result The squared distance between two vectors as an output parameter. | Improve this Doc View Source Divide(Vector2, Vector2) Divides the components of a Vector2 by the components of another Vector2 . Declaration public static Vector2 Divide(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Divisor Vector2 . Returns Type Description Vector2 The result of dividing the vectors. | Improve this Doc View Source Divide(Vector2, Single) Divides the components of a Vector2 by a scalar. Declaration public static Vector2 Divide(Vector2 value1, float divider) Parameters Type Name Description Vector2 value1 Source Vector2 . System.Single divider Divisor scalar. Returns Type Description Vector2 The result of dividing a vector by a scalar. | Improve this Doc View Source Divide(ref Vector2, ref Vector2, out Vector2) Divides the components of a Vector2 by the components of another Vector2 . Declaration public static void Divide(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Divisor Vector2 . Vector2 result The result of dividing the vectors as an output parameter. | Improve this Doc View Source Divide(ref Vector2, Single, out Vector2) Divides the components of a Vector2 by a scalar. Declaration public static void Divide(ref Vector2 value1, float divider, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2 . System.Single divider Divisor scalar. Vector2 result The result of dividing a vector by a scalar as an output parameter. | Improve this Doc View Source Dot(Vector2, Vector2) Returns a dot product of two vectors. Declaration public static float Dot(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description System.Single The dot product of two vectors. | Improve this Doc View Source Dot(ref Vector2, ref Vector2, out Single) Returns a dot product of two vectors. Declaration public static void Dot(ref Vector2 value1, ref Vector2 value2, out float result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single result The dot product of two vectors as an output parameter. | Improve this Doc View Source Equals(Vector2) Compares whether current instance is equal to specified Vector2 . Declaration public bool Equals(Vector2 other) Parameters Type Name Description Vector2 other The Vector2 to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Vector2 . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Vector2 . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Hermite(Vector2, Vector2, Vector2, Vector2, Single) Creates a new Vector2 that contains hermite spline interpolation. Declaration public static Vector2 Hermite(Vector2 value1, Vector2 tangent1, Vector2 value2, Vector2 tangent2, float amount) Parameters Type Name Description Vector2 value1 The first position vector. Vector2 tangent1 The first tangent vector. Vector2 value2 The second position vector. Vector2 tangent2 The second tangent vector. System.Single amount Weighting factor. Returns Type Description Vector2 The hermite spline interpolation vector. | Improve this Doc View Source Hermite(ref Vector2, ref Vector2, ref Vector2, ref Vector2, Single, out Vector2) Creates a new Vector2 that contains hermite spline interpolation. Declaration public static void Hermite(ref Vector2 value1, ref Vector2 tangent1, ref Vector2 value2, ref Vector2 tangent2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first position vector. Vector2 tangent1 The first tangent vector. Vector2 value2 The second position vector. Vector2 tangent2 The second tangent vector. System.Single amount Weighting factor. Vector2 result The hermite spline interpolation vector as an output parameter. | Improve this Doc View Source Length() Returns the length of this Vector2 . Declaration public float Length() Returns Type Description System.Single The length of this Vector2 . | Improve this Doc View Source LengthSquared() Returns the squared length of this Vector2 . Declaration public float LengthSquared() Returns Type Description System.Single The squared length of this Vector2 . | Improve this Doc View Source Lerp(Vector2, Vector2, Single) Creates a new Vector2 that contains linear interpolation of the specified vectors. Declaration public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector2 The result of linear interpolation of the specified vectors. | Improve this Doc View Source Lerp(ref Vector2, ref Vector2, Single, out Vector2) Creates a new Vector2 that contains linear interpolation of the specified vectors. Declaration public static void Lerp(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Vector2 result The result of linear interpolation of the specified vectors as an output parameter. | Improve this Doc View Source LerpPrecise(Vector2, Vector2, Single) Creates a new Vector2 that contains linear interpolation of the specified vectors. Uses LerpPrecise(Single, Single, Single) on MathHelper for the interpolation. Less efficient but more precise compared to Lerp(Vector2, Vector2, Single) . See remarks section of LerpPrecise(Single, Single, Single) on MathHelper for more info. Declaration public static Vector2 LerpPrecise(Vector2 value1, Vector2 value2, float amount) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Returns Type Description Vector2 The result of linear interpolation of the specified vectors. | Improve this Doc View Source LerpPrecise(ref Vector2, ref Vector2, Single, out Vector2) Creates a new Vector2 that contains linear interpolation of the specified vectors. Uses LerpPrecise(Single, Single, Single) on MathHelper for the interpolation. Less efficient but more precise compared to Lerp(ref Vector2, ref Vector2, Single, out Vector2) . See remarks section of LerpPrecise(Single, Single, Single) on MathHelper for more info. Declaration public static void LerpPrecise(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. System.Single amount Weighting value(between 0.0 and 1.0). Vector2 result The result of linear interpolation of the specified vectors as an output parameter. | Improve this Doc View Source Max(Vector2, Vector2) Creates a new Vector2 that contains a maximal values from the two vectors. Declaration public static Vector2 Max(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description Vector2 The Vector2 with maximal values from the two vectors. | Improve this Doc View Source Max(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains a maximal values from the two vectors. Declaration public static void Max(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Vector2 result The Vector2 with maximal values from the two vectors as an output parameter. | Improve this Doc View Source Min(Vector2, Vector2) Creates a new Vector2 that contains a minimal values from the two vectors. Declaration public static Vector2 Min(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description Vector2 The Vector2 with minimal values from the two vectors. | Improve this Doc View Source Min(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains a minimal values from the two vectors. Declaration public static void Min(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Vector2 result The Vector2 with minimal values from the two vectors as an output parameter. | Improve this Doc View Source Multiply(Vector2, Vector2) Creates a new Vector2 that contains a multiplication of two vectors. Declaration public static Vector2 Multiply(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Source Vector2 . Returns Type Description Vector2 The result of the vector multiplication. | Improve this Doc View Source Multiply(Vector2, Single) Creates a new Vector2 that contains a multiplication of Vector2 and a scalar. Declaration public static Vector2 Multiply(Vector2 value1, float scaleFactor) Parameters Type Name Description Vector2 value1 Source Vector2 . System.Single scaleFactor Scalar value. Returns Type Description Vector2 The result of the vector multiplication with a scalar. | Improve this Doc View Source Multiply(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains a multiplication of two vectors. Declaration public static void Multiply(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Source Vector2 . Vector2 result The result of the vector multiplication as an output parameter. | Improve this Doc View Source Multiply(ref Vector2, Single, out Vector2) Creates a new Vector2 that contains a multiplication of Vector2 and a scalar. Declaration public static void Multiply(ref Vector2 value1, float scaleFactor, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2 . System.Single scaleFactor Scalar value. Vector2 result The result of the multiplication with a scalar as an output parameter. | Improve this Doc View Source Negate(Vector2) Creates a new Vector2 that contains the specified vector inversion. Declaration public static Vector2 Negate(Vector2 value) Parameters Type Name Description Vector2 value Source Vector2 . Returns Type Description Vector2 The result of the vector inversion. | Improve this Doc View Source Negate(ref Vector2, out Vector2) Creates a new Vector2 that contains the specified vector inversion. Declaration public static void Negate(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value Source Vector2 . Vector2 result The result of the vector inversion as an output parameter. | Improve this Doc View Source Normalize() Turns this Vector2 to a unit vector with the same direction. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector2) Creates a new Vector2 that contains a normalized values from another vector. Declaration public static Vector2 Normalize(Vector2 value) Parameters Type Name Description Vector2 value Source Vector2 . Returns Type Description Vector2 Unit vector. | Improve this Doc View Source Normalize(ref Vector2, out Vector2) Creates a new Vector2 that contains a normalized values from another vector. Declaration public static void Normalize(ref Vector2 value, out Vector2 result) Parameters Type Name Description Vector2 value Source Vector2 . Vector2 result Unit vector as an output parameter. | Improve this Doc View Source Reflect(Vector2, Vector2) Creates a new Vector2 that contains reflect vector of the given vector and normal. Declaration public static Vector2 Reflect(Vector2 vector, Vector2 normal) Parameters Type Name Description Vector2 vector Source Vector2 . Vector2 normal Reflection normal. Returns Type Description Vector2 Reflected vector. | Improve this Doc View Source Reflect(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains reflect vector of the given vector and normal. Declaration public static void Reflect(ref Vector2 vector, ref Vector2 normal, out Vector2 result) Parameters Type Name Description Vector2 vector Source Vector2 . Vector2 normal Reflection normal. Vector2 result Reflected vector as an output parameter. | Improve this Doc View Source SmoothStep(Vector2, Vector2, Single) Creates a new Vector2 that contains cubic interpolation of the specified vectors. Declaration public static Vector2 SmoothStep(Vector2 value1, Vector2 value2, float amount) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Source Vector2 . System.Single amount Weighting value. Returns Type Description Vector2 Cubic interpolation of the specified vectors. | Improve this Doc View Source SmoothStep(ref Vector2, ref Vector2, Single, out Vector2) Creates a new Vector2 that contains cubic interpolation of the specified vectors. Declaration public static void SmoothStep(ref Vector2 value1, ref Vector2 value2, float amount, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Source Vector2 . System.Single amount Weighting value. Vector2 result Cubic interpolation of the specified vectors as an output parameter. | Improve this Doc View Source Subtract(Vector2, Vector2) Creates a new Vector2 that contains subtraction of on Vector2 from a another. Declaration public static Vector2 Subtract(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Source Vector2 . Returns Type Description Vector2 The result of the vector subtraction. | Improve this Doc View Source Subtract(ref Vector2, ref Vector2, out Vector2) Creates a new Vector2 that contains subtraction of on Vector2 from a another. Declaration public static void Subtract(ref Vector2 value1, ref Vector2 value2, out Vector2 result) Parameters Type Name Description Vector2 value1 Source Vector2 . Vector2 value2 Source Vector2 . Vector2 result The result of the vector subtraction as an output parameter. | Improve this Doc View Source ToPoint() Gets a Point representation for this object. Declaration public Point ToPoint() Returns Type Description Point A Point representation for this object. | Improve this Doc View Source ToString() Returns a System.String representation of this Vector2 in the format: {X:[ X ] Y:[ Y ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this Vector2 . Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Vector2, Matrix) Creates a new Vector2 that contains a transformation of 2d-vector by the specified Matrix . Declaration public static Vector2 Transform(Vector2 position, Matrix matrix) Parameters Type Name Description Vector2 position Source Vector2 . Matrix matrix The transformation Matrix . Returns Type Description Vector2 Transformed Vector2 . | Improve this Doc View Source Transform(Vector2, Quaternion) Creates a new Vector2 that contains a transformation of 2d-vector by the specified Quaternion , representing the rotation. Declaration public static Vector2 Transform(Vector2 value, Quaternion rotation) Parameters Type Name Description Vector2 value Source Vector2 . Quaternion rotation The Quaternion which contains rotation transformation. Returns Type Description Vector2 Transformed Vector2 . | Improve this Doc View Source Transform(ref Vector2, ref Matrix, out Vector2) Creates a new Vector2 that contains a transformation of 2d-vector by the specified Matrix . Declaration public static void Transform(ref Vector2 position, ref Matrix matrix, out Vector2 result) Parameters Type Name Description Vector2 position Source Vector2 . Matrix matrix The transformation Matrix . Vector2 result Transformed Vector2 as an output parameter. | Improve this Doc View Source Transform(ref Vector2, ref Quaternion, out Vector2) Creates a new Vector2 that contains a transformation of 2d-vector by the specified Quaternion , representing the rotation. Declaration public static void Transform(ref Vector2 value, ref Quaternion rotation, out Vector2 result) Parameters Type Name Description Vector2 value Source Vector2 . Quaternion rotation The Quaternion which contains rotation transformation. Vector2 result Transformed Vector2 as an output parameter. | Improve this Doc View Source Transform(Vector2[], ref Matrix, Vector2[]) Apply transformation on all vectors within array of Vector2 by the specified Matrix and places the results in an another array. Declaration public static void Transform(Vector2[] sourceArray, ref Matrix matrix, Vector2[] destinationArray) Parameters Type Name Description Vector2 [] sourceArray Source array. Matrix matrix The transformation Matrix . Vector2 [] destinationArray Destination array. | Improve this Doc View Source Transform(Vector2[], ref Quaternion, Vector2[]) Apply transformation on all vectors within array of Vector2 by the specified Quaternion and places the results in an another array. Declaration public static void Transform(Vector2[] sourceArray, ref Quaternion rotation, Vector2[] destinationArray) Parameters Type Name Description Vector2 [] sourceArray Source array. Quaternion rotation The Quaternion which contains rotation transformation. Vector2 [] destinationArray Destination array. | Improve this Doc View Source Transform(Vector2[], Int32, ref Matrix, Vector2[], Int32, Int32) Apply transformation on vectors within array of Vector2 by the specified Matrix and places the results in an another array. Declaration public static void Transform(Vector2[] sourceArray, int sourceIndex, ref Matrix matrix, Vector2[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector2 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Matrix matrix The transformation Matrix . Vector2 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector2 should be written. System.Int32 length The number of vectors to be transformed. | Improve this Doc View Source Transform(Vector2[], Int32, ref Quaternion, Vector2[], Int32, Int32) Apply transformation on vectors within array of Vector2 by the specified Quaternion and places the results in an another array. Declaration public static void Transform(Vector2[] sourceArray, int sourceIndex, ref Quaternion rotation, Vector2[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector2 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Quaternion rotation The Quaternion which contains rotation transformation. Vector2 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector2 should be written. System.Int32 length The number of vectors to be transformed. | Improve this Doc View Source TransformNormal(Vector2, Matrix) Creates a new Vector2 that contains a transformation of the specified normal by the specified Matrix . Declaration public static Vector2 TransformNormal(Vector2 normal, Matrix matrix) Parameters Type Name Description Vector2 normal Source Vector2 which represents a normal vector. Matrix matrix The transformation Matrix . Returns Type Description Vector2 Transformed normal. | Improve this Doc View Source TransformNormal(ref Vector2, ref Matrix, out Vector2) Creates a new Vector2 that contains a transformation of the specified normal by the specified Matrix . Declaration public static void TransformNormal(ref Vector2 normal, ref Matrix matrix, out Vector2 result) Parameters Type Name Description Vector2 normal Source Vector2 which represents a normal vector. Matrix matrix The transformation Matrix . Vector2 result Transformed normal as an output parameter. | Improve this Doc View Source TransformNormal(Vector2[], ref Matrix, Vector2[]) Apply transformation on all normals within array of Vector2 by the specified Matrix and places the results in an another array. Declaration public static void TransformNormal(Vector2[] sourceArray, ref Matrix matrix, Vector2[] destinationArray) Parameters Type Name Description Vector2 [] sourceArray Source array. Matrix matrix The transformation Matrix . Vector2 [] destinationArray Destination array. | Improve this Doc View Source TransformNormal(Vector2[], Int32, ref Matrix, Vector2[], Int32, Int32) Apply transformation on normals within array of Vector2 by the specified Matrix and places the results in an another array. Declaration public static void TransformNormal(Vector2[] sourceArray, int sourceIndex, ref Matrix matrix, Vector2[] destinationArray, int destinationIndex, int length) Parameters Type Name Description Vector2 [] sourceArray Source array. System.Int32 sourceIndex The starting index of transformation in the source array. Matrix matrix The transformation Matrix . Vector2 [] destinationArray Destination array. System.Int32 destinationIndex The starting index in the destination array, where the first Vector2 should be written. System.Int32 length The number of normals to be transformed. Operators | Improve this Doc View Source Addition(Vector2, Vector2) Adds two vectors. Declaration public static Vector2 operator +(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the add sign. Vector2 value2 Source Vector2 on the right of the add sign. Returns Type Description Vector2 Sum of the vectors. | Improve this Doc View Source Division(Vector2, Vector2) Divides the components of a Vector2 by the components of another Vector2 . Declaration public static Vector2 operator /(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the div sign. Vector2 value2 Divisor Vector2 on the right of the div sign. Returns Type Description Vector2 The result of dividing the vectors. | Improve this Doc View Source Division(Vector2, Single) Divides the components of a Vector2 by a scalar. Declaration public static Vector2 operator /(Vector2 value1, float divider) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the div sign. System.Single divider Divisor scalar on the right of the div sign. Returns Type Description Vector2 The result of dividing a vector by a scalar. | Improve this Doc View Source Equality(Vector2, Vector2) Compares whether two Vector2 instances are equal. Declaration public static bool operator ==(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Vector2 instance on the left of the equal sign. Vector2 value2 Vector2 instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Vector2, Vector2) Compares whether two Vector2 instances are not equal. Declaration public static bool operator !=(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Vector2 instance on the left of the not equal sign. Vector2 value2 Vector2 instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Vector2, Vector2) Multiplies the components of two vectors by each other. Declaration public static Vector2 operator *(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the mul sign. Vector2 value2 Source Vector2 on the right of the mul sign. Returns Type Description Vector2 Result of the vector multiplication. | Improve this Doc View Source Multiply(Vector2, Single) Multiplies the components of vector by a scalar. Declaration public static Vector2 operator *(Vector2 value, float scaleFactor) Parameters Type Name Description Vector2 value Source Vector2 on the left of the mul sign. System.Single scaleFactor Scalar value on the right of the mul sign. Returns Type Description Vector2 Result of the vector multiplication with a scalar. | Improve this Doc View Source Multiply(Single, Vector2) Multiplies the components of vector by a scalar. Declaration public static Vector2 operator *(float scaleFactor, Vector2 value) Parameters Type Name Description System.Single scaleFactor Scalar value on the left of the mul sign. Vector2 value Source Vector2 on the right of the mul sign. Returns Type Description Vector2 Result of the vector multiplication with a scalar. | Improve this Doc View Source Subtraction(Vector2, Vector2) Subtracts a Vector2 from a Vector2 . Declaration public static Vector2 operator -(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 Source Vector2 on the left of the sub sign. Vector2 value2 Source Vector2 on the right of the sub sign. Returns Type Description Vector2 Result of the vector subtraction. | Improve this Doc View Source UnaryNegation(Vector2) Inverts values in the specified Vector2 . Declaration public static Vector2 operator -(Vector2 value) Parameters Type Name Description Vector2 value Source Vector2 on the right of the sub sign. Returns Type Description Vector2 Result of the inversion. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.TitleContainer.html": {
    "href": "_api/Microsoft.Xna.Framework.TitleContainer.html",
    "title": "Class TitleContainer | MonoGame Documentation",
    "keywords": "Class TitleContainer Inheritance System.Object TitleContainer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public static class TitleContainer Methods | Improve this Doc View Source OpenStream(String) Returns an open stream to an exsiting file in the title storage area. Declaration public static Stream OpenStream(string name) Parameters Type Name Description System.String name The filepath relative to the title storage area. Returns Type Description System.IO.Stream A open stream or null if the file is not found."
  },
  "_api/Microsoft.Xna.Framework.MathHelper.html": {
    "href": "_api/Microsoft.Xna.Framework.MathHelper.html",
    "title": "Class MathHelper | MonoGame Documentation",
    "keywords": "Class MathHelper Contains commonly used precalculated values and mathematical operations. Inheritance System.Object MathHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public static class MathHelper Fields | Improve this Doc View Source E Represents the mathematical constant e(2.71828175). Declaration public const float E = 2.71828175F Field Value Type Description System.Single | Improve this Doc View Source Log10E Represents the log base ten of e(0.4342945). Declaration public const float Log10E = 0.4342945F Field Value Type Description System.Single | Improve this Doc View Source Log2E Represents the log base two of e(1.442695). Declaration public const float Log2E = 1.442695F Field Value Type Description System.Single | Improve this Doc View Source Pi Represents the value of pi(3.14159274). Declaration public const float Pi = 3.14159274F Field Value Type Description System.Single | Improve this Doc View Source PiOver2 Represents the value of pi divided by two(1.57079637). Declaration public const float PiOver2 = 1.57079637F Field Value Type Description System.Single | Improve this Doc View Source PiOver4 Represents the value of pi divided by four(0.7853982). Declaration public const float PiOver4 = 0.7853982F Field Value Type Description System.Single | Improve this Doc View Source TwoPi Represents the value of pi times two(6.28318548). Declaration public const float TwoPi = 6.28318548F Field Value Type Description System.Single Methods | Improve this Doc View Source Barycentric(Single, Single, Single, Single, Single) Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates. Declaration public static float Barycentric(float value1, float value2, float value3, float amount1, float amount2) Parameters Type Name Description System.Single value1 The coordinate on one axis of vertex 1 of the defining triangle. System.Single value2 The coordinate on the same axis of vertex 2 of the defining triangle. System.Single value3 The coordinate on the same axis of vertex 3 of the defining triangle. System.Single amount1 The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2. System.Single amount2 The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3. Returns Type Description System.Single Cartesian coordinate of the specified point with respect to the axis being used. | Improve this Doc View Source CatmullRom(Single, Single, Single, Single, Single) Performs a Catmull-Rom interpolation using the specified positions. Declaration public static float CatmullRom(float value1, float value2, float value3, float value4, float amount) Parameters Type Name Description System.Single value1 The first position in the interpolation. System.Single value2 The second position in the interpolation. System.Single value3 The third position in the interpolation. System.Single value4 The fourth position in the interpolation. System.Single amount Weighting factor. Returns Type Description System.Single A position that is the result of the Catmull-Rom interpolation. | Improve this Doc View Source Clamp(Int32, Int32, Int32) Restricts a value to be within a specified range. Declaration public static int Clamp(int value, int min, int max) Parameters Type Name Description System.Int32 value The value to clamp. System.Int32 min The minimum value. If value is less than min , min will be returned. System.Int32 max The maximum value. If value is greater than max , max will be returned. Returns Type Description System.Int32 The clamped value. | Improve this Doc View Source Clamp(Single, Single, Single) Restricts a value to be within a specified range. Declaration public static float Clamp(float value, float min, float max) Parameters Type Name Description System.Single value The value to clamp. System.Single min The minimum value. If value is less than min , min will be returned. System.Single max The maximum value. If value is greater than max , max will be returned. Returns Type Description System.Single The clamped value. | Improve this Doc View Source Distance(Single, Single) Calculates the absolute value of the difference of two values. Declaration public static float Distance(float value1, float value2) Parameters Type Name Description System.Single value1 Source value. System.Single value2 Source value. Returns Type Description System.Single Distance between the two values. | Improve this Doc View Source Hermite(Single, Single, Single, Single, Single) Performs a Hermite spline interpolation. Declaration public static float Hermite(float value1, float tangent1, float value2, float tangent2, float amount) Parameters Type Name Description System.Single value1 Source position. System.Single tangent1 Source tangent. System.Single value2 Source position. System.Single tangent2 Source tangent. System.Single amount Weighting factor. Returns Type Description System.Single The result of the Hermite spline interpolation. | Improve this Doc View Source IsPowerOfTwo(Int32) Determines if value is powered by two. Declaration public static bool IsPowerOfTwo(int value) Parameters Type Name Description System.Int32 value A value. Returns Type Description System.Boolean true if value is powered by two; otherwise false . | Improve this Doc View Source Lerp(Single, Single, Single) Linearly interpolates between two values. Declaration public static float Lerp(float value1, float value2, float amount) Parameters Type Name Description System.Single value1 Source value. System.Single value2 Destination value. System.Single amount Value between 0 and 1 indicating the weight of value2. Returns Type Description System.Single Interpolated value. Remarks This method performs the linear interpolation based on the following formula: value1 + (value2 - value1) * amount . Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned. See LerpPrecise(Single, Single, Single) for a less efficient version with more precision around edge cases. | Improve this Doc View Source LerpPrecise(Single, Single, Single) Linearly interpolates between two values. This method is a less efficient, more precise version of Lerp(Single, Single, Single) . See remarks for more info. Declaration public static float LerpPrecise(float value1, float value2, float amount) Parameters Type Name Description System.Single value1 Source value. System.Single value2 Destination value. System.Single amount Value between 0 and 1 indicating the weight of value2. Returns Type Description System.Single Interpolated value. Remarks This method performs the linear interpolation based on the following formula: ((1 - amount) * value1) + (value2 * amount) . Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned. This method does not have the floating point precision issue that Lerp(Single, Single, Single) has. i.e. If there is a big gap between value1 and value2 in magnitude (e.g. value1=10000000000000000, value2=1), right at the edge of the interpolation range (amount=1), Lerp(Single, Single, Single) will return 0 (whereas it should return 1). This also holds for value1=10^17, value2=10; value1=10^18,value2=10^2... so on. For an in depth explanation of the issue, see below references: Relevant Wikipedia Article: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support Relevant StackOverflow Answer: http://stackoverflow.com/questions/4353525/floating-point-linear-interpolation#answer-23716956 | Improve this Doc View Source Max(Int32, Int32) Returns the greater of two values. Declaration public static int Max(int value1, int value2) Parameters Type Name Description System.Int32 value1 Source value. System.Int32 value2 Source value. Returns Type Description System.Int32 The greater value. | Improve this Doc View Source Max(Single, Single) Returns the greater of two values. Declaration public static float Max(float value1, float value2) Parameters Type Name Description System.Single value1 Source value. System.Single value2 Source value. Returns Type Description System.Single The greater value. | Improve this Doc View Source Min(Int32, Int32) Returns the lesser of two values. Declaration public static int Min(int value1, int value2) Parameters Type Name Description System.Int32 value1 Source value. System.Int32 value2 Source value. Returns Type Description System.Int32 The lesser value. | Improve this Doc View Source Min(Single, Single) Returns the lesser of two values. Declaration public static float Min(float value1, float value2) Parameters Type Name Description System.Single value1 Source value. System.Single value2 Source value. Returns Type Description System.Single The lesser value. | Improve this Doc View Source SmoothStep(Single, Single, Single) Interpolates between two values using a cubic equation. Declaration public static float SmoothStep(float value1, float value2, float amount) Parameters Type Name Description System.Single value1 Source value. System.Single value2 Source value. System.Single amount Weighting value. Returns Type Description System.Single Interpolated value. | Improve this Doc View Source ToDegrees(Single) Converts radians to degrees. Declaration public static float ToDegrees(float radians) Parameters Type Name Description System.Single radians The angle in radians. Returns Type Description System.Single The angle in degrees. Remarks This method uses double precission internally, though it returns single float Factor = 180 / pi | Improve this Doc View Source ToRadians(Single) Converts degrees to radians. Declaration public static float ToRadians(float degrees) Parameters Type Name Description System.Single degrees The angle in degrees. Returns Type Description System.Single The angle in radians. Remarks This method uses double precission internally, though it returns single float Factor = pi / 180 | Improve this Doc View Source WrapAngle(Single) Reduces a given angle to a value between π and -π. Declaration public static float WrapAngle(float angle) Parameters Type Name Description System.Single angle The angle to reduce, in radians. Returns Type Description System.Single The new angle, in radians."
  },
  "_api/Microsoft.Xna.Framework.LaunchParameters.html": {
    "href": "_api/Microsoft.Xna.Framework.LaunchParameters.html",
    "title": "Class LaunchParameters | MonoGame Documentation",
    "keywords": "Class LaunchParameters Inheritance System.Object System.Collections.Generic.Dictionary < System.String , System.String > LaunchParameters Implements System.Collections.Generic.IDictionary < System.String , System.String > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , System.String >> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , System.String >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.String >> System.Collections.IEnumerable System.Runtime.Serialization.ISerializable System.Runtime.Serialization.IDeserializationCallback Inherited Members System.Collections.Generic.Dictionary<System.String, System.String>.Add(System.String, System.String) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.String>) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.String>) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.String>) System.Collections.Generic.Dictionary<System.String, System.String>.Clear() System.Collections.Generic.Dictionary<System.String, System.String>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, System.String>.ContainsValue(System.String) System.Collections.Generic.Dictionary<System.String, System.String>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.String>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Collections.Generic.Dictionary<System.String, System.String>.OnDeserialization(System.Object) System.Collections.Generic.Dictionary<System.String, System.String>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, System.String>.TryGetValue(System.String, System.String) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.String>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, System.String>.Comparer System.Collections.Generic.Dictionary<System.String, System.String>.Count System.Collections.Generic.Dictionary<System.String, System.String>.Keys System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.IDictionary<System.String, System.String>.Keys System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.Keys System.Collections.Generic.Dictionary<System.String, System.String>.Values System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.IDictionary<System.String, System.String>.Values System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.Values System.Collections.Generic.Dictionary<System.String, System.String>.Item[System.String] System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, System.String>.System.Collections.IDictionary.Item[System.Object] System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class LaunchParameters : Dictionary<string, string>, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IDictionary, ICollection, IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, ISerializable, IDeserializationCallback Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Runtime.Serialization.ISerializable System.Runtime.Serialization.IDeserializationCallback"
  },
  "_api/Microsoft.Xna.Framework.IUpdateable.html": {
    "href": "_api/Microsoft.Xna.Framework.IUpdateable.html",
    "title": "Interface IUpdateable | MonoGame Documentation",
    "keywords": "Interface IUpdateable Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public interface IUpdateable Properties | Improve this Doc View Source Enabled Declaration bool Enabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UpdateOrder Declaration int UpdateOrder { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Update(GameTime) Declaration void Update(GameTime gameTime) Parameters Type Name Description GameTime gameTime Events | Improve this Doc View Source EnabledChanged Declaration event EventHandler<EventArgs> EnabledChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source UpdateOrderChanged Declaration event EventHandler<EventArgs> UpdateOrderChanged Event Type Type Description System.EventHandler < System.EventArgs >"
  },
  "_api/Microsoft.Xna.Framework.Input.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.html",
    "title": "Namespace Microsoft.Xna.Framework.Input | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Input Classes GamePad Supports querying the game controllers and setting the vibration motors. Joystick Allows interaction with joysticks. Unlike GamePad the number of Buttons/Axes/DPads is not limited. Keyboard Allows getting keystrokes from keyboard. Mouse Allows reading position and button click information from mouse. MouseCursor Describes a mouse cursor. Structs GamePadButtons A struct that represents the current button states for the controller. GamePadCapabilities A stuct that represents the controller capabilities. GamePadDPad GamePadState Represents specific information about the state of the controller, including the current state of buttons and sticks. This is implemented as a partial struct to allow for individual platforms to offer additional data without separate state queries to GamePad. GamePadThumbSticks A struct that represents the current stick (thumbstick) states for the controller. GamePadTriggers A struct that countains information on the left and the right trigger buttons. JoystickCapabilities Describes joystick capabilities. JoystickHat Describes joystick hat state. JoystickState Describes current joystick state. KeyboardState Holds the state of keystrokes by a keyboard. MouseState Represents a mouse state with cursor position and button press information. Enums Buttons Defines the buttons on gamepad. ButtonState Defines a button state for buttons of mouse, gamepad or joystick. GamePadDeadZone Specifies a type of dead zone processing to apply to Xbox 360 Controller analog sticks when calling GetState. GamePadType Defines a type of gamepad. Keys Defines the keys on a keyboard. KeyState Identifies the state of a keyboard key."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadState.html",
    "title": "Struct GamePadState | MonoGame Documentation",
    "keywords": "Struct GamePadState Represents specific information about the state of the controller, including the current state of buttons and sticks. This is implemented as a partial struct to allow for individual platforms to offer additional data without separate state queries to GamePad. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct GamePadState Constructors | Improve this Doc View Source GamePadState(GamePadThumbSticks, GamePadTriggers, GamePadButtons, GamePadDPad) Initializes a new instance of the GamePadState struct using the specified GamePadThumbSticks, GamePadTriggers, GamePadButtons, and GamePadDPad. Declaration public GamePadState(GamePadThumbSticks thumbSticks, GamePadTriggers triggers, GamePadButtons buttons, GamePadDPad dPad) Parameters Type Name Description GamePadThumbSticks thumbSticks Initial thumbstick state. GamePadTriggers triggers Initial trigger state.. GamePadButtons buttons Initial button state. GamePadDPad dPad Initial directional pad state. | Improve this Doc View Source GamePadState(Vector2, Vector2, Single, Single, Buttons) Initializes a new instance of the GamePadState struct. using the specified stick, trigger, and button values. Declaration public GamePadState(Vector2 leftThumbStick, Vector2 rightThumbStick, float leftTrigger, float rightTrigger, Buttons buttons) Parameters Type Name Description Vector2 leftThumbStick Left stick value. Each axis is clamped between −1.0 and 1.0. Vector2 rightThumbStick Right stick value. Each axis is clamped between −1.0 and 1.0. System.Single leftTrigger Left trigger value. This value is clamped between 0.0 and 1.0. System.Single rightTrigger Right trigger value. This value is clamped between 0.0 and 1.0. Buttons buttons Array or parameter list of Buttons to initialize as pressed. Fields | Improve this Doc View Source Default The default initialized gamepad state. Declaration public static readonly GamePadState Default Field Value Type Description GamePadState Properties | Improve this Doc View Source Buttons Gets a structure that identifies what buttons on the controller are pressed. Declaration public GamePadButtons Buttons { get; } Property Value Type Description GamePadButtons The buttons structure. | Improve this Doc View Source DPad Gets a structure that identifies what directions of the directional pad on the controller are pressed. Declaration public GamePadDPad DPad { get; } Property Value Type Description GamePadDPad The directional pad structure. | Improve this Doc View Source IsConnected Gets a value indicating if the controller is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean true if it is connected; otherwise, false . | Improve this Doc View Source PacketNumber Gets the packet number associated with this state. Declaration public int PacketNumber { get; } Property Value Type Description System.Int32 The packet number. | Improve this Doc View Source ThumbSticks Gets a structure that indicates the position of the controller sticks (thumbsticks). Declaration public GamePadThumbSticks ThumbSticks { get; } Property Value Type Description GamePadThumbSticks The thumbsticks position. | Improve this Doc View Source Triggers Gets a structure that identifies the position of triggers on the controller. Declaration public GamePadTriggers Triggers { get; } Property Value Type Description GamePadTriggers Positions of the triggers. Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to the current GamePadState . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current GamePadState . Returns Type Description System.Boolean true if the specified System.Object is equal to the current GamePadState ; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a GamePadState object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source IsButtonDown(Buttons) Determines whether specified input device buttons are pressed in this GamePadState. Declaration public bool IsButtonDown(Buttons button) Parameters Type Name Description Buttons button Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation. Returns Type Description System.Boolean true , if button was pressed, false otherwise. | Improve this Doc View Source IsButtonUp(Buttons) Determines whether specified input device buttons are released (not pressed) in this GamePadState. Declaration public bool IsButtonUp(Buttons button) Parameters Type Name Description Buttons button Buttons to query. Specify a single button, or combine multiple buttons using a bitwise OR operation. Returns Type Description System.Boolean true , if button was released (not pressed), false otherwise. | Improve this Doc View Source ToString() Returns a System.String that represents the current GamePadState . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current GamePadState . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(GamePadState, GamePadState) Determines whether a specified instance of GamePadState is equal to another specified GamePadState . Declaration public static bool operator ==(GamePadState left, GamePadState right) Parameters Type Name Description GamePadState left The first GamePadState to compare. GamePadState right The second GamePadState to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(GamePadState, GamePadState) Determines whether a specified instance of GamePadState is not equal to another specified GamePadState . Declaration public static bool operator !=(GamePadState left, GamePadState right) Parameters Type Name Description GamePadState left The first GamePadState to compare. GamePadState right The second GamePadState to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false ."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadDPad.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadDPad.html",
    "title": "Struct GamePadDPad | MonoGame Documentation",
    "keywords": "Struct GamePadDPad Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct GamePadDPad Constructors | Improve this Doc View Source GamePadDPad(ButtonState, ButtonState, ButtonState, ButtonState) Initializes a new instance of the GamePadDPad struct. Declaration public GamePadDPad(ButtonState upValue, ButtonState downValue, ButtonState leftValue, ButtonState rightValue) Parameters Type Name Description ButtonState upValue Current state of directional pad up. ButtonState downValue Current state of directional pad down. ButtonState leftValue Current state of directional pad left. ButtonState rightValue Current state of directional pad right. Properties | Improve this Doc View Source Down Gets a value indicating wethever down is pressed on the directional pad. Declaration public ButtonState Down { get; } Property Value Type Description ButtonState Pressed if the down button is pressed; otherwise, Released . | Improve this Doc View Source Left Gets a value indicating wethever left is pressed on the directional pad. Declaration public ButtonState Left { get; } Property Value Type Description ButtonState Pressed if the left button is pressed; otherwise, Released . | Improve this Doc View Source Right Gets a value indicating wethever right is pressed on the directional pad. Declaration public ButtonState Right { get; } Property Value Type Description ButtonState Pressed if the right button is pressed; otherwise, Released . | Improve this Doc View Source Up Gets a value indicating wethever up is pressed on the directional pad. Declaration public ButtonState Up { get; } Property Value Type Description ButtonState Pressed if the up button is pressed; otherwise, Released . Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An object to compare to this instance. Returns Type Description System.Boolean true if obj is a GamePadDPad and has the same value as this instance; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a GamePadDPad object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current GamePadDPad in a format of 0000 where each number represents a boolean value of each respecting object property: Left, Up, Right, Down. Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current GamePadDPad . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(GamePadDPad, GamePadDPad) Determines whether two specified instances of GamePadDPad are equal. Declaration public static bool operator ==(GamePadDPad left, GamePadDPad right) Parameters Type Name Description GamePadDPad left The first object to compare. GamePadDPad right The second object to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false. | Improve this Doc View Source Inequality(GamePadDPad, GamePadDPad) Determines whether two specified instances of GamePadDPad are not equal. Declaration public static bool operator !=(GamePadDPad left, GamePadDPad right) Parameters Type Name Description GamePadDPad left The first object to compare. GamePadDPad right The second object to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadDeadZone.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadDeadZone.html",
    "title": "Enum GamePadDeadZone | MonoGame Documentation",
    "keywords": "Enum GamePadDeadZone Specifies a type of dead zone processing to apply to Xbox 360 Controller analog sticks when calling GetState. Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public enum GamePadDeadZone Fields Name Description Circular The combined X and Y position of each stick is compared to the dead zone. This provides better control than IndependentAxes when the stick is used as a two-dimensional control surface, such as when controlling a character's view in a first-person game. IndependentAxes The X and Y positions of each stick are compared against the dead zone independently. This setting is the default when calling GetState. None The values of each stick are not processed and are returned by GetState as \"raw\" values. This is best if you intend to implement your own dead zone processing."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadCapabilities.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadCapabilities.html",
    "title": "Struct GamePadCapabilities | MonoGame Documentation",
    "keywords": "Struct GamePadCapabilities A stuct that represents the controller capabilities. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct GamePadCapabilities Properties | Improve this Doc View Source DisplayName Gets the gamepad display name. This property is not available in XNA. Declaration public string DisplayName { get; } Property Value Type Description System.String String representing the display name of the gamepad. | Improve this Doc View Source GamePadType Gets the type of the controller. Declaration public GamePadType GamePadType { get; } Property Value Type Description GamePadType A GamePadType representing the controller type.. | Improve this Doc View Source HasAButton Gets a value indicating whether the controller has the button A. Declaration public bool HasAButton { get; } Property Value Type Description System.Boolean true if it has the button A; otherwise, false . | Improve this Doc View Source HasBackButton Gets a value indicating whether the controller has the button Back. Declaration public bool HasBackButton { get; } Property Value Type Description System.Boolean true if it has the button Back; otherwise, false . | Improve this Doc View Source HasBButton Gets a value indicating whether the controller has the button B. Declaration public bool HasBButton { get; } Property Value Type Description System.Boolean true if it has the button B; otherwise, false . | Improve this Doc View Source HasBigButton Gets a value indicating whether the controller has the guide button. Declaration public bool HasBigButton { get; } Property Value Type Description System.Boolean true if it has the guide button; otherwise, false . | Improve this Doc View Source HasDPadDownButton Gets a value indicating whether the controller has the directional pad down button. Declaration public bool HasDPadDownButton { get; } Property Value Type Description System.Boolean true if it has the directional pad down button; otherwise, false . | Improve this Doc View Source HasDPadLeftButton Gets a value indicating whether the controller has the directional pad left button. Declaration public bool HasDPadLeftButton { get; } Property Value Type Description System.Boolean true if it has the directional pad left button; otherwise, false . | Improve this Doc View Source HasDPadRightButton Gets a value indicating whether the controller has the directional pad right button. Declaration public bool HasDPadRightButton { get; } Property Value Type Description System.Boolean true if it has the directional pad right button; otherwise, false . | Improve this Doc View Source HasDPadUpButton Gets a value indicating whether the controller has the directional pad up button. Declaration public bool HasDPadUpButton { get; } Property Value Type Description System.Boolean true if it has the directional pad up button; otherwise, false . | Improve this Doc View Source HasLeftShoulderButton Gets a value indicating whether the controller has the left shoulder button. Declaration public bool HasLeftShoulderButton { get; } Property Value Type Description System.Boolean true if it has the left shoulder button; otherwise, false . | Improve this Doc View Source HasLeftStickButton Gets a value indicating whether the controller has the left stick button. Declaration public bool HasLeftStickButton { get; } Property Value Type Description System.Boolean true if it has the left stick button; otherwise, false . | Improve this Doc View Source HasLeftTrigger Gets a value indicating whether the controller has the left trigger button. Declaration public bool HasLeftTrigger { get; } Property Value Type Description System.Boolean true if it has the left trigger button; otherwise, false . | Improve this Doc View Source HasLeftVibrationMotor Gets a value indicating whether the controller has the left vibration motor. Declaration public bool HasLeftVibrationMotor { get; } Property Value Type Description System.Boolean true if it has the left vibration motor; otherwise, false . | Improve this Doc View Source HasLeftXThumbStick Gets a value indicating whether the controller has X axis for the left stick (thumbstick) button. Declaration public bool HasLeftXThumbStick { get; } Property Value Type Description System.Boolean true if it has X axis for the left stick (thumbstick) button; otherwise, false . | Improve this Doc View Source HasLeftYThumbStick Gets a value indicating whether the controller has Y axis for the left stick (thumbstick) button. Declaration public bool HasLeftYThumbStick { get; } Property Value Type Description System.Boolean true if it has Y axis for the left stick (thumbstick) button; otherwise, false . | Improve this Doc View Source HasRightShoulderButton Gets a value indicating whether the controller has the right shoulder button. Declaration public bool HasRightShoulderButton { get; } Property Value Type Description System.Boolean true if it has the right shoulder button; otherwise, false . | Improve this Doc View Source HasRightStickButton Gets a value indicating whether the controller has the right stick button. Declaration public bool HasRightStickButton { get; } Property Value Type Description System.Boolean true if it has the right stick button; otherwise, false . | Improve this Doc View Source HasRightTrigger Gets a value indicating whether the controller has the right trigger button. Declaration public bool HasRightTrigger { get; } Property Value Type Description System.Boolean true if it has the right trigger button; otherwise, false . | Improve this Doc View Source HasRightVibrationMotor Gets a value indicating whether the controller has the right vibration motor. Declaration public bool HasRightVibrationMotor { get; } Property Value Type Description System.Boolean true if it has the right vibration motor; otherwise, false . | Improve this Doc View Source HasRightXThumbStick Gets a value indicating whether the controller has X axis for the right stick (thumbstick) button. Declaration public bool HasRightXThumbStick { get; } Property Value Type Description System.Boolean true if it has X axis for the right stick (thumbstick) button; otherwise, false . | Improve this Doc View Source HasRightYThumbStick Gets a value indicating whether the controller has Y axis for the right stick (thumbstick) button. Declaration public bool HasRightYThumbStick { get; } Property Value Type Description System.Boolean true if it has Y axis for the right stick (thumbstick) button; otherwise, false . | Improve this Doc View Source HasStartButton Gets a value indicating whether the controller has the button Start. Declaration public bool HasStartButton { get; } Property Value Type Description System.Boolean true if it has the button Start; otherwise, false . | Improve this Doc View Source HasVoiceSupport Gets a value indicating whether the controller has a microphone. Declaration public bool HasVoiceSupport { get; } Property Value Type Description System.Boolean true if it has a microphone; otherwise, false . | Improve this Doc View Source HasXButton Gets a value indicating whether the controller has the button X. Declaration public bool HasXButton { get; } Property Value Type Description System.Boolean true if it has the button X; otherwise, false . | Improve this Doc View Source HasYButton Gets a value indicating whether the controller has the button Y. Declaration public bool HasYButton { get; } Property Value Type Description System.Boolean true if it has the button Y; otherwise, false . | Improve this Doc View Source Identifier Gets the unique identifier of the gamepad. This property is not available in XNA. Declaration public string Identifier { get; } Property Value Type Description System.String String representing the unique identifier of the gamepad. | Improve this Doc View Source IsConnected Gets a value indicating if the controller is connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean true if it is connected; otherwise, false . Methods | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to the current GamePadCapabilities . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current GamePadCapabilities . Returns Type Description System.Boolean true if the specified System.Object is equal to the current GamePadCapabilities ; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a GamePadCapabilities object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current GamePadCapabilities . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current GamePadCapabilities . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(GamePadCapabilities, GamePadCapabilities) Determines whether a specified instance of GamePadCapabilities is equal to another specified GamePadCapabilities . Declaration public static bool operator ==(GamePadCapabilities left, GamePadCapabilities right) Parameters Type Name Description GamePadCapabilities left The first GamePadCapabilities to compare. GamePadCapabilities right The second GamePadCapabilities to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(GamePadCapabilities, GamePadCapabilities) Determines whether a specified instance of GamePadCapabilities is not equal to another specified GamePadCapabilities . Declaration public static bool operator !=(GamePadCapabilities left, GamePadCapabilities right) Parameters Type Name Description GamePadCapabilities left The first GamePadCapabilities to compare. GamePadCapabilities right The second GamePadCapabilities to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false ."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexElement.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexElement.html",
    "title": "Struct VertexElement | MonoGame Documentation",
    "keywords": "Struct VertexElement Defines a single element in a vertex. Implements System.IEquatable < VertexElement > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct VertexElement : IEquatable<VertexElement> Constructors | Improve this Doc View Source VertexElement(Int32, VertexElementFormat, VertexElementUsage, Int32) Initializes a new instance of the VertexElement struct. Declaration public VertexElement(int offset, VertexElementFormat elementFormat, VertexElementUsage elementUsage, int usageIndex) Parameters Type Name Description System.Int32 offset The offset in bytes from the beginning of the stream to the vertex element. VertexElementFormat elementFormat The element format. VertexElementUsage elementUsage The HLSL semantic of the element in the vertex shader input-signature. System.Int32 usageIndex The semantic index, which is required if the semantic is used for more than one vertex element. Properties | Improve this Doc View Source Offset Gets or sets the offset in bytes from the beginning of the stream to the vertex element. Declaration public int Offset { get; set; } Property Value Type Description System.Int32 The offset in bytes. | Improve this Doc View Source UsageIndex Gets or sets the semantic index. Declaration public int UsageIndex { get; set; } Property Value Type Description System.Int32 The semantic index, which is required if the semantic is used for more than one vertex element. Remarks Usage indices in a vertex declaration usually start with 0. When multiple vertex buffers are bound to the input assembler stage (see SetVertexBuffers(VertexBufferBinding[]) ), MonoGame internally adjusts the usage indices based on the order in which the vertex buffers are bound. | Improve this Doc View Source VertexElementFormat Gets or sets the data format. Declaration public VertexElementFormat VertexElementFormat { get; set; } Property Value Type Description VertexElementFormat The data format. | Improve this Doc View Source VertexElementUsage Gets or sets the HLSL semantic of the element in the vertex shader input. Declaration public VertexElementUsage VertexElementUsage { get; set; } Property Value Type Description VertexElementUsage The HLSL semantic of the element in the vertex shader input. Methods | Improve this Doc View Source Equals(VertexElement) Determines whether the specified VertexElement is equal to this instance. Declaration public bool Equals(VertexElement other) Parameters Type Name Description VertexElement other The object to compare with the current object. Returns Type Description System.Boolean true if the specified VertexElement is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(VertexElement, VertexElement) Compares two VertexElement instances to determine whether they are the same. Declaration public static bool operator ==(VertexElement left, VertexElement right) Parameters Type Name Description VertexElement left The first instance. VertexElement right The second instance. Returns Type Description System.Boolean true if the left and right are the same; otherwise, false . | Improve this Doc View Source Inequality(VertexElement, VertexElement) Compares two VertexElement instances to determine whether they are different. Declaration public static bool operator !=(VertexElement left, VertexElement right) Parameters Type Name Description VertexElement left The first instance. VertexElement right The second instance. Returns Type Description System.Boolean true if the left and right are the different; otherwise, false . Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexDeclaration.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexDeclaration.html",
    "title": "Class VertexDeclaration | MonoGame Documentation",
    "keywords": "Class VertexDeclaration Defines per-vertex data of a vertex buffer. Inheritance System.Object GraphicsResource VertexDeclaration Implements System.IDisposable System.IEquatable < VertexDeclaration > Inherited Members GraphicsResource.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Dispose(Boolean) GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class VertexDeclaration : GraphicsResource, IDisposable, IEquatable<VertexDeclaration> Remarks VertexDeclaration implements System.IEquatable<T> and can be used as a key in a dictionary. Two vertex declarations are considered equal if the vertices are structurally equivalent, i.e. the vertex elements and the vertex stride are identical. (The properties Name and Tag are ignored in GetHashCode() and Equals(VertexDeclaration) !) Constructors | Improve this Doc View Source VertexDeclaration(VertexElement[]) Initializes a new instance of the VertexDeclaration class. Declaration public VertexDeclaration(params VertexElement[] elements) Parameters Type Name Description VertexElement [] elements The vertex elements. Exceptions Type Condition System.ArgumentNullException elements is null or empty. | Improve this Doc View Source VertexDeclaration(Int32, VertexElement[]) Initializes a new instance of the VertexDeclaration class. Declaration public VertexDeclaration(int vertexStride, params VertexElement[] elements) Parameters Type Name Description System.Int32 vertexStride The size of a vertex (including padding) in bytes. VertexElement [] elements The vertex elements. Exceptions Type Condition System.ArgumentNullException elements is null or empty. Properties | Improve this Doc View Source VertexStride Gets the size of a vertex (including padding) in bytes. Declaration public int VertexStride { get; } Property Value Type Description System.Int32 The size of a vertex (including padding) in bytes. Methods | Improve this Doc View Source Equals(VertexDeclaration) Determines whether the specified VertexDeclaration is equal to this instance. Declaration public bool Equals(VertexDeclaration other) Parameters Type Name Description VertexDeclaration other The object to compare with the current object. Returns Type Description System.Boolean true if the specified VertexDeclaration is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified System.Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode() | Improve this Doc View Source GetVertexElements() Gets a copy of the vertex elements. Declaration public VertexElement[] GetVertexElements() Returns Type Description VertexElement [] A copy of the vertex elements. Operators | Improve this Doc View Source Equality(VertexDeclaration, VertexDeclaration) Compares two VertexElement instances to determine whether they are the same. Declaration public static bool operator ==(VertexDeclaration left, VertexDeclaration right) Parameters Type Name Description VertexDeclaration left The first instance. VertexDeclaration right The second instance. Returns Type Description System.Boolean true if the left and right are the same; otherwise, false . | Improve this Doc View Source Inequality(VertexDeclaration, VertexDeclaration) Compares two VertexElement instances to determine whether they are different. Declaration public static bool operator !=(VertexDeclaration left, VertexDeclaration right) Parameters Type Name Description VertexDeclaration left The first instance. VertexDeclaration right The second instance. Returns Type Description System.Boolean true if the left and right are the different; otherwise, false . Implements System.IDisposable System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.StencilOperation.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.StencilOperation.html",
    "title": "Enum StencilOperation | MonoGame Documentation",
    "keywords": "Enum StencilOperation Defines stencil buffer operations. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum StencilOperation Fields Name Description Decrement Decrements the stencil buffer entry, wrapping to the maximum value if the new value is less than 0. DecrementSaturation Decrements the stencil buffer entry, clamping to 0. Increment Increments the stencil buffer entry, wrapping to 0 if the new value exceeds the maximum value. IncrementSaturation Increments the stencil buffer entry, clamping to the maximum value. Invert Inverts the bits in the stencil buffer entry. Keep Does not update the stencil buffer entry. Replace Replaces the stencil buffer entry with a reference value. Zero Sets the stencil buffer entry to 0."
  },
  "_api/Microsoft.Xna.Framework.Graphics.SpriteSortMode.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SpriteSortMode.html",
    "title": "Enum SpriteSortMode | MonoGame Documentation",
    "keywords": "Enum SpriteSortMode Defines sprite sort rendering options. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum SpriteSortMode Fields Name Description BackToFront Same as Deferred , except sprites are sorted by depth in back-to-front order prior to drawing. Deferred All sprites are drawing when End() invokes, in order of draw call sequence. Depth is ignored. FrontToBack Same as Deferred , except sprites are sorted by depth in front-to-back order prior to drawing. Immediate Each sprite is drawing at individual draw call, instead of End() . Depth is ignored. Texture Same as Deferred , except sprites are sorted by texture prior to drawing. Depth is ignored."
  },
  "_api/Microsoft.Xna.Framework.Graphics.RenderTarget3D.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.RenderTarget3D.html",
    "title": "Class RenderTarget3D | MonoGame Documentation",
    "keywords": "Class RenderTarget3D Inheritance System.Object GraphicsResource Texture Texture3D RenderTarget3D Implements System.IDisposable Inherited Members Texture3D.Width Texture3D.Height Texture3D.Depth Texture3D.SetData<T>(T[]) Texture3D.SetData<T>(T[], Int32, Int32) Texture3D.SetData<T>(Int32, Int32, Int32, Int32, Int32, Int32, Int32, T[], Int32, Int32) Texture3D.GetData<T>(Int32, Int32, Int32, Int32, Int32, Int32, Int32, T[], Int32, Int32) Texture3D.GetData<T>(T[], Int32, Int32) Texture3D.GetData<T>(T[]) Texture.Format Texture.LevelCount Texture.GraphicsDeviceResetting() Texture.GetSharedHandle() Texture.CreateShaderResourceView() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class RenderTarget3D : Texture3D, IDisposable, IRenderTarget Constructors | Improve this Doc View Source RenderTarget3D(GraphicsDevice, Int32, Int32, Int32) Declaration public RenderTarget3D(GraphicsDevice graphicsDevice, int width, int height, int depth) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Int32 depth | Improve this Doc View Source RenderTarget3D(GraphicsDevice, Int32, Int32, Int32, Boolean, SurfaceFormat, DepthFormat) Declaration public RenderTarget3D(GraphicsDevice graphicsDevice, int width, int height, int depth, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Int32 depth System.Boolean mipMap SurfaceFormat preferredFormat DepthFormat preferredDepthFormat | Improve this Doc View Source RenderTarget3D(GraphicsDevice, Int32, Int32, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage) Declaration public RenderTarget3D(GraphicsDevice graphicsDevice, int width, int height, int depth, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat, int preferredMultiSampleCount, RenderTargetUsage usage) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Int32 depth System.Boolean mipMap SurfaceFormat preferredFormat DepthFormat preferredDepthFormat System.Int32 preferredMultiSampleCount RenderTargetUsage usage Properties | Improve this Doc View Source DepthStencilFormat Declaration public DepthFormat DepthStencilFormat { get; } Property Value Type Description DepthFormat | Improve this Doc View Source IsContentLost Declaration public bool IsContentLost { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiSampleCount Declaration public int MultiSampleCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RenderTargetUsage Declaration public RenderTargetUsage RenderTargetUsage { get; } Property Value Type Description RenderTargetUsage Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Texture.Dispose(Boolean) Events | Improve this Doc View Source ContentLost Declaration public event EventHandler<EventArgs> ContentLost Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.RenderTarget2D.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.RenderTarget2D.html",
    "title": "Class RenderTarget2D | MonoGame Documentation",
    "keywords": "Class RenderTarget2D Inheritance System.Object GraphicsResource Texture Texture2D RenderTarget2D SwapChainRenderTarget Implements System.IDisposable Inherited Members Texture2D.Bounds Texture2D.Width Texture2D.Height Texture2D.SetData<T>(Int32, Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.SetData<T>(Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.SetData<T>(T[], Int32, Int32) Texture2D.SetData<T>(T[]) Texture2D.GetData<T>(Int32, Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.GetData<T>(Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.GetData<T>(T[], Int32, Int32) Texture2D.GetData<T>(T[]) Texture2D.FromStream(GraphicsDevice, Stream) Texture2D.SaveAsJpeg(Stream, Int32, Int32) Texture2D.SaveAsPng(Stream, Int32, Int32) Texture2D.Reload(Stream) Texture2D.Shared Texture2D.Mipmap Texture2D.SampleDescription Texture.Format Texture.LevelCount Texture.GetSharedHandle() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class RenderTarget2D : Texture2D, IDisposable, IRenderTarget Constructors | Improve this Doc View Source RenderTarget2D(GraphicsDevice, Int32, Int32) Declaration public RenderTarget2D(GraphicsDevice graphicsDevice, int width, int height) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height | Improve this Doc View Source RenderTarget2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, DepthFormat) Declaration public RenderTarget2D(GraphicsDevice graphicsDevice, int width, int height, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipMap SurfaceFormat preferredFormat DepthFormat preferredDepthFormat | Improve this Doc View Source RenderTarget2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage) Declaration public RenderTarget2D(GraphicsDevice graphicsDevice, int width, int height, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat, int preferredMultiSampleCount, RenderTargetUsage usage) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipMap SurfaceFormat preferredFormat DepthFormat preferredDepthFormat System.Int32 preferredMultiSampleCount RenderTargetUsage usage | Improve this Doc View Source RenderTarget2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage, Texture2D.SurfaceType) Allows child class to specify the surface type, eg: a swap chain. Declaration protected RenderTarget2D(GraphicsDevice graphicsDevice, int width, int height, bool mipMap, SurfaceFormat format, DepthFormat depthFormat, int preferredMultiSampleCount, RenderTargetUsage usage, Texture2D.SurfaceType surfaceType) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipMap SurfaceFormat format DepthFormat depthFormat System.Int32 preferredMultiSampleCount RenderTargetUsage usage Texture2D.SurfaceType surfaceType | Improve this Doc View Source RenderTarget2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage, Boolean) Declaration public RenderTarget2D(GraphicsDevice graphicsDevice, int width, int height, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat, int preferredMultiSampleCount, RenderTargetUsage usage, bool shared) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipMap SurfaceFormat preferredFormat DepthFormat preferredDepthFormat System.Int32 preferredMultiSampleCount RenderTargetUsage usage System.Boolean shared | Improve this Doc View Source RenderTarget2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage, Boolean, Int32) Declaration public RenderTarget2D(GraphicsDevice graphicsDevice, int width, int height, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat, int preferredMultiSampleCount, RenderTargetUsage usage, bool shared, int arraySize) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipMap SurfaceFormat preferredFormat DepthFormat preferredDepthFormat System.Int32 preferredMultiSampleCount RenderTargetUsage usage System.Boolean shared System.Int32 arraySize Properties | Improve this Doc View Source DepthStencilFormat Declaration public DepthFormat DepthStencilFormat { get; } Property Value Type Description DepthFormat | Improve this Doc View Source IsContentLost Declaration public bool IsContentLost { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiSampleCount Declaration public int MultiSampleCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RenderTargetUsage Declaration public RenderTargetUsage RenderTargetUsage { get; } Property Value Type Description RenderTargetUsage Methods | Improve this Doc View Source CreateSampleDescription() Declaration protected override SampleDescription CreateSampleDescription() Returns Type Description SharpDX.DXGI.SampleDescription Overrides Texture2D.CreateSampleDescription() | Improve this Doc View Source CreateShaderResourceView() Declaration protected override ShaderResourceView CreateShaderResourceView() Returns Type Description SharpDX.Direct3D11.ShaderResourceView Overrides Texture.CreateShaderResourceView() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Texture2D.Dispose(Boolean) | Improve this Doc View Source GetTexture2DDescription() Declaration protected override Texture2DDescription GetTexture2DDescription() Returns Type Description SharpDX.Direct3D11.Texture2DDescription Overrides Texture2D.GetTexture2DDescription() | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides Texture.GraphicsDeviceResetting() Events | Improve this Doc View Source ContentLost Declaration public event EventHandler<EventArgs> ContentLost Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.html",
    "title": "Interface IPackedVector | MonoGame Documentation",
    "keywords": "Interface IPackedVector Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public interface IPackedVector Methods | Improve this Doc View Source PackFromVector4(Vector4) Declaration void PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source ToVector4() Declaration Vector4 ToVector4() Returns Type Description Vector4"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector-1.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector-1.html",
    "title": "Interface IPackedVector<TPacked> | MonoGame Documentation",
    "keywords": "Interface IPackedVector<TPacked> Inherited Members IPackedVector.PackFromVector4(Vector4) IPackedVector.ToVector4() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public interface IPackedVector<TPacked> : IPackedVector Type Parameters Name Description TPacked Properties | Improve this Doc View Source PackedValue Declaration TPacked PackedValue { get; set; } Property Value Type Description TPacked"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelMesh.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelMesh.html",
    "title": "Class ModelMesh | MonoGame Documentation",
    "keywords": "Class ModelMesh Inheritance System.Object ModelMesh Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ModelMesh Constructors | Improve this Doc View Source ModelMesh(GraphicsDevice, List<ModelMeshPart>) Declaration public ModelMesh(GraphicsDevice graphicsDevice, List<ModelMeshPart> parts) Parameters Type Name Description GraphicsDevice graphicsDevice System.Collections.Generic.List < ModelMeshPart > parts Properties | Improve this Doc View Source BoundingSphere Declaration public BoundingSphere BoundingSphere { get; set; } Property Value Type Description BoundingSphere | Improve this Doc View Source Effects Declaration public ModelEffectCollection Effects { get; } Property Value Type Description ModelEffectCollection | Improve this Doc View Source MeshParts Declaration public ModelMeshPartCollection MeshParts { get; set; } Property Value Type Description ModelMeshPartCollection | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source ParentBone Declaration public ModelBone ParentBone { get; set; } Property Value Type Description ModelBone | Improve this Doc View Source Tag Declaration public object Tag { get; set; } Property Value Type Description System.Object Methods | Improve this Doc View Source Draw() Declaration public void Draw()"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelEffectCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelEffectCollection.html",
    "title": "Class ModelEffectCollection | MonoGame Documentation",
    "keywords": "Class ModelEffectCollection Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection < Effect > ModelEffectCollection Implements System.Collections.Generic.IList < Effect > System.Collections.Generic.ICollection < Effect > System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList < Effect > System.Collections.Generic.IReadOnlyCollection < Effect > System.Collections.Generic.IEnumerable < Effect > System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.Contains(Microsoft.Xna.Framework.Graphics.Effect) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.CopyTo(Microsoft.Xna.Framework.Graphics.Effect[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.IndexOf(Microsoft.Xna.Framework.Graphics.Effect) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.Effect>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.Effect>.set_Item(System.Int32, Microsoft.Xna.Framework.Graphics.Effect) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.Effect>.Add(Microsoft.Xna.Framework.Graphics.Effect) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.Effect>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.Effect>.Insert(System.Int32, Microsoft.Xna.Framework.Graphics.Effect) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.Effect>.Remove(Microsoft.Xna.Framework.Graphics.Effect) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.Effect>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.Count System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.Items System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.Effect>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.Effect>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.Effect>.System.Collections.IList.Item[System.Int32] System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ModelEffectCollection : ReadOnlyCollection<Effect>, IList<Effect>, ICollection<Effect>, IList, ICollection, IReadOnlyList<Effect>, IReadOnlyCollection<Effect>, IEnumerable<Effect>, IEnumerable Methods | Improve this Doc View Source GetEnumerator() Declaration public ModelEffectCollection.Enumerator GetEnumerator() Returns Type Description ModelEffectCollection.Enumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsMetrics.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsMetrics.html",
    "title": "Struct GraphicsMetrics | MonoGame Documentation",
    "keywords": "Struct GraphicsMetrics A snapshot of rendering statistics from Metrics to be used for runtime debugging and profiling. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct GraphicsMetrics Properties | Improve this Doc View Source ClearCount Number of times Clear was called. Declaration public long ClearCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source DrawCount Number of times Draw was called. Declaration public long DrawCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source PixelShaderCount Number of times the pixel shader was changed on the GPU. Declaration public long PixelShaderCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source PrimitiveCount Number of rendered primitives. Declaration public long PrimitiveCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source SpriteCount Number of sprites and text characters rendered via SpriteBatch . Declaration public long SpriteCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TargetCount Number of times a target was changed on the GPU. Declaration public long TargetCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TextureCount Number of times a texture was changed on the GPU. Declaration public long TextureCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source VertexShaderCount Number of times the vertex shader was changed on the GPU. Declaration public long VertexShaderCount { get; } Property Value Type Description System.Int64 Operators | Improve this Doc View Source Addition(GraphicsMetrics, GraphicsMetrics) Returns the combination of two sets of metrics. Declaration public static GraphicsMetrics operator +(GraphicsMetrics value1, GraphicsMetrics value2) Parameters Type Name Description GraphicsMetrics value1 Source GraphicsMetrics on the left of the add sign. GraphicsMetrics value2 Source GraphicsMetrics on the right of the add sign. Returns Type Description GraphicsMetrics Combination of two sets of metrics. | Improve this Doc View Source Subtraction(GraphicsMetrics, GraphicsMetrics) Returns the difference between two sets of metrics. Declaration public static GraphicsMetrics operator -(GraphicsMetrics value1, GraphicsMetrics value2) Parameters Type Name Description GraphicsMetrics value1 Source GraphicsMetrics on the left of the sub sign. GraphicsMetrics value2 Source GraphicsMetrics on the right of the sub sign. Returns Type Description GraphicsMetrics Difference between two sets of metrics."
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.html",
    "title": "Enum GraphicsDeviceStatus | MonoGame Documentation",
    "keywords": "Enum GraphicsDeviceStatus Describes the status of the GraphicsDevice . Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum GraphicsDeviceStatus Fields Name Description Lost The device has been lost. Normal The device is normal. NotReset The device has not been reset."
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectParameterClass.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectParameterClass.html",
    "title": "Enum EffectParameterClass | MonoGame Documentation",
    "keywords": "Enum EffectParameterClass Defines classes for effect parameters and shader constants. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum EffectParameterClass Fields Name Description Matrix Matrix class type. Object Class type for textures, shaders or strings. Scalar Scalar class type. Struct Structure class type. Vector Vector class type."
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectParameter.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectParameter.html",
    "title": "Class EffectParameter | MonoGame Documentation",
    "keywords": "Class EffectParameter Inheritance System.Object EffectParameter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectParameter Properties | Improve this Doc View Source Annotations Declaration public EffectAnnotationCollection Annotations { get; } Property Value Type Description EffectAnnotationCollection | Improve this Doc View Source ColumnCount Declaration public int ColumnCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Elements Declaration public EffectParameterCollection Elements { get; } Property Value Type Description EffectParameterCollection | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ParameterClass Declaration public EffectParameterClass ParameterClass { get; } Property Value Type Description EffectParameterClass | Improve this Doc View Source ParameterType Declaration public EffectParameterType ParameterType { get; } Property Value Type Description EffectParameterType | Improve this Doc View Source RowCount Declaration public int RowCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Semantic Declaration public string Semantic { get; } Property Value Type Description System.String | Improve this Doc View Source StructureMembers Declaration public EffectParameterCollection StructureMembers { get; } Property Value Type Description EffectParameterCollection Methods | Improve this Doc View Source GetValueBoolean() Declaration public bool GetValueBoolean() Returns Type Description System.Boolean | Improve this Doc View Source GetValueInt32() Declaration public int GetValueInt32() Returns Type Description System.Int32 | Improve this Doc View Source GetValueMatrix() Declaration public Matrix GetValueMatrix() Returns Type Description Matrix | Improve this Doc View Source GetValueMatrixArray(Int32) Declaration public Matrix[] GetValueMatrixArray(int count) Parameters Type Name Description System.Int32 count Returns Type Description Matrix [] | Improve this Doc View Source GetValueQuaternion() Declaration public Quaternion GetValueQuaternion() Returns Type Description Quaternion | Improve this Doc View Source GetValueSingle() Declaration public float GetValueSingle() Returns Type Description System.Single | Improve this Doc View Source GetValueSingleArray() Declaration public float[] GetValueSingleArray() Returns Type Description System.Single [] | Improve this Doc View Source GetValueString() Declaration public string GetValueString() Returns Type Description System.String | Improve this Doc View Source GetValueTexture2D() Declaration public Texture2D GetValueTexture2D() Returns Type Description Texture2D | Improve this Doc View Source GetValueTexture3D() Declaration public Texture3D GetValueTexture3D() Returns Type Description Texture3D | Improve this Doc View Source GetValueTextureCube() Declaration public TextureCube GetValueTextureCube() Returns Type Description TextureCube | Improve this Doc View Source GetValueVector2() Declaration public Vector2 GetValueVector2() Returns Type Description Vector2 | Improve this Doc View Source GetValueVector2Array() Declaration public Vector2[] GetValueVector2Array() Returns Type Description Vector2 [] | Improve this Doc View Source GetValueVector3() Declaration public Vector3 GetValueVector3() Returns Type Description Vector3 | Improve this Doc View Source GetValueVector3Array() Declaration public Vector3[] GetValueVector3Array() Returns Type Description Vector3 [] | Improve this Doc View Source GetValueVector4() Declaration public Vector4 GetValueVector4() Returns Type Description Vector4 | Improve this Doc View Source GetValueVector4Array() Declaration public Vector4[] GetValueVector4Array() Returns Type Description Vector4 [] | Improve this Doc View Source SetValue(Texture) Declaration public void SetValue(Texture value) Parameters Type Name Description Texture value | Improve this Doc View Source SetValue(Matrix) Declaration public void SetValue(Matrix value) Parameters Type Name Description Matrix value | Improve this Doc View Source SetValue(Matrix[]) Declaration public void SetValue(Matrix[] value) Parameters Type Name Description Matrix [] value | Improve this Doc View Source SetValue(Quaternion) Declaration public void SetValue(Quaternion value) Parameters Type Name Description Quaternion value | Improve this Doc View Source SetValue(Vector2) Declaration public void SetValue(Vector2 value) Parameters Type Name Description Vector2 value | Improve this Doc View Source SetValue(Vector2[]) Declaration public void SetValue(Vector2[] value) Parameters Type Name Description Vector2 [] value | Improve this Doc View Source SetValue(Vector3) Declaration public void SetValue(Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source SetValue(Vector3[]) Declaration public void SetValue(Vector3[] value) Parameters Type Name Description Vector3 [] value | Improve this Doc View Source SetValue(Vector4) Declaration public void SetValue(Vector4 value) Parameters Type Name Description Vector4 value | Improve this Doc View Source SetValue(Vector4[]) Declaration public void SetValue(Vector4[] value) Parameters Type Name Description Vector4 [] value | Improve this Doc View Source SetValue(Boolean) Declaration public void SetValue(bool value) Parameters Type Name Description System.Boolean value | Improve this Doc View Source SetValue(Int32) Declaration public void SetValue(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source SetValue(Single) Declaration public void SetValue(float value) Parameters Type Name Description System.Single value | Improve this Doc View Source SetValue(Single[]) Declaration public void SetValue(float[] value) Parameters Type Name Description System.Single [] value | Improve this Doc View Source SetValueTranspose(Matrix) Declaration public void SetValueTranspose(Matrix value) Parameters Type Name Description Matrix value"
  },
  "_api/Microsoft.Xna.Framework.Graphics.CubeMapFace.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.CubeMapFace.html",
    "title": "Enum CubeMapFace | MonoGame Documentation",
    "keywords": "Enum CubeMapFace Defines the faces in a cube map for the TextureCube class. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum CubeMapFace Fields Name Description NegativeX Negative X face in the cube map. NegativeY Negative Y face in the cube map. NegativeZ Negative Z face in the cube map. PositiveX Positive X face in the cube map. PositiveY Positive Y face in the cube map. PositiveZ Positive Z face in the cube map."
  },
  "_api/Microsoft.Xna.Framework.Graphics.CompareFunction.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.CompareFunction.html",
    "title": "Enum CompareFunction | MonoGame Documentation",
    "keywords": "Enum CompareFunction The comparison function used for depth, stencil, and alpha tests. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum CompareFunction Fields Name Description Always Always passes the test. Equal Passes the test when the new pixel value is equal to current pixel value. Greater Passes the test when the new pixel value is greater than current pixel value. GreaterEqual Passes the test when the new pixel value is greater than or equal to current pixel value. Less Passes the test when the new pixel value is less than current pixel value. LessEqual Passes the test when the new pixel value is less than or equal to current pixel value. Never Never passes the test. NotEqual Passes the test when the new pixel value does not equal to current pixel value."
  },
  "_api/Microsoft.Xna.Framework.GameTime.html": {
    "href": "_api/Microsoft.Xna.Framework.GameTime.html",
    "title": "Class GameTime | MonoGame Documentation",
    "keywords": "Class GameTime Inheritance System.Object GameTime Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GameTime Constructors | Improve this Doc View Source GameTime() Declaration public GameTime() | Improve this Doc View Source GameTime(TimeSpan, TimeSpan) Declaration public GameTime(TimeSpan totalGameTime, TimeSpan elapsedGameTime) Parameters Type Name Description System.TimeSpan totalGameTime System.TimeSpan elapsedGameTime | Improve this Doc View Source GameTime(TimeSpan, TimeSpan, Boolean) Declaration public GameTime(TimeSpan totalRealTime, TimeSpan elapsedRealTime, bool isRunningSlowly) Parameters Type Name Description System.TimeSpan totalRealTime System.TimeSpan elapsedRealTime System.Boolean isRunningSlowly Properties | Improve this Doc View Source ElapsedGameTime Declaration public TimeSpan ElapsedGameTime { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source IsRunningSlowly Declaration public bool IsRunningSlowly { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TotalGameTime Declaration public TimeSpan TotalGameTime { get; set; } Property Value Type Description System.TimeSpan"
  },
  "_api/Microsoft.Xna.Framework.FrameworkDispatcher.html": {
    "href": "_api/Microsoft.Xna.Framework.FrameworkDispatcher.html",
    "title": "Class FrameworkDispatcher | MonoGame Documentation",
    "keywords": "Class FrameworkDispatcher Helper class for processing internal framework events. Inheritance System.Object FrameworkDispatcher Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public static class FrameworkDispatcher Remarks If you use Game class, Update() is called automatically. Otherwise you must call it as part of your game loop. Methods | Improve this Doc View Source Update() Processes framework events. Declaration public static void Update()"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.html",
    "title": "Struct NormalizedShort4 | MonoGame Documentation",
    "keywords": "Struct NormalizedShort4 Implements IPackedVector < System.UInt64 > IPackedVector System.IEquatable < NormalizedShort4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct NormalizedShort4 : IPackedVector<ulong>, IPackedVector, IEquatable<NormalizedShort4> Constructors | Improve this Doc View Source NormalizedShort4(Vector4) Declaration public NormalizedShort4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source NormalizedShort4(Single, Single, Single, Single) Declaration public NormalizedShort4(float x, float y, float z, float w) Parameters Type Name Description System.Single x System.Single y System.Single z System.Single w Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public ulong PackedValue { get; set; } Property Value Type Description System.UInt64 Methods | Improve this Doc View Source Equals(NormalizedShort4) Declaration public bool Equals(NormalizedShort4 other) Parameters Type Name Description NormalizedShort4 other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Declaration public Vector4 ToVector4() Returns Type Description Vector4 Operators | Improve this Doc View Source Equality(NormalizedShort4, NormalizedShort4) Declaration public static bool operator ==(NormalizedShort4 a, NormalizedShort4 b) Parameters Type Name Description NormalizedShort4 a NormalizedShort4 b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NormalizedShort4, NormalizedShort4) Declaration public static bool operator !=(NormalizedShort4 a, NormalizedShort4 b) Parameters Type Name Description NormalizedShort4 a NormalizedShort4 b Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.html",
    "title": "Struct NormalizedShort2 | MonoGame Documentation",
    "keywords": "Struct NormalizedShort2 Implements IPackedVector < System.UInt32 > IPackedVector System.IEquatable < NormalizedShort2 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct NormalizedShort2 : IPackedVector<uint>, IPackedVector, IEquatable<NormalizedShort2> Constructors | Improve this Doc View Source NormalizedShort2(Vector2) Declaration public NormalizedShort2(Vector2 vector) Parameters Type Name Description Vector2 vector | Improve this Doc View Source NormalizedShort2(Single, Single) Declaration public NormalizedShort2(float x, float y) Parameters Type Name Description System.Single x System.Single y Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(NormalizedShort2) Declaration public bool Equals(NormalizedShort2 other) Parameters Type Name Description NormalizedShort2 other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector2() Declaration public Vector2 ToVector2() Returns Type Description Vector2 Operators | Improve this Doc View Source Equality(NormalizedShort2, NormalizedShort2) Declaration public static bool operator ==(NormalizedShort2 a, NormalizedShort2 b) Parameters Type Name Description NormalizedShort2 a NormalizedShort2 b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NormalizedShort2, NormalizedShort2) Declaration public static bool operator !=(NormalizedShort2 a, NormalizedShort2 b) Parameters Type Name Description NormalizedShort2 a NormalizedShort2 b Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source IPackedVector.ToVector4() Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.html",
    "title": "Class ModelMeshPartCollection | MonoGame Documentation",
    "keywords": "Class ModelMeshPartCollection Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection < ModelMeshPart > ModelMeshPartCollection Implements System.Collections.Generic.IList < ModelMeshPart > System.Collections.Generic.ICollection < ModelMeshPart > System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList < ModelMeshPart > System.Collections.Generic.IReadOnlyCollection < ModelMeshPart > System.Collections.Generic.IEnumerable < ModelMeshPart > System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Contains(Microsoft.Xna.Framework.Graphics.ModelMeshPart) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.CopyTo(Microsoft.Xna.Framework.Graphics.ModelMeshPart[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.IndexOf(Microsoft.Xna.Framework.Graphics.ModelMeshPart) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.set_Item(System.Int32, Microsoft.Xna.Framework.Graphics.ModelMeshPart) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Add(Microsoft.Xna.Framework.Graphics.ModelMeshPart) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Insert(System.Int32, Microsoft.Xna.Framework.Graphics.ModelMeshPart) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Remove(Microsoft.Xna.Framework.Graphics.ModelMeshPart) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Count System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Items System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMeshPart>.System.Collections.IList.Item[System.Int32] System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ModelMeshPartCollection : ReadOnlyCollection<ModelMeshPart>, IList<ModelMeshPart>, ICollection<ModelMeshPart>, IList, ICollection, IReadOnlyList<ModelMeshPart>, IReadOnlyCollection<ModelMeshPart>, IEnumerable<ModelMeshPart>, IEnumerable Constructors | Improve this Doc View Source ModelMeshPartCollection(IList<ModelMeshPart>) Declaration public ModelMeshPartCollection(IList<ModelMeshPart> list) Parameters Type Name Description System.Collections.Generic.IList < ModelMeshPart > list Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelMeshPart.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelMeshPart.html",
    "title": "Class ModelMeshPart | MonoGame Documentation",
    "keywords": "Class ModelMeshPart Inheritance System.Object ModelMeshPart Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ModelMeshPart Properties | Improve this Doc View Source Effect Declaration public Effect Effect { get; set; } Property Value Type Description Effect | Improve this Doc View Source IndexBuffer Declaration public IndexBuffer IndexBuffer { get; set; } Property Value Type Description IndexBuffer | Improve this Doc View Source NumVertices Declaration public int NumVertices { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PrimitiveCount Declaration public int PrimitiveCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source StartIndex Declaration public int StartIndex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Tag Declaration public object Tag { get; set; } Property Value Type Description System.Object | Improve this Doc View Source VertexBuffer Declaration public VertexBuffer VertexBuffer { get; set; } Property Value Type Description VertexBuffer | Improve this Doc View Source VertexOffset Declaration public int VertexOffset { get; set; } Property Value Type Description System.Int32"
  },
  "_api/Microsoft.Xna.Framework.Graphics.IEffectLights.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IEffectLights.html",
    "title": "Interface IEffectLights | MonoGame Documentation",
    "keywords": "Interface IEffectLights The common effect light rendering parameters. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public interface IEffectLights Properties | Improve this Doc View Source AmbientLightColor The floating point ambient light color. Declaration Vector3 AmbientLightColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DirectionalLight0 Returns the first directional light. Declaration DirectionalLight DirectionalLight0 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight1 Returns the second directional light. Declaration DirectionalLight DirectionalLight1 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source DirectionalLight2 Returns the third directional light. Declaration DirectionalLight DirectionalLight2 { get; } Property Value Type Description DirectionalLight | Improve this Doc View Source LightingEnabled Toggles the rendering of lighting. Declaration bool LightingEnabled { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source EnableDefaultLighting() Initializes the lights to the standard key/fill/back lighting rig. Declaration void EnableDefaultLighting()"
  },
  "_api/Microsoft.Xna.Framework.Graphics.IEffectFog.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IEffectFog.html",
    "title": "Interface IEffectFog | MonoGame Documentation",
    "keywords": "Interface IEffectFog The common effect fog rendering parameters. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public interface IEffectFog Properties | Improve this Doc View Source FogColor The floating point fog color. Declaration Vector3 FogColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogEnabled Used to toggle the rendering of fog. Declaration bool FogEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FogEnd The world space distance from the camera at which fogging is fully applied. Declaration float FogEnd { get; set; } Property Value Type Description System.Single Remarks FogEnd should be greater than FogStart. If FogEnd and FogStart are the same value everything is fully fogged. | Improve this Doc View Source FogStart The world space distance from the camera at which fogging begins. Declaration float FogStart { get; set; } Property Value Type Description System.Single Remarks FogStart should be less than FogEnd. If FogEnd and FogStart are the same value everything is fully fogged."
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectPassCollection.Enumerator.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectPassCollection.Enumerator.html",
    "title": "Struct EffectPassCollection.Enumerator | MonoGame Documentation",
    "keywords": "Struct EffectPassCollection.Enumerator Implements System.Collections.Generic.IEnumerator < EffectPass > System.IDisposable System.Collections.IEnumerator Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct Enumerator : IEnumerator<EffectPass>, IDisposable, IEnumerator Properties | Improve this Doc View Source Current Declaration public EffectPass Current { get; } Property Value Type Description EffectPass Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object | Improve this Doc View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectPass.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectPass.html",
    "title": "Class EffectPass | MonoGame Documentation",
    "keywords": "Class EffectPass Inheritance System.Object EffectPass Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectPass Properties | Improve this Doc View Source Annotations Declaration public EffectAnnotationCollection Annotations { get; } Property Value Type Description EffectAnnotationCollection | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Apply() Declaration public void Apply()"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DirectionalLight.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DirectionalLight.html",
    "title": "Class DirectionalLight | MonoGame Documentation",
    "keywords": "Class DirectionalLight Inheritance System.Object DirectionalLight Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class DirectionalLight Constructors | Improve this Doc View Source DirectionalLight(EffectParameter, EffectParameter, EffectParameter, DirectionalLight) Declaration public DirectionalLight(EffectParameter directionParameter, EffectParameter diffuseColorParameter, EffectParameter specularColorParameter, DirectionalLight cloneSource) Parameters Type Name Description EffectParameter directionParameter EffectParameter diffuseColorParameter EffectParameter specularColorParameter DirectionalLight cloneSource Properties | Improve this Doc View Source DiffuseColor Declaration public Vector3 DiffuseColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Direction Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Enabled Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SpecularColor Declaration public Vector3 SpecularColor { get; set; } Property Value Type Description Vector3"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DeviceNotResetException.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DeviceNotResetException.html",
    "title": "Class DeviceNotResetException | MonoGame Documentation",
    "keywords": "Class DeviceNotResetException Inheritance System.Object System.Exception DeviceNotResetException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public sealed class DeviceNotResetException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source DeviceNotResetException() Declaration public DeviceNotResetException() | Improve this Doc View Source DeviceNotResetException(String) Declaration public DeviceNotResetException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source DeviceNotResetException(String, Exception) Declaration public DeviceNotResetException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Graphics.AlphaTestEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.AlphaTestEffect.html",
    "title": "Class AlphaTestEffect | MonoGame Documentation",
    "keywords": "Class AlphaTestEffect Built-in effect that supports alpha testing. Inheritance System.Object GraphicsResource Effect AlphaTestEffect Implements System.IDisposable IEffectMatrices IEffectFog Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class AlphaTestEffect : Effect, IDisposable, IEffectMatrices, IEffectFog Constructors | Improve this Doc View Source AlphaTestEffect(AlphaTestEffect) Creates a new AlphaTestEffect by cloning parameter settings from an existing instance. Declaration protected AlphaTestEffect(AlphaTestEffect cloneSource) Parameters Type Name Description AlphaTestEffect cloneSource | Improve this Doc View Source AlphaTestEffect(GraphicsDevice) Creates a new AlphaTestEffect with default parameter settings. Declaration public AlphaTestEffect(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device Properties | Improve this Doc View Source Alpha Gets or sets the material alpha. Declaration public float Alpha { get; set; } Property Value Type Description System.Single | Improve this Doc View Source AlphaFunction Gets or sets the alpha compare function (default Greater). Declaration public CompareFunction AlphaFunction { get; set; } Property Value Type Description CompareFunction | Improve this Doc View Source DiffuseColor Gets or sets the material diffuse color (range 0 to 1). Declaration public Vector3 DiffuseColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogColor Gets or sets the fog color. Declaration public Vector3 FogColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogEnabled Gets or sets the fog enable flag. Declaration public bool FogEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FogEnd Gets or sets the fog end distance. Declaration public float FogEnd { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FogStart Gets or sets the fog start distance. Declaration public float FogStart { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Projection Gets or sets the projection matrix. Declaration public Matrix Projection { get; set; } Property Value Type Description Matrix | Improve this Doc View Source ReferenceAlpha Gets or sets the reference alpha value (default 0). Declaration public int ReferenceAlpha { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Texture Gets or sets the current texture. Declaration public Texture2D Texture { get; set; } Property Value Type Description Texture2D | Improve this Doc View Source VertexColorEnabled Gets or sets whether vertex color is enabled. Declaration public bool VertexColorEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source View Gets or sets the view matrix. Declaration public Matrix View { get; set; } Property Value Type Description Matrix | Improve this Doc View Source World Gets or sets the world matrix. Declaration public Matrix World { get; set; } Property Value Type Description Matrix Methods | Improve this Doc View Source Clone() Creates a clone of the current AlphaTestEffect instance. Declaration public override Effect Clone() Returns Type Description Effect Overrides Effect.Clone() | Improve this Doc View Source OnApply() Lazily computes derived parameter values immediately before applying the effect. Declaration protected override void OnApply() Overrides Effect.OnApply() Implements System.IDisposable IEffectMatrices IEffectFog"
  },
  "_api/Microsoft.Xna.Framework.GameComponentCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.GameComponentCollection.html",
    "title": "Class GameComponentCollection | MonoGame Documentation",
    "keywords": "Class GameComponentCollection Inheritance System.Object System.Collections.ObjectModel.Collection < IGameComponent > GameComponentCollection Implements System.Collections.Generic.IList < IGameComponent > System.Collections.Generic.ICollection < IGameComponent > System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList < IGameComponent > System.Collections.Generic.IReadOnlyCollection < IGameComponent > System.Collections.Generic.IEnumerable < IGameComponent > System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Add(Microsoft.Xna.Framework.IGameComponent) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Clear() System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.CopyTo(Microsoft.Xna.Framework.IGameComponent[], System.Int32) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Contains(Microsoft.Xna.Framework.IGameComponent) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.GetEnumerator() System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.IndexOf(Microsoft.Xna.Framework.IGameComponent) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Insert(System.Int32, Microsoft.Xna.Framework.IGameComponent) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Remove(Microsoft.Xna.Framework.IGameComponent) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.RemoveAt(System.Int32) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Count System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Items System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.Item[System.Int32] System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.IGameComponent>.IsReadOnly System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.Item[System.Int32] System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.System.Collections.IList.IsFixedSize System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public sealed class GameComponentCollection : Collection<IGameComponent>, IList<IGameComponent>, ICollection<IGameComponent>, IList, ICollection, IReadOnlyList<IGameComponent>, IReadOnlyCollection<IGameComponent>, IEnumerable<IGameComponent>, IEnumerable Methods | Improve this Doc View Source ClearItems() Removes every GameComponent from this GameComponentCollection . Triggers Microsoft.Xna.Framework.GameComponentCollection.OnComponentRemoved(Microsoft.Xna.Framework.GameComponentCollectionEventArgs) once for each GameComponent removed. Declaration protected override void ClearItems() Overrides System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.ClearItems() | Improve this Doc View Source InsertItem(Int32, IGameComponent) Declaration protected override void InsertItem(int index, IGameComponent item) Parameters Type Name Description System.Int32 index IGameComponent item Overrides System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.InsertItem(System.Int32, Microsoft.Xna.Framework.IGameComponent) | Improve this Doc View Source RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.RemoveItem(System.Int32) | Improve this Doc View Source SetItem(Int32, IGameComponent) Declaration protected override void SetItem(int index, IGameComponent item) Parameters Type Name Description System.Int32 index IGameComponent item Overrides System.Collections.ObjectModel.Collection<Microsoft.Xna.Framework.IGameComponent>.SetItem(System.Int32, Microsoft.Xna.Framework.IGameComponent) Events | Improve this Doc View Source ComponentAdded Event that is triggered when a GameComponent is added to this GameComponentCollection . Declaration public event EventHandler<GameComponentCollectionEventArgs> ComponentAdded Event Type Type Description System.EventHandler < GameComponentCollectionEventArgs > | Improve this Doc View Source ComponentRemoved Event that is triggered when a GameComponent is removed from this GameComponentCollection . Declaration public event EventHandler<GameComponentCollectionEventArgs> ComponentRemoved Event Type Type Description System.EventHandler < GameComponentCollectionEventArgs > Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Design.Vector3TypeConverter.html": {
    "href": "_api/Microsoft.Xna.Framework.Design.Vector3TypeConverter.html",
    "title": "Class Vector3TypeConverter | MonoGame Documentation",
    "keywords": "Class Vector3TypeConverter Inheritance System.Object System.ComponentModel.TypeConverter Vector3TypeConverter Inherited Members System.ComponentModel.TypeConverter.CanConvertFrom(System.Type) System.ComponentModel.TypeConverter.CanConvertTo(System.Type) System.ComponentModel.TypeConverter.ConvertFrom(System.Object) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String) System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary) System.ComponentModel.TypeConverter.GetConvertFromException(System.Object) System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type) System.ComponentModel.TypeConverter.GetCreateInstanceSupported() System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetProperties(System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[]) System.ComponentModel.TypeConverter.GetPropertiesSupported() System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValues() System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesExclusive() System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesSupported() System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.IsValid(System.Object) System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Design Assembly : MonoGame.Framework.dll Syntax public class Vector3TypeConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type sourceType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source CanConvertTo(ITypeDescriptorContext, Type) Declaration public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type destinationType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value System.Type destinationType Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)"
  },
  "_api/Microsoft.Xna.Framework.Content.ResourceContentManager.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ResourceContentManager.html",
    "title": "Class ResourceContentManager | MonoGame Documentation",
    "keywords": "Class ResourceContentManager Inheritance System.Object ContentManager ResourceContentManager Implements System.IDisposable Inherited Members ContentManager.Dispose() ContentManager.Dispose(Boolean) ContentManager.LoadLocalized<T>(String) ContentManager.Load<T>(String) ContentManager.ReadAsset<T>(String, Action<IDisposable>) ContentManager.LoadedAssets ContentManager.ReloadGraphicsAssets() ContentManager.ReloadAsset<T>(String, T) ContentManager.Unload() ContentManager.RootDirectory ContentManager.ServiceProvider System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public class ResourceContentManager : ContentManager, IDisposable Constructors | Improve this Doc View Source ResourceContentManager(IServiceProvider, ResourceManager) Declaration public ResourceContentManager(IServiceProvider servicesProvider, ResourceManager resource) Parameters Type Name Description System.IServiceProvider servicesProvider System.Resources.ResourceManager resource Methods | Improve this Doc View Source OpenStream(String) Declaration protected override Stream OpenStream(string assetName) Parameters Type Name Description System.String assetName Returns Type Description System.IO.Stream Overrides ContentManager.OpenStream(String) Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Content.ContentSerializerAttribute.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentSerializerAttribute.html",
    "title": "Class ContentSerializerAttribute | MonoGame Documentation",
    "keywords": "Class ContentSerializerAttribute Inheritance System.Object System.Attribute ContentSerializerAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class ContentSerializerAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ContentSerializerAttribute() Creates an instance of the attribute. Declaration public ContentSerializerAttribute() Properties | Improve this Doc View Source AllowNull Declaration public bool AllowNull { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CollectionItemName Returns the overriden XML element name or the default \"Item\". Declaration public string CollectionItemName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ElementName Declaration public string ElementName { get; set; } Property Value Type Description System.String | Improve this Doc View Source FlattenContent Declaration public bool FlattenContent { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HasCollectionItemName Returns true if the default CollectionItemName value was overridden. Declaration public bool HasCollectionItemName { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Optional Declaration public bool Optional { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SharedResource Declaration public bool SharedResource { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clone() Declaration public ContentSerializerAttribute Clone() Returns Type Description ContentSerializerAttribute Implements System.Runtime.InteropServices._Attribute"
  },
  "_api/Microsoft.Xna.Framework.BoundingBox.html": {
    "href": "_api/Microsoft.Xna.Framework.BoundingBox.html",
    "title": "Struct BoundingBox | MonoGame Documentation",
    "keywords": "Struct BoundingBox Implements System.IEquatable < BoundingBox > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct BoundingBox : IEquatable<BoundingBox> Constructors | Improve this Doc View Source BoundingBox(Vector3, Vector3) Declaration public BoundingBox(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min Vector3 max Fields | Improve this Doc View Source CornerCount Declaration public const int CornerCount = 8 Field Value Type Description System.Int32 | Improve this Doc View Source Max Declaration [DataMember] public Vector3 Max Field Value Type Description Vector3 | Improve this Doc View Source Min Declaration [DataMember] public Vector3 Min Field Value Type Description Vector3 Methods | Improve this Doc View Source Contains(BoundingBox) Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box Returns Type Description ContainmentType | Improve this Doc View Source Contains(ref BoundingBox, out ContainmentType) Declaration public void Contains(ref BoundingBox box, out ContainmentType result) Parameters Type Name Description BoundingBox box ContainmentType result | Improve this Doc View Source Contains(BoundingFrustum) Declaration public ContainmentType Contains(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum Returns Type Description ContainmentType | Improve this Doc View Source Contains(BoundingSphere) Declaration public ContainmentType Contains(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere Returns Type Description ContainmentType | Improve this Doc View Source Contains(ref BoundingSphere, out ContainmentType) Declaration public void Contains(ref BoundingSphere sphere, out ContainmentType result) Parameters Type Name Description BoundingSphere sphere ContainmentType result | Improve this Doc View Source Contains(Vector3) Declaration public ContainmentType Contains(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description ContainmentType | Improve this Doc View Source Contains(ref Vector3, out ContainmentType) Declaration public void Contains(ref Vector3 point, out ContainmentType result) Parameters Type Name Description Vector3 point ContainmentType result | Improve this Doc View Source CreateFromPoints(IEnumerable<Vector3>) Create a bounding box from the given list of points. Declaration public static BoundingBox CreateFromPoints(IEnumerable<Vector3> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < Vector3 > points The list of Vector3 instances defining the point cloud to bound Returns Type Description BoundingBox A bounding box that encapsulates the given point cloud. Exceptions Type Condition System.ArgumentException Thrown if the given list has no points. | Improve this Doc View Source CreateFromSphere(BoundingSphere) Declaration public static BoundingBox CreateFromSphere(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere Returns Type Description BoundingBox | Improve this Doc View Source CreateFromSphere(ref BoundingSphere, out BoundingBox) Declaration public static void CreateFromSphere(ref BoundingSphere sphere, out BoundingBox result) Parameters Type Name Description BoundingSphere sphere BoundingBox result | Improve this Doc View Source CreateMerged(BoundingBox, BoundingBox) Declaration public static BoundingBox CreateMerged(BoundingBox original, BoundingBox additional) Parameters Type Name Description BoundingBox original BoundingBox additional Returns Type Description BoundingBox | Improve this Doc View Source CreateMerged(ref BoundingBox, ref BoundingBox, out BoundingBox) Declaration public static void CreateMerged(ref BoundingBox original, ref BoundingBox additional, out BoundingBox result) Parameters Type Name Description BoundingBox original BoundingBox additional BoundingBox result | Improve this Doc View Source Equals(BoundingBox) Declaration public bool Equals(BoundingBox other) Parameters Type Name Description BoundingBox other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetCorners() Declaration public Vector3[] GetCorners() Returns Type Description Vector3 [] | Improve this Doc View Source GetCorners(Vector3[]) Declaration public void GetCorners(Vector3[] corners) Parameters Type Name Description Vector3 [] corners | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box Returns Type Description System.Boolean | Improve this Doc View Source Intersects(ref BoundingBox, out Boolean) Declaration public void Intersects(ref BoundingBox box, out bool result) Parameters Type Name Description BoundingBox box System.Boolean result | Improve this Doc View Source Intersects(BoundingFrustum) Declaration public bool Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum Returns Type Description System.Boolean | Improve this Doc View Source Intersects(BoundingSphere) Declaration public bool Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere Returns Type Description System.Boolean | Improve this Doc View Source Intersects(ref BoundingSphere, out Boolean) Declaration public void Intersects(ref BoundingSphere sphere, out bool result) Parameters Type Name Description BoundingSphere sphere System.Boolean result | Improve this Doc View Source Intersects(Plane) Declaration public PlaneIntersectionType Intersects(Plane plane) Parameters Type Name Description Plane plane Returns Type Description PlaneIntersectionType | Improve this Doc View Source Intersects(ref Plane, out PlaneIntersectionType) Declaration public void Intersects(ref Plane plane, out PlaneIntersectionType result) Parameters Type Name Description Plane plane PlaneIntersectionType result | Improve this Doc View Source Intersects(Ray) Declaration public float ? Intersects(Ray ray) Parameters Type Name Description Ray ray Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source Intersects(ref Ray, out Nullable<Single>) Declaration public void Intersects(ref Ray ray, out float ? result) Parameters Type Name Description Ray ray System.Nullable < System.Single > result | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(BoundingBox, BoundingBox) Declaration public static bool operator ==(BoundingBox a, BoundingBox b) Parameters Type Name Description BoundingBox a BoundingBox b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(BoundingBox, BoundingBox) Declaration public static bool operator !=(BoundingBox a, BoundingBox b) Parameters Type Name Description BoundingBox a BoundingBox b Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Audio.InstancePlayLimitException.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.InstancePlayLimitException.html",
    "title": "Class InstancePlayLimitException | MonoGame Documentation",
    "keywords": "Class InstancePlayLimitException The exception thrown when the system attempts to play more SoundEffectInstances than allotted. Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException InstancePlayLimitException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Runtime.InteropServices.ExternalException.ToString() System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax [DataContract] public sealed class InstancePlayLimitException : ExternalException, ISerializable, _Exception Remarks Most platforms have a hard limit on how many sounds can be played simultaneously. This exception is thrown when that limit is exceeded. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Audio.AudioEmitter.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.AudioEmitter.html",
    "title": "Class AudioEmitter | MonoGame Documentation",
    "keywords": "Class AudioEmitter Represents a 3D audio emitter. Used to simulate 3D audio effects. Inheritance System.Object AudioEmitter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class AudioEmitter Constructors | Improve this Doc View Source AudioEmitter() Initializes a new AudioEmitter instance. Declaration public AudioEmitter() Properties | Improve this Doc View Source DopplerScale Gets or sets a scale applied to the Doppler effect between the AudioEmitter and an AudioListener. Declaration public float DopplerScale { get; set; } Property Value Type Description System.Single Remarks Defaults to 1.0 A value of 1.0 leaves the Doppler effect unmodified. | Improve this Doc View Source Forward Gets or sets the emitter's forward vector. Declaration public Vector3 Forward { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Forward. (new Vector3(0, 0, -1)) Used with AudioListener.Velocity to calculate Doppler values. The Forward and Up values must be orthonormal. | Improve this Doc View Source Position Gets or sets the position of this emitter. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Up Gets or sets the emitter's Up vector. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Up. (new Vector3(0, -1, 1)). The Up and Forward vectors must be orthonormal. | Improve this Doc View Source Velocity Gets or sets the emitter's velocity vector. Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Zero. This value is only used when calculating Doppler values."
  },
  "_api/MonoGame.Utilities.ZlibStream.html": {
    "href": "_api/MonoGame.Utilities.ZlibStream.html",
    "title": "Class ZlibStream | MonoGame Documentation",
    "keywords": "Class ZlibStream Represents a Zlib stream for compression or decompression. Inheritance System.Object System.MarshalByRefObject System.IO.Stream ZlibStream Implements System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.Close() System.IO.Stream.Dispose() System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.ObjectInvariant() System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MonoGame.Utilities Assembly : MonoGame.Framework.dll Syntax public class ZlibStream : Stream, IDisposable Remarks The ZlibStream is a Decorator on a System.IO.Stream . It adds ZLIB compression or decompression to any stream. Using this stream, applications can compress or decompress data via stream Read() and Write() operations. Either compression or decompression can occur through either reading or writing. The compression format used is ZLIB, which is documented in IETF RFC 1950 , \"ZLIB Compressed Data Format Specification version 3.3\". This implementation of ZLIB always uses DEFLATE as the compression method. (see IETF RFC 1951 , \"DEFLATE Compressed Data Format Specification version 1.3.\") The ZLIB format allows for varying compression methods, window sizes, and dictionaries. This implementation always uses the DEFLATE compression method, a preset dictionary, and 15 window bits by default. This class is similar to DeflateStream, except that it adds the RFC1950 header and trailer bytes to a compressed stream when compressing, or expects the RFC1950 header and trailer bytes when decompressing. It is also similar to the MonoGame.Utilities.GZipStream . Constructors | Improve this Doc View Source ZlibStream(Stream, CompressionMode) Create a ZlibStream using the specified CompressionMode . Declaration public ZlibStream(Stream stream, CompressionMode mode) Parameters Type Name Description System.IO.Stream stream The stream which will be read or written. CompressionMode mode Indicates whether the ZlibStream will compress or decompress. Remarks When mode is CompressionMode.Compress , the ZlibStream will use the default compression level. The \"captive\" stream will be closed when the ZlibStream is closed. Examples This example uses a ZlibStream to compress a file, and writes the compressed data to another file. using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress)) { using (var raw = System.IO.File.Create(fileToCompress + \".zlib\")) { using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress)) { byte[] buffer = new byte[WORKING_BUFFER_SIZE]; int n; while ((n= input.Read(buffer, 0, buffer.Length)) != 0) { compressor.Write(buffer, 0, n); } } } } Using input As Stream = File.OpenRead(fileToCompress) Using raw As FileStream = File.Create(fileToCompress & \".zlib\") Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress) Dim buffer As Byte() = New Byte(4096) {} Dim n As Integer = -1 Do While (n <> 0) If (n > 0) Then compressor.Write(buffer, 0, n) End If n = input.Read(buffer, 0, buffer.Length) Loop End Using End Using End Using | Improve this Doc View Source ZlibStream(Stream, CompressionMode, CompressionLevel) Create a ZlibStream using the specified CompressionMode and the specified CompressionLevel . Declaration public ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level) Parameters Type Name Description System.IO.Stream stream The stream to be read or written while deflating or inflating. CompressionMode mode Indicates whether the ZlibStream will compress or decompress. CompressionLevel level A tuning knob to trade speed for effectiveness. Remarks When mode is CompressionMode.Decompress , the level parameter is ignored. The \"captive\" stream will be closed when the ZlibStream is closed. Examples This example uses a ZlibStream to compress data from a file, and writes the compressed data to another file. using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress)) { using (var raw = System.IO.File.Create(fileToCompress + \".zlib\")) { using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)) { byte[] buffer = new byte[WORKING_BUFFER_SIZE]; int n; while ((n= input.Read(buffer, 0, buffer.Length)) != 0) { compressor.Write(buffer, 0, n); } } } } Using input As Stream = File.OpenRead(fileToCompress) Using raw As FileStream = File.Create(fileToCompress & \".zlib\") Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression) Dim buffer As Byte() = New Byte(4096) {} Dim n As Integer = -1 Do While (n <> 0) If (n > 0) Then compressor.Write(buffer, 0, n) End If n = input.Read(buffer, 0, buffer.Length) Loop End Using End Using End Using | Improve this Doc View Source ZlibStream(Stream, CompressionMode, CompressionLevel, Boolean) Create a ZlibStream using the specified CompressionMode and the specified CompressionLevel , and explicitly specify whether the stream should be left open after Deflation or Inflation. Declaration public ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen) Parameters Type Name Description System.IO.Stream stream The stream which will be read or written. CompressionMode mode Indicates whether the ZlibStream will compress or decompress. CompressionLevel level A tuning knob to trade speed for effectiveness. This parameter is effective only when mode is CompressionMode.Compress . System.Boolean leaveOpen true if the application would like the stream to remain open after inflation/deflation. Remarks This constructor allows the application to request that the captive stream remain open after the deflation or inflation occurs. By default, after Close() is called on the stream, the captive stream is also closed. In some cases this is not desired, for example if the stream is a System.IO.MemoryStream that will be re-read after compression. Specify true for the leaveOpen parameter to leave the stream open. When mode is CompressionMode.Decompress , the level parameter is ignored. Examples This example shows how to use a ZlibStream to compress the data from a file, and store the result into another file. The filestream remains open to allow additional data to be written to it. using (var output = System.IO.File.Create(fileToCompress + \".zlib\")) { using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress)) { using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true)) { byte[] buffer = new byte[WORKING_BUFFER_SIZE]; int n; while ((n= input.Read(buffer, 0, buffer.Length)) != 0) { compressor.Write(buffer, 0, n); } } } // can write additional data to the output stream here } Using output As FileStream = File.Create(fileToCompress & \".zlib\") Using input As Stream = File.OpenRead(fileToCompress) Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True) Dim buffer As Byte() = New Byte(4096) {} Dim n As Integer = -1 Do While (n <> 0) If (n > 0) Then compressor.Write(buffer, 0, n) End If n = input.Read(buffer, 0, buffer.Length) Loop End Using End Using ' can write additional data to the output stream here. End Using | Improve this Doc View Source ZlibStream(Stream, CompressionMode, Boolean) Create a ZlibStream using the specified CompressionMode , and explicitly specify whether the captive stream should be left open after Deflation or Inflation. Declaration public ZlibStream(Stream stream, CompressionMode mode, bool leaveOpen) Parameters Type Name Description System.IO.Stream stream The stream which will be read or written. This is called the \"captive\" stream in other places in this documentation. CompressionMode mode Indicates whether the ZlibStream will compress or decompress. System.Boolean leaveOpen true if the application would like the stream to remain open after inflation/deflation. Remarks When mode is CompressionMode.Compress , the ZlibStream will use the default compression level. This constructor allows the application to request that the captive stream remain open after the deflation or inflation occurs. By default, after Close() is called on the stream, the captive stream is also closed. In some cases this is not desired, for example if the stream is a System.IO.MemoryStream that will be re-read after compression. Specify true for the leaveOpen parameter to leave the stream open. See the other overloads of this constructor for example code. Properties | Improve this Doc View Source BufferSize The size of the working buffer for the compression codec. Declaration public int BufferSize { get; set; } Property Value Type Description System.Int32 Remarks The working buffer is used for all stream operations. The default size is 1024 bytes. The minimum size is 128 bytes. You may get better performance with a larger buffer. Then again, you might not. You would have to test it. Set this before the first call to Read() or Write() on the stream. If you try to set it afterwards, it will throw. | Improve this Doc View Source CanRead Indicates whether the stream can be read. Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead Remarks The return value depends on whether the captive stream supports reading. | Improve this Doc View Source CanSeek Indicates whether the stream supports Seek operations. Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek Remarks Always returns false. | Improve this Doc View Source CanWrite Indicates whether the stream can be written. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite Remarks The return value depends on whether the captive stream supports writing. | Improve this Doc View Source FlushMode This property sets the flush behavior on the stream. Sorry, though, not sure exactly how to describe all the various settings. Declaration public virtual FlushType FlushMode { get; set; } Property Value Type Description FlushType | Improve this Doc View Source Length Reading this property always throws a System.NotSupportedException . Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this Doc View Source Position The position of the stream pointer. Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Remarks Setting this property always throws a System.NotSupportedException . Reading will return the total bytes written out, if used in writing, or the total bytes read in, if used in reading. The count may refer to compressed bytes or uncompressed bytes, depending on how you've used the stream. | Improve this Doc View Source TotalIn Returns the total number of bytes input so far. Declaration public virtual long TotalIn { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalOut Returns the total number of bytes output so far. Declaration public virtual long TotalOut { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source CompressBuffer(Byte[]) Compress a byte array into a new byte array using ZLIB. Declaration public static byte[] CompressBuffer(byte[] b) Parameters Type Name Description System.Byte [] b A buffer to compress. Returns Type Description System.Byte [] The data in compressed form Remarks Uncompress it with UncompressBuffer(Byte[]) . See Also CompressString(String) UncompressBuffer(Byte[]) | Improve this Doc View Source CompressString(String) Compress a string into a byte array using ZLIB. Declaration public static byte[] CompressString(string s) Parameters Type Name Description System.String s A string to compress. The string will first be encoded using UTF8, then compressed. Returns Type Description System.Byte [] The string in compressed form Remarks Uncompress it with UncompressString(Byte[]) . See Also UncompressString(Byte[]) CompressBuffer(Byte[]) MonoGame.Utilities.GZipStream.CompressString(System.String) | Improve this Doc View Source Dispose(Boolean) Dispose the stream. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing indicates whether the Dispose method was invoked by user code. Overrides System.IO.Stream.Dispose(System.Boolean) Remarks This may or may not result in a Close() call on the captive stream. See the constructors that have a leaveOpen parameter for more information. This method may be invoked in two distinct scenarios. If disposing == true, the method has been called directly or indirectly by a user's code, for example via the public Dispose() method. In this case, both managed and unmanaged resources can be referenced and disposed. If disposing == false, the method has been called by the runtime from inside the object finalizer and this method should not reference other objects; in that case only unmanaged resources must be referenced or disposed. | Improve this Doc View Source Flush() Flush the stream. Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Read data from the stream. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer into which the read data should be placed. System.Int32 offset the offset within that data array to put the first byte read. System.Int32 count the number of bytes to read. Returns Type Description System.Int32 the number of bytes read Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) Remarks If you wish to use the ZlibStream to compress data while reading, you can create a ZlibStream with CompressionMode.Compress , providing an uncompressed data stream. Then call Read() on that ZlibStream , and the data read will be compressed. If you wish to use the ZlibStream to decompress data while reading, you can create a ZlibStream with CompressionMode.Decompress , providing a readable compressed data stream. Then call Read() on that ZlibStream , and the data will be decompressed as it is read. A ZlibStream can be used for Read() or Write() , but not both. | Improve this Doc View Source Seek(Int64, SeekOrigin) Calling this method always throws a System.NotSupportedException . Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset The offset to seek to.... IF THIS METHOD ACTUALLY DID ANYTHING. System.IO.SeekOrigin origin The reference specifying how to apply the offset.... IF THIS METHOD ACTUALLY DID ANYTHING. Returns Type Description System.Int64 nothing. This method always throws. Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this Doc View Source SetLength(Int64) Calling this method always throws a System.NotSupportedException . Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value The new value for the stream length.... IF THIS METHOD ACTUALLY DID ANYTHING. Overrides System.IO.Stream.SetLength(System.Int64) | Improve this Doc View Source UncompressBuffer(Byte[]) Uncompress a ZLIB-compressed byte array into a byte array. Declaration public static byte[] UncompressBuffer(byte[] compressed) Parameters Type Name Description System.Byte [] compressed A buffer containing ZLIB-compressed data. Returns Type Description System.Byte [] The data in uncompressed form See Also CompressBuffer(Byte[]) UncompressString(Byte[]) | Improve this Doc View Source UncompressString(Byte[]) Uncompress a ZLIB-compressed byte array into a single string. Declaration public static string UncompressString(byte[] compressed) Parameters Type Name Description System.Byte [] compressed A buffer containing ZLIB-compressed data. Returns Type Description System.String The uncompressed string See Also CompressString(String) UncompressBuffer(Byte[]) | Improve this Doc View Source Write(Byte[], Int32, Int32) Write data to the stream. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer holding data to write to the stream. System.Int32 offset the offset within that data array to find the first byte to write. System.Int32 count the number of bytes to write. Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) Remarks If you wish to use the ZlibStream to compress data while writing, you can create a ZlibStream with CompressionMode.Compress , and a writable output stream. Then call Write() on that ZlibStream , providing uncompressed data as input. The data sent to the output stream will be the compressed form of the data written. If you wish to use the ZlibStream to decompress data while writing, you can create a ZlibStream with CompressionMode.Decompress , and a writable output stream. Then call Write() on that stream, providing previously compressed data. The data sent to the output stream will be the decompressed form of the data written. A ZlibStream can be used for Read() or Write() , but not both. Implements System.IDisposable See Also MonoGame.Utilities.GZipStream"
  },
  "_api/MonoGame.Utilities.html": {
    "href": "_api/MonoGame.Utilities.html",
    "title": "Namespace MonoGame.Utilities | MonoGame Documentation",
    "keywords": "Namespace MonoGame.Utilities Classes PlatformParameters ZlibStream Represents a Zlib stream for compression or decompression. Enums CompressionLevel The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress. CompressionMode An enum to specify the direction of transcoding - whether to compress or decompress. FlushType Describes how to flush the current deflate operation."
  },
  "_api/MonoGame.Utilities.Png.html": {
    "href": "_api/MonoGame.Utilities.Png.html",
    "title": "Namespace MonoGame.Utilities.Png | MonoGame Documentation",
    "keywords": "Namespace MonoGame.Utilities.Png Classes PngReader PngWriter"
  },
  "_api/MonoGame.Utilities.Png.PngWriter.html": {
    "href": "_api/MonoGame.Utilities.Png.PngWriter.html",
    "title": "Class PngWriter | MonoGame Documentation",
    "keywords": "Class PngWriter Inheritance System.Object PngWriter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : MonoGame.Utilities.Png Assembly : MonoGame.Framework.dll Syntax public class PngWriter Constructors | Improve this Doc View Source PngWriter() Declaration public PngWriter() Methods | Improve this Doc View Source Write(Texture2D, Stream) Declaration public void Write(Texture2D texture2D, Stream outputStream) Parameters Type Name Description Texture2D texture2D System.IO.Stream outputStream"
  },
  "_api/Microsoft.Xna.Framework.Media.Playlist.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.Playlist.html",
    "title": "Class Playlist | MonoGame Documentation",
    "keywords": "Class Playlist Inheritance System.Object Playlist Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class Playlist : IDisposable Properties | Improve this Doc View Source Duration Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.MediaState.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.MediaState.html",
    "title": "Enum MediaState | MonoGame Documentation",
    "keywords": "Enum MediaState Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public enum MediaState Fields Name Description Paused Playing Stopped"
  },
  "_api/Microsoft.Xna.Framework.Media.MediaSourceType.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.MediaSourceType.html",
    "title": "Enum MediaSourceType | MonoGame Documentation",
    "keywords": "Enum MediaSourceType Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public enum MediaSourceType Fields Name Description LocalDevice WindowsMediaConnect"
  },
  "_api/Microsoft.Xna.Framework.Media.MediaSource.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.MediaSource.html",
    "title": "Class MediaSource | MonoGame Documentation",
    "keywords": "Class MediaSource Inheritance System.Object MediaSource Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class MediaSource Properties | Improve this Doc View Source MediaSourceType Declaration public MediaSourceType MediaSourceType { get; } Property Value Type Description MediaSourceType | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetAvailableMediaSources() Declaration public static IList<MediaSource> GetAvailableMediaSources() Returns Type Description System.Collections.Generic.IList < MediaSource >"
  },
  "_api/Microsoft.Xna.Framework.Input.Joystick.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Joystick.html",
    "title": "Class Joystick | MonoGame Documentation",
    "keywords": "Class Joystick Allows interaction with joysticks. Unlike GamePad the number of Buttons/Axes/DPads is not limited. Inheritance System.Object Joystick Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public static class Joystick Properties | Improve this Doc View Source IsSupported Gets a value indicating whether the current platform supports reading raw joystick data. Declaration public static bool IsSupported { get; } Property Value Type Description System.Boolean true if the current platform supports reading raw joystick data; otherwise, false . Methods | Improve this Doc View Source GetCapabilities(Int32) Gets the capabilites of the joystick. Declaration public static JoystickCapabilities GetCapabilities(int index) Parameters Type Name Description System.Int32 index Index of the joystick you want to access. Returns Type Description JoystickCapabilities The capabilites of the joystick. | Improve this Doc View Source GetState(Int32) Gets the current state of the joystick. Declaration public static JoystickState GetState(int index) Parameters Type Name Description System.Int32 index Index of the joystick you want to access. Returns Type Description JoystickState The state of the joystick."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadType.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadType.html",
    "title": "Enum GamePadType | MonoGame Documentation",
    "keywords": "Enum GamePadType Defines a type of gamepad. Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public enum GamePadType Fields Name Description AlternateGuitar GamePad is an alternate guitar. ArcadeStick GamePad is an arcade stick. BigButtonPad GamePad is a big button pad. DancePad GamePad is a dance pad. DrumKit GamePad is a drum kit. FlightStick GamePad is a flight stick. GamePad GamePad is the XBOX controller. Guitar GamePad is a guitar. Unknown Unknown. Wheel GamePad is a wheel."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadTriggers.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadTriggers.html",
    "title": "Struct GamePadTriggers | MonoGame Documentation",
    "keywords": "Struct GamePadTriggers A struct that countains information on the left and the right trigger buttons. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct GamePadTriggers Constructors | Improve this Doc View Source GamePadTriggers(Single, Single) Initializes a new instance of the GamePadTriggers struct. Declaration public GamePadTriggers(float leftTrigger, float rightTrigger) Parameters Type Name Description System.Single leftTrigger The position of the left trigger, the value will get clamped between 0.0f and 1.0f. System.Single rightTrigger The position of the right trigger, the value will get clamped between 0.0f and 1.0f. Properties | Improve this Doc View Source Left Gets the position of the left trigger. Declaration public float Left { get; } Property Value Type Description System.Single A value from 0.0f to 1.0f representing left trigger. | Improve this Doc View Source Right Gets the position of the right trigger. Declaration public float Right { get; } Property Value Type Description System.Single A value from 0.0f to 1.0f representing right trigger. Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An object to compare to this instance. Returns Type Description System.Boolean true if obj is a GamePadTriggers and has the same value as this instance; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a GamePadTriggers object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current GamePadTriggers . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current GamePadTriggers . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(GamePadTriggers, GamePadTriggers) Determines whether two specified instances of GamePadTriggers are equal. Declaration public static bool operator ==(GamePadTriggers left, GamePadTriggers right) Parameters Type Name Description GamePadTriggers left The first object to compare. GamePadTriggers right The second object to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false. | Improve this Doc View Source Inequality(GamePadTriggers, GamePadTriggers) Determines whether two specified instances of GamePadTriggers are not equal. Declaration public static bool operator !=(GamePadTriggers left, GamePadTriggers right) Parameters Type Name Description GamePadTriggers left The first object to compare. GamePadTriggers right The second object to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadThumbSticks.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadThumbSticks.html",
    "title": "Struct GamePadThumbSticks | MonoGame Documentation",
    "keywords": "Struct GamePadThumbSticks A struct that represents the current stick (thumbstick) states for the controller. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct GamePadThumbSticks Constructors | Improve this Doc View Source GamePadThumbSticks(Vector2, Vector2) Declaration public GamePadThumbSticks(Vector2 leftPosition, Vector2 rightPosition) Parameters Type Name Description Vector2 leftPosition Vector2 rightPosition Properties | Improve this Doc View Source Left Gets a value indicating the position of the left stick (thumbstick). Declaration public Vector2 Left { get; } Property Value Type Description Vector2 A Vector2 indicating the current position of the left stick (thumbstick). | Improve this Doc View Source Right Gets a value indicating the position of the right stick (thumbstick). Declaration public Vector2 Right { get; } Property Value Type Description Vector2 A Vector2 indicating the current position of the right stick (thumbstick). Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An object to compare to this instance. Returns Type Description System.Boolean true if obj is a GamePadThumbSticks and has the same value as this instance; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a GamePadThumbSticks object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current GamePadThumbSticks . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current GamePadThumbSticks . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(GamePadThumbSticks, GamePadThumbSticks) Determines whether two specified instances of GamePadThumbSticks are equal. Declaration public static bool operator ==(GamePadThumbSticks left, GamePadThumbSticks right) Parameters Type Name Description GamePadThumbSticks left The first object to compare. GamePadThumbSticks right The second object to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false. | Improve this Doc View Source Inequality(GamePadThumbSticks, GamePadThumbSticks) Determines whether two specified instances of GamePadThumbSticks are not equal. Declaration public static bool operator !=(GamePadThumbSticks left, GamePadThumbSticks right) Parameters Type Name Description GamePadThumbSticks left The first object to compare. GamePadThumbSticks right The second object to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexElementUsage.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexElementUsage.html",
    "title": "Enum VertexElementUsage | MonoGame Documentation",
    "keywords": "Enum VertexElementUsage Defines usage for vertex elements. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum VertexElementUsage Fields Name Description Binormal Binormal data. BlendIndices Blending indices data. BlendWeight Blending weight data. Color Color data. Depth Depth data. Fog Fog data. Normal Normal data. PointSize Point size data. Usable for drawing point sprites. Position Position data. Sample Sampler data for specifies the displacement value to look up. Tangent Tangent data. TessellateFactor Single, positive float value, specifies a tessellation factor used in the tessellation unit to control the rate of tessellation. TextureCoordinate Texture coordinate data or can be used for user-defined data."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexElementFormat.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexElementFormat.html",
    "title": "Enum VertexElementFormat | MonoGame Documentation",
    "keywords": "Enum VertexElementFormat Defines vertex element formats. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum VertexElementFormat Fields Name Description Byte4 Four component unsigned byte. Color Four component, packed unsigned byte, mapped to 0 to 1 range. HalfVector2 Two component 16-bit floating point number. HalfVector4 Four component 16-bit floating point number. NormalizedShort2 Normalized, two component signed 16-bit integer. NormalizedShort4 Normalized, four component signed 16-bit integer. Short2 Two component signed 16-bit integer. Short4 Four component signed 16-bit integer. Single Single 32-bit floating point number. Vector2 Two component 32-bit floating point number. Vector3 Three component 32-bit floating point number. Vector4 Four component 32-bit floating point number."
  },
  "_api/Microsoft.Xna.Framework.Graphics.SwapChainRenderTarget.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SwapChainRenderTarget.html",
    "title": "Class SwapChainRenderTarget | MonoGame Documentation",
    "keywords": "Class SwapChainRenderTarget A swap chain used for rendering to a secondary GameWindow. Inheritance System.Object GraphicsResource Texture Texture2D RenderTarget2D SwapChainRenderTarget Implements System.IDisposable Inherited Members RenderTarget2D.DepthStencilFormat RenderTarget2D.MultiSampleCount RenderTarget2D.RenderTargetUsage RenderTarget2D.IsContentLost RenderTarget2D.ContentLost RenderTarget2D.GraphicsDeviceResetting() RenderTarget2D.CreateSampleDescription() RenderTarget2D.CreateShaderResourceView() RenderTarget2D.GetTexture2DDescription() Texture2D.Bounds Texture2D.Width Texture2D.Height Texture2D.SetData<T>(Int32, Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.SetData<T>(Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.SetData<T>(T[], Int32, Int32) Texture2D.SetData<T>(T[]) Texture2D.GetData<T>(Int32, Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.GetData<T>(Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture2D.GetData<T>(T[], Int32, Int32) Texture2D.GetData<T>(T[]) Texture2D.FromStream(GraphicsDevice, Stream) Texture2D.SaveAsJpeg(Stream, Int32, Int32) Texture2D.SaveAsPng(Stream, Int32, Int32) Texture2D.Reload(Stream) Texture2D.Shared Texture2D.Mipmap Texture2D.SampleDescription Texture.Format Texture.LevelCount Texture.GetSharedHandle() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class SwapChainRenderTarget : RenderTarget2D, IDisposable, IRenderTarget Remarks This is an extension and not part of stock XNA. It is currently implemented for Windows and DirectX only. Constructors | Improve this Doc View Source SwapChainRenderTarget(GraphicsDevice, IntPtr, Int32, Int32) Declaration public SwapChainRenderTarget(GraphicsDevice graphicsDevice, IntPtr windowHandle, int width, int height) Parameters Type Name Description GraphicsDevice graphicsDevice System.IntPtr windowHandle System.Int32 width System.Int32 height | Improve this Doc View Source SwapChainRenderTarget(GraphicsDevice, IntPtr, Int32, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage, PresentInterval) Declaration public SwapChainRenderTarget(GraphicsDevice graphicsDevice, IntPtr windowHandle, int width, int height, bool mipMap, SurfaceFormat surfaceFormat, DepthFormat depthFormat, int preferredMultiSampleCount, RenderTargetUsage usage, PresentInterval presentInterval) Parameters Type Name Description GraphicsDevice graphicsDevice System.IntPtr windowHandle System.Int32 width System.Int32 height System.Boolean mipMap SurfaceFormat surfaceFormat DepthFormat depthFormat System.Int32 preferredMultiSampleCount RenderTargetUsage usage PresentInterval presentInterval Fields | Improve this Doc View Source PresentInterval Declaration public PresentInterval PresentInterval Field Value Type Description PresentInterval Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides RenderTarget2D.Dispose(Boolean) | Improve this Doc View Source Present() Displays the contents of the active back buffer to the screen. Declaration public void Present() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.SurfaceFormat.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SurfaceFormat.html",
    "title": "Enum SurfaceFormat | MonoGame Documentation",
    "keywords": "Enum SurfaceFormat Defines types of surface formats. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum SurfaceFormat Fields Name Description Alpha8 Unsigned A 8-bit format for store 8 bits to alpha channel. Bgr32 For compatibility with WPF D3DImage. Bgr32SRgb Unsigned 32-bit sRGB pixel format that supports 8 bits per channel. 8 bits are unused. Bgr565 Unsigned 16-bit BGR pixel format for store 5 bits for blue, 6 bits for green, and 5 bits for red. Bgra32 For compatibility with WPF D3DImage. Bgra32SRgb Unsigned 32-bit sRGB pixel format that supports 8 bits per channel. Bgra4444 Unsigned 16-bit BGRA pixel format for store 4 bits per channel. Bgra5551 Unsigned 16-bit BGRA pixel format where 5 bits reserved for each color and last bit is reserved for alpha. Color Unsigned 32-bit ARGB pixel format for store 8 bits per channel. ColorSRgb Unsigned 32-bit RGBA sRGB pixel format that supports 8 bits per channel. Dxt1 DXT1. Texture format with compression. Surface dimensions must be a multiple 4. Dxt1a DXT1 version where 1-bit alpha is used. Dxt1SRgb DXT1. sRGB texture format with compression. Surface dimensions must be a multiple of 4. Dxt3 DXT3. Texture format with compression. Surface dimensions must be a multiple 4. Dxt3SRgb DXT3. sRGB texture format with compression. Surface dimensions must be a multiple of 4. Dxt5 DXT5. Texture format with compression. Surface dimensions must be a multiple 4. Dxt5SRgb DXT5. sRGB texture format with compression. Surface dimensions must be a multiple of 4. HalfSingle Float 16-bit R format for store 16 bits to red channel. HalfVector2 Float 32-bit RG format for store 16 bits per channel. HalfVector4 Float 64-bit ARGB format for store 16 bits per channel. HdrBlendable Float pixel format for high dynamic range data. NormalizedByte2 Signed 16-bit bump-map format for store 8 bits for u and v data. NormalizedByte4 Signed 16-bit bump-map format for store 8 bits per channel. Rg32 Unsigned 32-bit RG pixel format using 16 bits per channel. Rgba1010102 Unsigned 32-bit RGBA pixel format for store 10 bits for each color and 2 bits for alpha. Rgba64 Unsigned 64-bit RGBA pixel format using 16 bits per channel. RgbaAtcExplicitAlpha ATC/ATITC compression (Android) RgbaAtcInterpolatedAlpha ATC/ATITC compression (Android) RgbaPvrtc2Bpp PowerVR texture compression format (iOS and Android). RgbaPvrtc4Bpp PowerVR texture compression format (iOS and Android). RgbEtc1 Ericcson Texture Compression (Android) RgbPvrtc2Bpp PowerVR texture compression format (iOS and Android). RgbPvrtc4Bpp PowerVR texture compression format (iOS and Android). Single IEEE 32-bit R float format for store 32 bits to red channel. Vector2 IEEE 64-bit RG float format for store 32 bits per channel. Vector4 IEEE 128-bit RGBA float format for store 32 bits per channel."
  },
  "_api/Microsoft.Xna.Framework.Graphics.RenderTargetCube.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.RenderTargetCube.html",
    "title": "Class RenderTargetCube | MonoGame Documentation",
    "keywords": "Class RenderTargetCube Represents a texture cube that can be used as a render target. Inheritance System.Object GraphicsResource Texture TextureCube RenderTargetCube Implements System.IDisposable Inherited Members TextureCube.Size TextureCube.GetData<T>(CubeMapFace, T[]) TextureCube.GetData<T>(CubeMapFace, T[], Int32, Int32) TextureCube.GetData<T>(CubeMapFace, Int32, Nullable<Rectangle>, T[], Int32, Int32) TextureCube.SetData<T>(CubeMapFace, T[]) TextureCube.SetData<T>(CubeMapFace, T[], Int32, Int32) TextureCube.SetData<T>(CubeMapFace, Int32, Nullable<Rectangle>, T[], Int32, Int32) Texture.Format Texture.LevelCount Texture.GraphicsDeviceResetting() Texture.GetSharedHandle() Texture.CreateShaderResourceView() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class RenderTargetCube : TextureCube, IDisposable, IRenderTarget Constructors | Improve this Doc View Source RenderTargetCube(GraphicsDevice, Int32, Boolean, SurfaceFormat, DepthFormat) Initializes a new instance of the RenderTargetCube class. Declaration public RenderTargetCube(GraphicsDevice graphicsDevice, int size, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat) Parameters Type Name Description GraphicsDevice graphicsDevice The graphics device. System.Int32 size The width and height of a texture cube face in pixels. System.Boolean mipMap true to generate a full mipmap chain; otherwise false . SurfaceFormat preferredFormat The preferred format of the surface. DepthFormat preferredDepthFormat The preferred format of the depth-stencil buffer. | Improve this Doc View Source RenderTargetCube(GraphicsDevice, Int32, Boolean, SurfaceFormat, DepthFormat, Int32, RenderTargetUsage) Initializes a new instance of the RenderTargetCube class. Declaration public RenderTargetCube(GraphicsDevice graphicsDevice, int size, bool mipMap, SurfaceFormat preferredFormat, DepthFormat preferredDepthFormat, int preferredMultiSampleCount, RenderTargetUsage usage) Parameters Type Name Description GraphicsDevice graphicsDevice The graphics device. System.Int32 size The width and height of a texture cube face in pixels. System.Boolean mipMap true to generate a full mipmap chain; otherwise false . SurfaceFormat preferredFormat The preferred format of the surface. DepthFormat preferredDepthFormat The preferred format of the depth-stencil buffer. System.Int32 preferredMultiSampleCount The preferred number of multisample locations. RenderTargetUsage usage The usage mode of the render target. Properties | Improve this Doc View Source DepthStencilFormat Gets the depth-stencil buffer format of this render target. Declaration public DepthFormat DepthStencilFormat { get; } Property Value Type Description DepthFormat The format of the depth-stencil buffer. | Improve this Doc View Source IsContentLost Declaration public bool IsContentLost { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiSampleCount Gets the number of multisample locations. Declaration public int MultiSampleCount { get; } Property Value Type Description System.Int32 The number of multisample locations. | Improve this Doc View Source RenderTargetUsage Gets the usage mode of this render target. Declaration public RenderTargetUsage RenderTargetUsage { get; } Property Value Type Description RenderTargetUsage The usage mode of the render target. Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Texture.Dispose(Boolean) | Improve this Doc View Source GetDepthStencilView() Declaration [CLSCompliant(false)] public DepthStencilView GetDepthStencilView() Returns Type Description SharpDX.Direct3D11.DepthStencilView | Improve this Doc View Source GetRenderTargetView(Int32) Declaration [CLSCompliant(false)] public RenderTargetView GetRenderTargetView(int arraySlice) Parameters Type Name Description System.Int32 arraySlice Returns Type Description SharpDX.Direct3D11.RenderTargetView Events | Improve this Doc View Source ContentLost Declaration public event EventHandler<EventArgs> ContentLost Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.RenderTargetBinding.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.RenderTargetBinding.html",
    "title": "Struct RenderTargetBinding | MonoGame Documentation",
    "keywords": "Struct RenderTargetBinding Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct RenderTargetBinding Constructors | Improve this Doc View Source RenderTargetBinding(RenderTarget2D) Declaration public RenderTargetBinding(RenderTarget2D renderTarget) Parameters Type Name Description RenderTarget2D renderTarget | Improve this Doc View Source RenderTargetBinding(RenderTarget2D, Int32) Declaration public RenderTargetBinding(RenderTarget2D renderTarget, int arraySlice) Parameters Type Name Description RenderTarget2D renderTarget System.Int32 arraySlice | Improve this Doc View Source RenderTargetBinding(RenderTarget3D) Declaration public RenderTargetBinding(RenderTarget3D renderTarget) Parameters Type Name Description RenderTarget3D renderTarget | Improve this Doc View Source RenderTargetBinding(RenderTarget3D, Int32) Declaration public RenderTargetBinding(RenderTarget3D renderTarget, int arraySlice) Parameters Type Name Description RenderTarget3D renderTarget System.Int32 arraySlice | Improve this Doc View Source RenderTargetBinding(RenderTargetCube, CubeMapFace) Declaration public RenderTargetBinding(RenderTargetCube renderTarget, CubeMapFace cubeMapFace) Parameters Type Name Description RenderTargetCube renderTarget CubeMapFace cubeMapFace Properties | Improve this Doc View Source ArraySlice Declaration public int ArraySlice { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RenderTarget Declaration public Texture RenderTarget { get; } Property Value Type Description Texture Operators | Improve this Doc View Source Implicit(RenderTarget2D to RenderTargetBinding) Declaration public static implicit operator RenderTargetBinding(RenderTarget2D renderTarget) Parameters Type Name Description RenderTarget2D renderTarget Returns Type Description RenderTargetBinding | Improve this Doc View Source Implicit(RenderTarget3D to RenderTargetBinding) Declaration public static implicit operator RenderTargetBinding(RenderTarget3D renderTarget) Parameters Type Name Description RenderTarget3D renderTarget Returns Type Description RenderTargetBinding"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.html",
    "title": "Struct NormalizedByte4 | MonoGame Documentation",
    "keywords": "Struct NormalizedByte4 Implements IPackedVector < System.UInt32 > IPackedVector System.IEquatable < NormalizedByte4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct NormalizedByte4 : IPackedVector<uint>, IPackedVector, IEquatable<NormalizedByte4> Constructors | Improve this Doc View Source NormalizedByte4(Vector4) Declaration public NormalizedByte4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source NormalizedByte4(Single, Single, Single, Single) Declaration public NormalizedByte4(float x, float y, float z, float w) Parameters Type Name Description System.Single x System.Single y System.Single z System.Single w Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(NormalizedByte4) Declaration public bool Equals(NormalizedByte4 other) Parameters Type Name Description NormalizedByte4 other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Declaration public Vector4 ToVector4() Returns Type Description Vector4 Operators | Improve this Doc View Source Equality(NormalizedByte4, NormalizedByte4) Declaration public static bool operator ==(NormalizedByte4 a, NormalizedByte4 b) Parameters Type Name Description NormalizedByte4 a NormalizedByte4 b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NormalizedByte4, NormalizedByte4) Declaration public static bool operator !=(NormalizedByte4 a, NormalizedByte4 b) Parameters Type Name Description NormalizedByte4 a NormalizedByte4 b Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.html",
    "title": "Struct NormalizedByte2 | MonoGame Documentation",
    "keywords": "Struct NormalizedByte2 Implements IPackedVector < System.UInt16 > IPackedVector System.IEquatable < NormalizedByte2 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct NormalizedByte2 : IPackedVector<ushort>, IPackedVector, IEquatable<NormalizedByte2> Constructors | Improve this Doc View Source NormalizedByte2(Vector2) Declaration public NormalizedByte2(Vector2 vector) Parameters Type Name Description Vector2 vector | Improve this Doc View Source NormalizedByte2(Single, Single) Declaration public NormalizedByte2(float x, float y) Parameters Type Name Description System.Single x System.Single y Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public ushort PackedValue { get; set; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source Equals(NormalizedByte2) Declaration public bool Equals(NormalizedByte2 other) Parameters Type Name Description NormalizedByte2 other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector2() Declaration public Vector2 ToVector2() Returns Type Description Vector2 Operators | Improve this Doc View Source Equality(NormalizedByte2, NormalizedByte2) Declaration public static bool operator ==(NormalizedByte2 a, NormalizedByte2 b) Parameters Type Name Description NormalizedByte2 a NormalizedByte2 b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NormalizedByte2, NormalizedByte2) Declaration public static bool operator !=(NormalizedByte2 a, NormalizedByte2 b) Parameters Type Name Description NormalizedByte2 a NormalizedByte2 b Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source IPackedVector.ToVector4() Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelMeshCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelMeshCollection.html",
    "title": "Class ModelMeshCollection | MonoGame Documentation",
    "keywords": "Class ModelMeshCollection Represents a collection of ModelMesh objects. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection < ModelMesh > ModelMeshCollection Implements System.Collections.Generic.IList < ModelMesh > System.Collections.Generic.ICollection < ModelMesh > System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList < ModelMesh > System.Collections.Generic.IReadOnlyCollection < ModelMesh > System.Collections.Generic.IEnumerable < ModelMesh > System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Contains(Microsoft.Xna.Framework.Graphics.ModelMesh) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.CopyTo(Microsoft.Xna.Framework.Graphics.ModelMesh[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.IndexOf(Microsoft.Xna.Framework.Graphics.ModelMesh) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMesh>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMesh>.set_Item(System.Int32, Microsoft.Xna.Framework.Graphics.ModelMesh) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Add(Microsoft.Xna.Framework.Graphics.ModelMesh) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMesh>.Insert(System.Int32, Microsoft.Xna.Framework.Graphics.ModelMesh) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Remove(Microsoft.Xna.Framework.Graphics.ModelMesh) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMesh>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Count System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.Items System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelMesh>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelMesh>.System.Collections.IList.Item[System.Int32] System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ModelMeshCollection : ReadOnlyCollection<ModelMesh>, IList<ModelMesh>, ICollection<ModelMesh>, IList, ICollection, IReadOnlyList<ModelMesh>, IReadOnlyCollection<ModelMesh>, IEnumerable<ModelMesh>, IEnumerable Properties | Improve this Doc View Source Item[String] Retrieves a ModelMesh from the collection, given the name of the mesh. Declaration public ModelMesh this[string meshName] { get; } Parameters Type Name Description System.String meshName The name of the mesh to retrieve. Property Value Type Description ModelMesh Methods | Improve this Doc View Source GetEnumerator() Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection. Declaration public ModelMeshCollection.Enumerator GetEnumerator() Returns Type Description ModelMeshCollection.Enumerator | Improve this Doc View Source TryGetValue(String, out ModelMesh) Finds a mesh with a given name if it exists in the collection. Declaration public bool TryGetValue(string meshName, out ModelMesh value) Parameters Type Name Description System.String meshName The name of the mesh to find. ModelMesh value The mesh named meshName, if found. Returns Type Description System.Boolean true if a mesh was found Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.html",
    "title": "Struct ModelMeshCollection.Enumerator | MonoGame Documentation",
    "keywords": "Struct ModelMeshCollection.Enumerator Provides the ability to iterate through the bones in an ModelMeshCollection. Implements System.Collections.Generic.IEnumerator < ModelMesh > System.IDisposable System.Collections.IEnumerator Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct Enumerator : IEnumerator<ModelMesh>, IDisposable, IEnumerator Properties | Improve this Doc View Source Current Gets the current element in the ModelMeshCollection. Declaration public ModelMesh Current { get; } Property Value Type Description ModelMesh Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the ModelMeshCollection. Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsResource.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsResource.html",
    "title": "Class GraphicsResource | MonoGame Documentation",
    "keywords": "Class GraphicsResource Inheritance System.Object GraphicsResource BlendState DepthStencilState Effect IndexBuffer OcclusionQuery RasterizerState SamplerState SpriteBatch Texture VertexBuffer VertexDeclaration Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public abstract class GraphicsResource : IDisposable Properties | Improve this Doc View Source GraphicsDevice Declaration public GraphicsDevice GraphicsDevice { get; } Property Value Type Description GraphicsDevice | Improve this Doc View Source IsDisposed Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Tag Declaration public object Tag { get; set; } Property Value Type Description System.Object Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) The method that derived classes should override to implement disposing of managed and native resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True if managed objects should be disposed. Remarks Native resources should always be released regardless of the value of the disposing parameter. | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GraphicsDeviceResetting() Called before the device is reset. Allows graphics resources to invalidate their state so they can be recreated after the device reset. Warning: This may be called after a call to Dispose() up until the resource is garbage collected. Declaration protected virtual void GraphicsDeviceResetting() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Events | Improve this Doc View Source Disposing Declaration public event EventHandler<EventArgs> Disposing Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsProfile.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsProfile.html",
    "title": "Enum GraphicsProfile | MonoGame Documentation",
    "keywords": "Enum GraphicsProfile Defines a set of graphic capabilities. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum GraphicsProfile Fields Name Description HiDef Use the largest available set of graphic features and capabilities to target devices, that have more enhanced graphic capabilities. Reach Use a limited set of graphic features and capabilities, allowing the game to support the widest variety of devices."
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.html",
    "title": "Struct Bgra4444 | MonoGame Documentation",
    "keywords": "Struct Bgra4444 Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w. Implements IPackedVector < System.UInt16 > IPackedVector System.IEquatable < Bgra4444 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Bgra4444 : IPackedVector<ushort>, IPackedVector, IEquatable<Bgra4444> Constructors | Improve this Doc View Source Bgra4444(Vector4) Creates a new instance of Bgra4444. Declaration public Bgra4444(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components for the packed vector. | Improve this Doc View Source Bgra4444(Single, Single, Single, Single) Creates a new instance of Bgra4444. Declaration public Bgra4444(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x component System.Single y The y component System.Single z The z component System.Single w The w component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public ushort PackedValue { get; set; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source Equals(Bgra4444) Compares another Bgra4444 packed vector with the packed vector. Declaration public bool Equals(Bgra4444 other) Parameters Type Name Description Bgra4444 other The Bgra4444 packed vector to compare. Returns Type Description System.Boolean true if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean true if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Gets the packed vector in Vector4 format. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Operators | Improve this Doc View Source Equality(Bgra4444, Bgra4444) Declaration public static bool operator ==(Bgra4444 lhs, Bgra4444 rhs) Parameters Type Name Description Bgra4444 lhs Bgra4444 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Bgra4444, Bgra4444) Declaration public static bool operator !=(Bgra4444 lhs, Bgra4444 rhs) Parameters Type Name Description Bgra4444 lhs Bgra4444 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Model.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Model.html",
    "title": "Class Model | MonoGame Documentation",
    "keywords": "Class Model A basic 3D model with per mesh parent bones. Inheritance System.Object Model Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class Model Constructors | Improve this Doc View Source Model(GraphicsDevice, List<ModelBone>, List<ModelMesh>) Constructs a model. Declaration public Model(GraphicsDevice graphicsDevice, List<ModelBone> bones, List<ModelMesh> meshes) Parameters Type Name Description GraphicsDevice graphicsDevice A valid reference to GraphicsDevice . System.Collections.Generic.List < ModelBone > bones The collection of bones. System.Collections.Generic.List < ModelMesh > meshes The collection of meshes. Exceptions Type Condition System.ArgumentNullException graphicsDevice is null. System.ArgumentNullException bones is null. System.ArgumentNullException meshes is null. Properties | Improve this Doc View Source Bones A collection of ModelBone objects which describe how each mesh in the mesh collection for this model relates to its parent mesh. Declaration public ModelBoneCollection Bones { get; } Property Value Type Description ModelBoneCollection | Improve this Doc View Source Meshes A collection of ModelMesh objects which compose the model. Each ModelMesh in a model may be moved independently and may be composed of multiple materials identified as ModelMeshPart objects. Declaration public ModelMeshCollection Meshes { get; } Property Value Type Description ModelMeshCollection | Improve this Doc View Source Root Root bone for this model. Declaration public ModelBone Root { get; set; } Property Value Type Description ModelBone | Improve this Doc View Source Tag Custom attached object. Skinning data is example of attached object for model. Declaration public object Tag { get; set; } Property Value Type Description System.Object Methods | Improve this Doc View Source CopyAbsoluteBoneTransformsTo(Matrix[]) Copies bone transforms relative to all parent bones of the each bone from this model to a given array. Declaration public void CopyAbsoluteBoneTransformsTo(Matrix[] destinationBoneTransforms) Parameters Type Name Description Matrix [] destinationBoneTransforms The array receiving the transformed bones. | Improve this Doc View Source CopyBoneTransformsFrom(Matrix[]) Copies bone transforms relative to Root bone from a given array to this model. Declaration public void CopyBoneTransformsFrom(Matrix[] sourceBoneTransforms) Parameters Type Name Description Matrix [] sourceBoneTransforms The array of prepared bone transform data. Exceptions Type Condition System.ArgumentNullException sourceBoneTransforms is null. System.ArgumentOutOfRangeException sourceBoneTransforms is invalid. | Improve this Doc View Source CopyBoneTransformsTo(Matrix[]) Copies bone transforms relative to Root bone from this model to a given array. Declaration public void CopyBoneTransformsTo(Matrix[] destinationBoneTransforms) Parameters Type Name Description Matrix [] destinationBoneTransforms The array receiving the transformed bones. Exceptions Type Condition System.ArgumentNullException destinationBoneTransforms is null. System.ArgumentOutOfRangeException destinationBoneTransforms is invalid. | Improve this Doc View Source Draw(Matrix, Matrix, Matrix) Draws the model meshes. Declaration public void Draw(Matrix world, Matrix view, Matrix projection) Parameters Type Name Description Matrix world The world transform. Matrix view The view transform. Matrix projection The projection transform."
  },
  "_api/Microsoft.Xna.Framework.Graphics.IVertexType.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IVertexType.html",
    "title": "Interface IVertexType | MonoGame Documentation",
    "keywords": "Interface IVertexType Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public interface IVertexType Properties | Improve this Doc View Source VertexDeclaration Declaration VertexDeclaration VertexDeclaration { get; } Property Value Type Description VertexDeclaration"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.html",
    "title": "Enum GraphicsAdapter.DriverType | MonoGame Documentation",
    "keywords": "Enum GraphicsAdapter.DriverType Defines the driver type for graphics adapter. Usable only on DirectX platforms for now. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum DriverType Fields Name Description FastSoftware Useful when Hardware acceleration does not work. Hardware Hardware device been used for rendering. Maximum speed and performance. Reference Emulates the hardware device on CPU. Slowly, only for testing."
  },
  "_api/Microsoft.Xna.Framework.Graphics.FillMode.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.FillMode.html",
    "title": "Enum FillMode | MonoGame Documentation",
    "keywords": "Enum FillMode Defines options for filling the primitive. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum FillMode Fields Name Description Solid Draw solid faces for each primitive. WireFrame Draw lines for each primitive."
  },
  "_api/Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.html",
    "title": "Class DynamicVertexBuffer | MonoGame Documentation",
    "keywords": "Class DynamicVertexBuffer Inheritance System.Object GraphicsResource VertexBuffer DynamicVertexBuffer Implements System.IDisposable Inherited Members VertexBuffer.VertexCount VertexBuffer.VertexDeclaration VertexBuffer.BufferUsage VertexBuffer.GraphicsDeviceResetting() VertexBuffer.GetData<T>(Int32, T[], Int32, Int32, Int32) VertexBuffer.GetData<T>(T[], Int32, Int32) VertexBuffer.GetData<T>(T[]) VertexBuffer.SetData<T>(Int32, T[], Int32, Int32, Int32) VertexBuffer.SetData<T>(T[], Int32, Int32) VertexBuffer.SetData<T>(T[]) VertexBuffer.SetDataInternal<T>(Int32, T[], Int32, Int32, Int32, SetDataOptions) VertexBuffer.Dispose(Boolean) GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class DynamicVertexBuffer : VertexBuffer, IDisposable Constructors | Improve this Doc View Source DynamicVertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage) Declaration public DynamicVertexBuffer(GraphicsDevice graphicsDevice, VertexDeclaration vertexDeclaration, int vertexCount, BufferUsage bufferUsage) Parameters Type Name Description GraphicsDevice graphicsDevice VertexDeclaration vertexDeclaration System.Int32 vertexCount BufferUsage bufferUsage | Improve this Doc View Source DynamicVertexBuffer(GraphicsDevice, Type, Int32, BufferUsage) Declaration public DynamicVertexBuffer(GraphicsDevice graphicsDevice, Type type, int vertexCount, BufferUsage bufferUsage) Parameters Type Name Description GraphicsDevice graphicsDevice System.Type type System.Int32 vertexCount BufferUsage bufferUsage Properties | Improve this Doc View Source IsContentLost Declaration public bool IsContentLost { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source SetData<T>(T[], Int32, Int32, SetDataOptions) Declaration public void SetData<T>(T[] data, int startIndex, int elementCount, SetDataOptions options)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount SetDataOptions options Type Parameters Name Description T | Improve this Doc View Source SetData<T>(Int32, T[], Int32, Int32, Int32, SetDataOptions) Declaration public void SetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride, SetDataOptions options)where T : struct Parameters Type Name Description System.Int32 offsetInBytes T[] data System.Int32 startIndex System.Int32 elementCount System.Int32 vertexStride SetDataOptions options Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.html",
    "title": "Class DynamicIndexBuffer | MonoGame Documentation",
    "keywords": "Class DynamicIndexBuffer Inheritance System.Object GraphicsResource IndexBuffer DynamicIndexBuffer Implements System.IDisposable Inherited Members IndexBuffer.BufferUsage IndexBuffer.IndexCount IndexBuffer.IndexElementSize IndexBuffer.GraphicsDeviceResetting() IndexBuffer.GetData<T>(Int32, T[], Int32, Int32) IndexBuffer.GetData<T>(T[], Int32, Int32) IndexBuffer.GetData<T>(T[]) IndexBuffer.SetData<T>(Int32, T[], Int32, Int32) IndexBuffer.SetData<T>(T[], Int32, Int32) IndexBuffer.SetData<T>(T[]) IndexBuffer.SetDataInternal<T>(Int32, T[], Int32, Int32, SetDataOptions) IndexBuffer.Dispose(Boolean) GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class DynamicIndexBuffer : IndexBuffer, IDisposable Constructors | Improve this Doc View Source DynamicIndexBuffer(GraphicsDevice, IndexElementSize, Int32, BufferUsage) Declaration public DynamicIndexBuffer(GraphicsDevice graphicsDevice, IndexElementSize indexElementSize, int indexCount, BufferUsage usage) Parameters Type Name Description GraphicsDevice graphicsDevice IndexElementSize indexElementSize System.Int32 indexCount BufferUsage usage | Improve this Doc View Source DynamicIndexBuffer(GraphicsDevice, Type, Int32, BufferUsage) Declaration public DynamicIndexBuffer(GraphicsDevice graphicsDevice, Type indexType, int indexCount, BufferUsage usage) Parameters Type Name Description GraphicsDevice graphicsDevice System.Type indexType System.Int32 indexCount BufferUsage usage Properties | Improve this Doc View Source IsContentLost Declaration public bool IsContentLost { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source SetData<T>(T[], Int32, Int32, SetDataOptions) Declaration public void SetData<T>(T[] data, int startIndex, int elementCount, SetDataOptions options)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount SetDataOptions options Type Parameters Name Description T | Improve this Doc View Source SetData<T>(Int32, T[], Int32, Int32, SetDataOptions) Declaration public void SetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, SetDataOptions options)where T : struct Parameters Type Name Description System.Int32 offsetInBytes T[] data System.Int32 startIndex System.Int32 elementCount SetDataOptions options Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.DualTextureEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.DualTextureEffect.html",
    "title": "Class DualTextureEffect | MonoGame Documentation",
    "keywords": "Class DualTextureEffect Built-in effect that supports two-layer multitexturing. Inheritance System.Object GraphicsResource Effect DualTextureEffect Implements System.IDisposable IEffectMatrices IEffectFog Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class DualTextureEffect : Effect, IDisposable, IEffectMatrices, IEffectFog Constructors | Improve this Doc View Source DualTextureEffect(DualTextureEffect) Creates a new DualTextureEffect by cloning parameter settings from an existing instance. Declaration protected DualTextureEffect(DualTextureEffect cloneSource) Parameters Type Name Description DualTextureEffect cloneSource | Improve this Doc View Source DualTextureEffect(GraphicsDevice) Creates a new DualTextureEffect with default parameter settings. Declaration public DualTextureEffect(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device Properties | Improve this Doc View Source Alpha Gets or sets the material alpha. Declaration public float Alpha { get; set; } Property Value Type Description System.Single | Improve this Doc View Source DiffuseColor Gets or sets the material diffuse color (range 0 to 1). Declaration public Vector3 DiffuseColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogColor Gets or sets the fog color. Declaration public Vector3 FogColor { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FogEnabled Gets or sets the fog enable flag. Declaration public bool FogEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FogEnd Gets or sets the fog end distance. Declaration public float FogEnd { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FogStart Gets or sets the fog start distance. Declaration public float FogStart { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Projection Gets or sets the projection matrix. Declaration public Matrix Projection { get; set; } Property Value Type Description Matrix | Improve this Doc View Source Texture Gets or sets the current base texture. Declaration public Texture2D Texture { get; set; } Property Value Type Description Texture2D | Improve this Doc View Source Texture2 Gets or sets the current overlay texture. Declaration public Texture2D Texture2 { get; set; } Property Value Type Description Texture2D | Improve this Doc View Source VertexColorEnabled Gets or sets whether vertex color is enabled. Declaration public bool VertexColorEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source View Gets or sets the view matrix. Declaration public Matrix View { get; set; } Property Value Type Description Matrix | Improve this Doc View Source World Gets or sets the world matrix. Declaration public Matrix World { get; set; } Property Value Type Description Matrix Methods | Improve this Doc View Source Clone() Creates a clone of the current DualTextureEffect instance. Declaration public override Effect Clone() Returns Type Description Effect Overrides Effect.Clone() | Improve this Doc View Source OnApply() Lazily computes derived parameter values immediately before applying the effect. Declaration protected override void OnApply() Overrides Effect.OnApply() Implements System.IDisposable IEffectMatrices IEffectFog"
  },
  "_api/Microsoft.Xna.Framework.Graphics.BlendFunction.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.BlendFunction.html",
    "title": "Enum BlendFunction | MonoGame Documentation",
    "keywords": "Enum BlendFunction Defines a function for color blending. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum BlendFunction Fields Name Description Add The function will adds destination to the source. (srcColor * srcBlend) + (destColor * destBlend) Max The function will extracts maximum of the source and destination. max((srcColor * srcBlend),(destColor * destBlend)) Min The function will extracts minimum of the source and destination. min((srcColor * srcBlend),(destColor * destBlend)) ReverseSubtract The function will subtracts source from destination. (destColor * destBlend) - (srcColor * srcBlend) Subtract The function will subtracts destination from source. (srcColor * srcBlend) − (destColor * destBlend)"
  },
  "_api/Microsoft.Xna.Framework.GameRunBehavior.html": {
    "href": "_api/Microsoft.Xna.Framework.GameRunBehavior.html",
    "title": "Enum GameRunBehavior | MonoGame Documentation",
    "keywords": "Enum GameRunBehavior Defines how Game should be runned. Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum GameRunBehavior Fields Name Description Asynchronous The game loop will be runned asynchronous. Synchronous The game loop will be runned synchronous."
  },
  "_api/Microsoft.Xna.Framework.Design.html": {
    "href": "_api/Microsoft.Xna.Framework.Design.html",
    "title": "Namespace Microsoft.Xna.Framework.Design | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Design Classes Vector2TypeConverter Vector3TypeConverter Vector4TypeConverter"
  },
  "_api/Microsoft.Xna.Framework.CurveContinuity.html": {
    "href": "_api/Microsoft.Xna.Framework.CurveContinuity.html",
    "title": "Enum CurveContinuity | MonoGame Documentation",
    "keywords": "Enum CurveContinuity Defines the continuity of keys on a Curve . Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum CurveContinuity Fields Name Description Smooth Interpolation can be used between this key and the next. Step Interpolation cannot be used. A position between the two points returns this point."
  },
  "_api/Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.html",
    "title": "Class ContentSerializerRuntimeTypeAttribute | MonoGame Documentation",
    "keywords": "Class ContentSerializerRuntimeTypeAttribute This is used to specify the type to use when deserializing this object at runtime. Inheritance System.Object System.Attribute ContentSerializerRuntimeTypeAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public sealed class ContentSerializerRuntimeTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ContentSerializerRuntimeTypeAttribute(String) Creates an instance of the attribute. Declaration public ContentSerializerRuntimeTypeAttribute(string runtimeType) Parameters Type Name Description System.String runtimeType The name of the type to use at runtime. Properties | Improve this Doc View Source RuntimeType The name of the type to use at runtime. Declaration public string RuntimeType { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "_api/Microsoft.Xna.Framework.Color.html": {
    "href": "_api/Microsoft.Xna.Framework.Color.html",
    "title": "Struct Color | MonoGame Documentation",
    "keywords": "Struct Color Describes a 32-bit packed color. Implements System.IEquatable < Color > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Color : IEquatable<Color> Constructors | Improve this Doc View Source Color(Color, Int32) Constructs an RGBA color from a Color and an alpha value. Declaration public Color(Color color, int alpha) Parameters Type Name Description Color color A Color for RGB values of new Color instance. System.Int32 alpha The alpha component value from 0 to 255. | Improve this Doc View Source Color(Color, Single) Constructs an RGBA color from color and alpha value. Declaration public Color(Color color, float alpha) Parameters Type Name Description Color color A Color for RGB values of new Color instance. System.Single alpha Alpha component value from 0.0f to 1.0f. | Improve this Doc View Source Color(Vector3) Constructs an RGBA color from the XYZ unit length components of a vector. Alpha value will be opaque. Declaration public Color(Vector3 color) Parameters Type Name Description Vector3 color A Vector3 representing color. | Improve this Doc View Source Color(Vector4) Constructs an RGBA color from the XYZW unit length components of a vector. Declaration public Color(Vector4 color) Parameters Type Name Description Vector4 color A Vector4 representing color. | Improve this Doc View Source Color(Byte, Byte, Byte, Byte) Constructs an RGBA color from scalars representing red, green, blue and alpha values. Declaration public Color(byte r, byte g, byte b, byte alpha) Parameters Type Name Description System.Byte r System.Byte g System.Byte b System.Byte alpha Remarks This overload sets the values directly without clamping, and may therefore be faster than the other overloads. | Improve this Doc View Source Color(Int32, Int32, Int32) Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque. Declaration public Color(int r, int g, int b) Parameters Type Name Description System.Int32 r Red component value from 0 to 255. System.Int32 g Green component value from 0 to 255. System.Int32 b Blue component value from 0 to 255. | Improve this Doc View Source Color(Int32, Int32, Int32, Int32) Constructs an RGBA color from scalars representing red, green, blue and alpha values. Declaration public Color(int r, int g, int b, int alpha) Parameters Type Name Description System.Int32 r Red component value from 0 to 255. System.Int32 g Green component value from 0 to 255. System.Int32 b Blue component value from 0 to 255. System.Int32 alpha Alpha component value from 0 to 255. | Improve this Doc View Source Color(Single, Single, Single) Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque. Declaration public Color(float r, float g, float b) Parameters Type Name Description System.Single r Red component value from 0.0f to 1.0f. System.Single g Green component value from 0.0f to 1.0f. System.Single b Blue component value from 0.0f to 1.0f. | Improve this Doc View Source Color(Single, Single, Single, Single) Constructs an RGBA color from scalars representing red, green, blue and alpha values. Declaration public Color(float r, float g, float b, float alpha) Parameters Type Name Description System.Single r Red component value from 0.0f to 1.0f. System.Single g Green component value from 0.0f to 1.0f. System.Single b Blue component value from 0.0f to 1.0f. System.Single alpha Alpha component value from 0.0f to 1.0f. | Improve this Doc View Source Color(UInt32) Constructs an RGBA color from a packed value. The value is a 32-bit unsigned integer, with R in the least significant octet. Declaration [CLSCompliant(false)] public Color(uint packedValue) Parameters Type Name Description System.UInt32 packedValue The packed value. Properties | Improve this Doc View Source A Gets or sets the alpha component. Declaration [DataMember] public byte A { get; set; } Property Value Type Description System.Byte | Improve this Doc View Source AliceBlue AliceBlue color (R:240,G:248,B:255,A:255). Declaration public static Color AliceBlue { get; } Property Value Type Description Color | Improve this Doc View Source AntiqueWhite AntiqueWhite color (R:250,G:235,B:215,A:255). Declaration public static Color AntiqueWhite { get; } Property Value Type Description Color | Improve this Doc View Source Aqua Aqua color (R:0,G:255,B:255,A:255). Declaration public static Color Aqua { get; } Property Value Type Description Color | Improve this Doc View Source Aquamarine Aquamarine color (R:127,G:255,B:212,A:255). Declaration public static Color Aquamarine { get; } Property Value Type Description Color | Improve this Doc View Source Azure Azure color (R:240,G:255,B:255,A:255). Declaration public static Color Azure { get; } Property Value Type Description Color | Improve this Doc View Source B Gets or sets the blue component. Declaration [DataMember] public byte B { get; set; } Property Value Type Description System.Byte | Improve this Doc View Source Beige Beige color (R:245,G:245,B:220,A:255). Declaration public static Color Beige { get; } Property Value Type Description Color | Improve this Doc View Source Bisque Bisque color (R:255,G:228,B:196,A:255). Declaration public static Color Bisque { get; } Property Value Type Description Color | Improve this Doc View Source Black Black color (R:0,G:0,B:0,A:255). Declaration public static Color Black { get; } Property Value Type Description Color | Improve this Doc View Source BlanchedAlmond BlanchedAlmond color (R:255,G:235,B:205,A:255). Declaration public static Color BlanchedAlmond { get; } Property Value Type Description Color | Improve this Doc View Source Blue Blue color (R:0,G:0,B:255,A:255). Declaration public static Color Blue { get; } Property Value Type Description Color | Improve this Doc View Source BlueViolet BlueViolet color (R:138,G:43,B:226,A:255). Declaration public static Color BlueViolet { get; } Property Value Type Description Color | Improve this Doc View Source Brown Brown color (R:165,G:42,B:42,A:255). Declaration public static Color Brown { get; } Property Value Type Description Color | Improve this Doc View Source BurlyWood BurlyWood color (R:222,G:184,B:135,A:255). Declaration public static Color BurlyWood { get; } Property Value Type Description Color | Improve this Doc View Source CadetBlue CadetBlue color (R:95,G:158,B:160,A:255). Declaration public static Color CadetBlue { get; } Property Value Type Description Color | Improve this Doc View Source Chartreuse Chartreuse color (R:127,G:255,B:0,A:255). Declaration public static Color Chartreuse { get; } Property Value Type Description Color | Improve this Doc View Source Chocolate Chocolate color (R:210,G:105,B:30,A:255). Declaration public static Color Chocolate { get; } Property Value Type Description Color | Improve this Doc View Source Coral Coral color (R:255,G:127,B:80,A:255). Declaration public static Color Coral { get; } Property Value Type Description Color | Improve this Doc View Source CornflowerBlue CornflowerBlue color (R:100,G:149,B:237,A:255). Declaration public static Color CornflowerBlue { get; } Property Value Type Description Color | Improve this Doc View Source Cornsilk Cornsilk color (R:255,G:248,B:220,A:255). Declaration public static Color Cornsilk { get; } Property Value Type Description Color | Improve this Doc View Source Crimson Crimson color (R:220,G:20,B:60,A:255). Declaration public static Color Crimson { get; } Property Value Type Description Color | Improve this Doc View Source Cyan Cyan color (R:0,G:255,B:255,A:255). Declaration public static Color Cyan { get; } Property Value Type Description Color | Improve this Doc View Source DarkBlue DarkBlue color (R:0,G:0,B:139,A:255). Declaration public static Color DarkBlue { get; } Property Value Type Description Color | Improve this Doc View Source DarkCyan DarkCyan color (R:0,G:139,B:139,A:255). Declaration public static Color DarkCyan { get; } Property Value Type Description Color | Improve this Doc View Source DarkGoldenrod DarkGoldenrod color (R:184,G:134,B:11,A:255). Declaration public static Color DarkGoldenrod { get; } Property Value Type Description Color | Improve this Doc View Source DarkGray DarkGray color (R:169,G:169,B:169,A:255). Declaration public static Color DarkGray { get; } Property Value Type Description Color | Improve this Doc View Source DarkGreen DarkGreen color (R:0,G:100,B:0,A:255). Declaration public static Color DarkGreen { get; } Property Value Type Description Color | Improve this Doc View Source DarkKhaki DarkKhaki color (R:189,G:183,B:107,A:255). Declaration public static Color DarkKhaki { get; } Property Value Type Description Color | Improve this Doc View Source DarkMagenta DarkMagenta color (R:139,G:0,B:139,A:255). Declaration public static Color DarkMagenta { get; } Property Value Type Description Color | Improve this Doc View Source DarkOliveGreen DarkOliveGreen color (R:85,G:107,B:47,A:255). Declaration public static Color DarkOliveGreen { get; } Property Value Type Description Color | Improve this Doc View Source DarkOrange DarkOrange color (R:255,G:140,B:0,A:255). Declaration public static Color DarkOrange { get; } Property Value Type Description Color | Improve this Doc View Source DarkOrchid DarkOrchid color (R:153,G:50,B:204,A:255). Declaration public static Color DarkOrchid { get; } Property Value Type Description Color | Improve this Doc View Source DarkRed DarkRed color (R:139,G:0,B:0,A:255). Declaration public static Color DarkRed { get; } Property Value Type Description Color | Improve this Doc View Source DarkSalmon DarkSalmon color (R:233,G:150,B:122,A:255). Declaration public static Color DarkSalmon { get; } Property Value Type Description Color | Improve this Doc View Source DarkSeaGreen DarkSeaGreen color (R:143,G:188,B:139,A:255). Declaration public static Color DarkSeaGreen { get; } Property Value Type Description Color | Improve this Doc View Source DarkSlateBlue DarkSlateBlue color (R:72,G:61,B:139,A:255). Declaration public static Color DarkSlateBlue { get; } Property Value Type Description Color | Improve this Doc View Source DarkSlateGray DarkSlateGray color (R:47,G:79,B:79,A:255). Declaration public static Color DarkSlateGray { get; } Property Value Type Description Color | Improve this Doc View Source DarkTurquoise DarkTurquoise color (R:0,G:206,B:209,A:255). Declaration public static Color DarkTurquoise { get; } Property Value Type Description Color | Improve this Doc View Source DarkViolet DarkViolet color (R:148,G:0,B:211,A:255). Declaration public static Color DarkViolet { get; } Property Value Type Description Color | Improve this Doc View Source DeepPink DeepPink color (R:255,G:20,B:147,A:255). Declaration public static Color DeepPink { get; } Property Value Type Description Color | Improve this Doc View Source DeepSkyBlue DeepSkyBlue color (R:0,G:191,B:255,A:255). Declaration public static Color DeepSkyBlue { get; } Property Value Type Description Color | Improve this Doc View Source DimGray DimGray color (R:105,G:105,B:105,A:255). Declaration public static Color DimGray { get; } Property Value Type Description Color | Improve this Doc View Source DodgerBlue DodgerBlue color (R:30,G:144,B:255,A:255). Declaration public static Color DodgerBlue { get; } Property Value Type Description Color | Improve this Doc View Source Firebrick Firebrick color (R:178,G:34,B:34,A:255). Declaration public static Color Firebrick { get; } Property Value Type Description Color | Improve this Doc View Source FloralWhite FloralWhite color (R:255,G:250,B:240,A:255). Declaration public static Color FloralWhite { get; } Property Value Type Description Color | Improve this Doc View Source ForestGreen ForestGreen color (R:34,G:139,B:34,A:255). Declaration public static Color ForestGreen { get; } Property Value Type Description Color | Improve this Doc View Source Fuchsia Fuchsia color (R:255,G:0,B:255,A:255). Declaration public static Color Fuchsia { get; } Property Value Type Description Color | Improve this Doc View Source G Gets or sets the green component. Declaration [DataMember] public byte G { get; set; } Property Value Type Description System.Byte | Improve this Doc View Source Gainsboro Gainsboro color (R:220,G:220,B:220,A:255). Declaration public static Color Gainsboro { get; } Property Value Type Description Color | Improve this Doc View Source GhostWhite GhostWhite color (R:248,G:248,B:255,A:255). Declaration public static Color GhostWhite { get; } Property Value Type Description Color | Improve this Doc View Source Gold Gold color (R:255,G:215,B:0,A:255). Declaration public static Color Gold { get; } Property Value Type Description Color | Improve this Doc View Source Goldenrod Goldenrod color (R:218,G:165,B:32,A:255). Declaration public static Color Goldenrod { get; } Property Value Type Description Color | Improve this Doc View Source Gray Gray color (R:128,G:128,B:128,A:255). Declaration public static Color Gray { get; } Property Value Type Description Color | Improve this Doc View Source Green Green color (R:0,G:128,B:0,A:255). Declaration public static Color Green { get; } Property Value Type Description Color | Improve this Doc View Source GreenYellow GreenYellow color (R:173,G:255,B:47,A:255). Declaration public static Color GreenYellow { get; } Property Value Type Description Color | Improve this Doc View Source Honeydew Honeydew color (R:240,G:255,B:240,A:255). Declaration public static Color Honeydew { get; } Property Value Type Description Color | Improve this Doc View Source HotPink HotPink color (R:255,G:105,B:180,A:255). Declaration public static Color HotPink { get; } Property Value Type Description Color | Improve this Doc View Source IndianRed IndianRed color (R:205,G:92,B:92,A:255). Declaration public static Color IndianRed { get; } Property Value Type Description Color | Improve this Doc View Source Indigo Indigo color (R:75,G:0,B:130,A:255). Declaration public static Color Indigo { get; } Property Value Type Description Color | Improve this Doc View Source Ivory Ivory color (R:255,G:255,B:240,A:255). Declaration public static Color Ivory { get; } Property Value Type Description Color | Improve this Doc View Source Khaki Khaki color (R:240,G:230,B:140,A:255). Declaration public static Color Khaki { get; } Property Value Type Description Color | Improve this Doc View Source Lavender Lavender color (R:230,G:230,B:250,A:255). Declaration public static Color Lavender { get; } Property Value Type Description Color | Improve this Doc View Source LavenderBlush LavenderBlush color (R:255,G:240,B:245,A:255). Declaration public static Color LavenderBlush { get; } Property Value Type Description Color | Improve this Doc View Source LawnGreen LawnGreen color (R:124,G:252,B:0,A:255). Declaration public static Color LawnGreen { get; } Property Value Type Description Color | Improve this Doc View Source LemonChiffon LemonChiffon color (R:255,G:250,B:205,A:255). Declaration public static Color LemonChiffon { get; } Property Value Type Description Color | Improve this Doc View Source LightBlue LightBlue color (R:173,G:216,B:230,A:255). Declaration public static Color LightBlue { get; } Property Value Type Description Color | Improve this Doc View Source LightCoral LightCoral color (R:240,G:128,B:128,A:255). Declaration public static Color LightCoral { get; } Property Value Type Description Color | Improve this Doc View Source LightCyan LightCyan color (R:224,G:255,B:255,A:255). Declaration public static Color LightCyan { get; } Property Value Type Description Color | Improve this Doc View Source LightGoldenrodYellow LightGoldenrodYellow color (R:250,G:250,B:210,A:255). Declaration public static Color LightGoldenrodYellow { get; } Property Value Type Description Color | Improve this Doc View Source LightGray LightGray color (R:211,G:211,B:211,A:255). Declaration public static Color LightGray { get; } Property Value Type Description Color | Improve this Doc View Source LightGreen LightGreen color (R:144,G:238,B:144,A:255). Declaration public static Color LightGreen { get; } Property Value Type Description Color | Improve this Doc View Source LightPink LightPink color (R:255,G:182,B:193,A:255). Declaration public static Color LightPink { get; } Property Value Type Description Color | Improve this Doc View Source LightSalmon LightSalmon color (R:255,G:160,B:122,A:255). Declaration public static Color LightSalmon { get; } Property Value Type Description Color | Improve this Doc View Source LightSeaGreen LightSeaGreen color (R:32,G:178,B:170,A:255). Declaration public static Color LightSeaGreen { get; } Property Value Type Description Color | Improve this Doc View Source LightSkyBlue LightSkyBlue color (R:135,G:206,B:250,A:255). Declaration public static Color LightSkyBlue { get; } Property Value Type Description Color | Improve this Doc View Source LightSlateGray LightSlateGray color (R:119,G:136,B:153,A:255). Declaration public static Color LightSlateGray { get; } Property Value Type Description Color | Improve this Doc View Source LightSteelBlue LightSteelBlue color (R:176,G:196,B:222,A:255). Declaration public static Color LightSteelBlue { get; } Property Value Type Description Color | Improve this Doc View Source LightYellow LightYellow color (R:255,G:255,B:224,A:255). Declaration public static Color LightYellow { get; } Property Value Type Description Color | Improve this Doc View Source Lime Lime color (R:0,G:255,B:0,A:255). Declaration public static Color Lime { get; } Property Value Type Description Color | Improve this Doc View Source LimeGreen LimeGreen color (R:50,G:205,B:50,A:255). Declaration public static Color LimeGreen { get; } Property Value Type Description Color | Improve this Doc View Source Linen Linen color (R:250,G:240,B:230,A:255). Declaration public static Color Linen { get; } Property Value Type Description Color | Improve this Doc View Source Magenta Magenta color (R:255,G:0,B:255,A:255). Declaration public static Color Magenta { get; } Property Value Type Description Color | Improve this Doc View Source Maroon Maroon color (R:128,G:0,B:0,A:255). Declaration public static Color Maroon { get; } Property Value Type Description Color | Improve this Doc View Source MediumAquamarine MediumAquamarine color (R:102,G:205,B:170,A:255). Declaration public static Color MediumAquamarine { get; } Property Value Type Description Color | Improve this Doc View Source MediumBlue MediumBlue color (R:0,G:0,B:205,A:255). Declaration public static Color MediumBlue { get; } Property Value Type Description Color | Improve this Doc View Source MediumOrchid MediumOrchid color (R:186,G:85,B:211,A:255). Declaration public static Color MediumOrchid { get; } Property Value Type Description Color | Improve this Doc View Source MediumPurple MediumPurple color (R:147,G:112,B:219,A:255). Declaration public static Color MediumPurple { get; } Property Value Type Description Color | Improve this Doc View Source MediumSeaGreen MediumSeaGreen color (R:60,G:179,B:113,A:255). Declaration public static Color MediumSeaGreen { get; } Property Value Type Description Color | Improve this Doc View Source MediumSlateBlue MediumSlateBlue color (R:123,G:104,B:238,A:255). Declaration public static Color MediumSlateBlue { get; } Property Value Type Description Color | Improve this Doc View Source MediumSpringGreen MediumSpringGreen color (R:0,G:250,B:154,A:255). Declaration public static Color MediumSpringGreen { get; } Property Value Type Description Color | Improve this Doc View Source MediumTurquoise MediumTurquoise color (R:72,G:209,B:204,A:255). Declaration public static Color MediumTurquoise { get; } Property Value Type Description Color | Improve this Doc View Source MediumVioletRed MediumVioletRed color (R:199,G:21,B:133,A:255). Declaration public static Color MediumVioletRed { get; } Property Value Type Description Color | Improve this Doc View Source MidnightBlue MidnightBlue color (R:25,G:25,B:112,A:255). Declaration public static Color MidnightBlue { get; } Property Value Type Description Color | Improve this Doc View Source MintCream MintCream color (R:245,G:255,B:250,A:255). Declaration public static Color MintCream { get; } Property Value Type Description Color | Improve this Doc View Source MistyRose MistyRose color (R:255,G:228,B:225,A:255). Declaration public static Color MistyRose { get; } Property Value Type Description Color | Improve this Doc View Source Moccasin Moccasin color (R:255,G:228,B:181,A:255). Declaration public static Color Moccasin { get; } Property Value Type Description Color | Improve this Doc View Source MonoGameOrange MonoGame orange theme color (R:231,G:60,B:0,A:255). Declaration public static Color MonoGameOrange { get; } Property Value Type Description Color | Improve this Doc View Source NavajoWhite NavajoWhite color (R:255,G:222,B:173,A:255). Declaration public static Color NavajoWhite { get; } Property Value Type Description Color | Improve this Doc View Source Navy Navy color (R:0,G:0,B:128,A:255). Declaration public static Color Navy { get; } Property Value Type Description Color | Improve this Doc View Source OldLace OldLace color (R:253,G:245,B:230,A:255). Declaration public static Color OldLace { get; } Property Value Type Description Color | Improve this Doc View Source Olive Olive color (R:128,G:128,B:0,A:255). Declaration public static Color Olive { get; } Property Value Type Description Color | Improve this Doc View Source OliveDrab OliveDrab color (R:107,G:142,B:35,A:255). Declaration public static Color OliveDrab { get; } Property Value Type Description Color | Improve this Doc View Source Orange Orange color (R:255,G:165,B:0,A:255). Declaration public static Color Orange { get; } Property Value Type Description Color | Improve this Doc View Source OrangeRed OrangeRed color (R:255,G:69,B:0,A:255). Declaration public static Color OrangeRed { get; } Property Value Type Description Color | Improve this Doc View Source Orchid Orchid color (R:218,G:112,B:214,A:255). Declaration public static Color Orchid { get; } Property Value Type Description Color | Improve this Doc View Source PackedValue Gets or sets packed value of this Color . Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 | Improve this Doc View Source PaleGoldenrod PaleGoldenrod color (R:238,G:232,B:170,A:255). Declaration public static Color PaleGoldenrod { get; } Property Value Type Description Color | Improve this Doc View Source PaleGreen PaleGreen color (R:152,G:251,B:152,A:255). Declaration public static Color PaleGreen { get; } Property Value Type Description Color | Improve this Doc View Source PaleTurquoise PaleTurquoise color (R:175,G:238,B:238,A:255). Declaration public static Color PaleTurquoise { get; } Property Value Type Description Color | Improve this Doc View Source PaleVioletRed PaleVioletRed color (R:219,G:112,B:147,A:255). Declaration public static Color PaleVioletRed { get; } Property Value Type Description Color | Improve this Doc View Source PapayaWhip PapayaWhip color (R:255,G:239,B:213,A:255). Declaration public static Color PapayaWhip { get; } Property Value Type Description Color | Improve this Doc View Source PeachPuff PeachPuff color (R:255,G:218,B:185,A:255). Declaration public static Color PeachPuff { get; } Property Value Type Description Color | Improve this Doc View Source Peru Peru color (R:205,G:133,B:63,A:255). Declaration public static Color Peru { get; } Property Value Type Description Color | Improve this Doc View Source Pink Pink color (R:255,G:192,B:203,A:255). Declaration public static Color Pink { get; } Property Value Type Description Color | Improve this Doc View Source Plum Plum color (R:221,G:160,B:221,A:255). Declaration public static Color Plum { get; } Property Value Type Description Color | Improve this Doc View Source PowderBlue PowderBlue color (R:176,G:224,B:230,A:255). Declaration public static Color PowderBlue { get; } Property Value Type Description Color | Improve this Doc View Source Purple Purple color (R:128,G:0,B:128,A:255). Declaration public static Color Purple { get; } Property Value Type Description Color | Improve this Doc View Source R Gets or sets the red component. Declaration [DataMember] public byte R { get; set; } Property Value Type Description System.Byte | Improve this Doc View Source Red Red color (R:255,G:0,B:0,A:255). Declaration public static Color Red { get; } Property Value Type Description Color | Improve this Doc View Source RosyBrown RosyBrown color (R:188,G:143,B:143,A:255). Declaration public static Color RosyBrown { get; } Property Value Type Description Color | Improve this Doc View Source RoyalBlue RoyalBlue color (R:65,G:105,B:225,A:255). Declaration public static Color RoyalBlue { get; } Property Value Type Description Color | Improve this Doc View Source SaddleBrown SaddleBrown color (R:139,G:69,B:19,A:255). Declaration public static Color SaddleBrown { get; } Property Value Type Description Color | Improve this Doc View Source Salmon Salmon color (R:250,G:128,B:114,A:255). Declaration public static Color Salmon { get; } Property Value Type Description Color | Improve this Doc View Source SandyBrown SandyBrown color (R:244,G:164,B:96,A:255). Declaration public static Color SandyBrown { get; } Property Value Type Description Color | Improve this Doc View Source SeaGreen SeaGreen color (R:46,G:139,B:87,A:255). Declaration public static Color SeaGreen { get; } Property Value Type Description Color | Improve this Doc View Source SeaShell SeaShell color (R:255,G:245,B:238,A:255). Declaration public static Color SeaShell { get; } Property Value Type Description Color | Improve this Doc View Source Sienna Sienna color (R:160,G:82,B:45,A:255). Declaration public static Color Sienna { get; } Property Value Type Description Color | Improve this Doc View Source Silver Silver color (R:192,G:192,B:192,A:255). Declaration public static Color Silver { get; } Property Value Type Description Color | Improve this Doc View Source SkyBlue SkyBlue color (R:135,G:206,B:235,A:255). Declaration public static Color SkyBlue { get; } Property Value Type Description Color | Improve this Doc View Source SlateBlue SlateBlue color (R:106,G:90,B:205,A:255). Declaration public static Color SlateBlue { get; } Property Value Type Description Color | Improve this Doc View Source SlateGray SlateGray color (R:112,G:128,B:144,A:255). Declaration public static Color SlateGray { get; } Property Value Type Description Color | Improve this Doc View Source Snow Snow color (R:255,G:250,B:250,A:255). Declaration public static Color Snow { get; } Property Value Type Description Color | Improve this Doc View Source SpringGreen SpringGreen color (R:0,G:255,B:127,A:255). Declaration public static Color SpringGreen { get; } Property Value Type Description Color | Improve this Doc View Source SteelBlue SteelBlue color (R:70,G:130,B:180,A:255). Declaration public static Color SteelBlue { get; } Property Value Type Description Color | Improve this Doc View Source Tan Tan color (R:210,G:180,B:140,A:255). Declaration public static Color Tan { get; } Property Value Type Description Color | Improve this Doc View Source Teal Teal color (R:0,G:128,B:128,A:255). Declaration public static Color Teal { get; } Property Value Type Description Color | Improve this Doc View Source Thistle Thistle color (R:216,G:191,B:216,A:255). Declaration public static Color Thistle { get; } Property Value Type Description Color | Improve this Doc View Source Tomato Tomato color (R:255,G:99,B:71,A:255). Declaration public static Color Tomato { get; } Property Value Type Description Color | Improve this Doc View Source Transparent Transparent color (R:0,G:0,B:0,A:0). Declaration public static Color Transparent { get; } Property Value Type Description Color | Improve this Doc View Source TransparentBlack TransparentBlack color (R:0,G:0,B:0,A:0). Declaration public static Color TransparentBlack { get; } Property Value Type Description Color | Improve this Doc View Source Turquoise Turquoise color (R:64,G:224,B:208,A:255). Declaration public static Color Turquoise { get; } Property Value Type Description Color | Improve this Doc View Source Violet Violet color (R:238,G:130,B:238,A:255). Declaration public static Color Violet { get; } Property Value Type Description Color | Improve this Doc View Source Wheat Wheat color (R:245,G:222,B:179,A:255). Declaration public static Color Wheat { get; } Property Value Type Description Color | Improve this Doc View Source White White color (R:255,G:255,B:255,A:255). Declaration public static Color White { get; } Property Value Type Description Color | Improve this Doc View Source WhiteSmoke WhiteSmoke color (R:245,G:245,B:245,A:255). Declaration public static Color WhiteSmoke { get; } Property Value Type Description Color | Improve this Doc View Source Yellow Yellow color (R:255,G:255,B:0,A:255). Declaration public static Color Yellow { get; } Property Value Type Description Color | Improve this Doc View Source YellowGreen YellowGreen color (R:154,G:205,B:50,A:255). Declaration public static Color YellowGreen { get; } Property Value Type Description Color Methods | Improve this Doc View Source Equals(Color) Compares whether current instance is equal to specified Color . Declaration public bool Equals(Color other) Parameters Type Name Description Color other The Color to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The Color to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromNonPremultiplied(Vector4) Translate a non-premultipled alpha Color to a Color that contains premultiplied alpha. Declaration public static Color FromNonPremultiplied(Vector4 vector) Parameters Type Name Description Vector4 vector A Vector4 representing color. Returns Type Description Color A Color which contains premultiplied alpha data. | Improve this Doc View Source FromNonPremultiplied(Int32, Int32, Int32, Int32) Translate a non-premultipled alpha Color to a Color that contains premultiplied alpha. Declaration public static Color FromNonPremultiplied(int r, int g, int b, int a) Parameters Type Name Description System.Int32 r Red component value. System.Int32 g Green component value. System.Int32 b Blue component value. System.Int32 a Alpha component value. Returns Type Description Color A Color which contains premultiplied alpha data. | Improve this Doc View Source GetHashCode() Gets the hash code of this Color . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Color . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Lerp(Color, Color, Single) Performs linear interpolation of Color . Declaration public static Color Lerp(Color value1, Color value2, float amount) Parameters Type Name Description Color value1 Source Color . Color value2 Destination Color . System.Single amount Interpolation factor. Returns Type Description Color Interpolated Color . | Improve this Doc View Source LerpPrecise(Color, Color, Single) Lerp(Color, Color, Single) should be used instead of this function. Declaration [Obsolete(\"Color.Lerp should be used instead of this function.\")] public static Color LerpPrecise(Color value1, Color value2, float amount) Parameters Type Name Description Color value1 Color value2 System.Single amount Returns Type Description Color Interpolated Color . | Improve this Doc View Source Multiply(Color, Single) Multiply Color by value. Declaration public static Color Multiply(Color value, float scale) Parameters Type Name Description Color value Source Color . System.Single scale Multiplicator. Returns Type Description Color Multiplication result. | Improve this Doc View Source ToString() Returns a System.String representation of this Color in the format: {R:[red] G:[green] B:[blue] A:[alpha]} Declaration public override string ToString() Returns Type Description System.String System.String representation of this Color . Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector3() Gets a Vector3 representation for this object. Declaration public Vector3 ToVector3() Returns Type Description Vector3 A Vector3 representation for this object. | Improve this Doc View Source ToVector4() Gets a Vector4 representation for this object. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A Vector4 representation for this object. Operators | Improve this Doc View Source Equality(Color, Color) Compares whether two Color instances are equal. Declaration public static bool operator ==(Color a, Color b) Parameters Type Name Description Color a Color instance on the left of the equal sign. Color b Color instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Color, Color) Compares whether two Color instances are not equal. Declaration public static bool operator !=(Color a, Color b) Parameters Type Name Description Color a Color instance on the left of the not equal sign. Color b Color instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Color, Single) Multiply Color by value. Declaration public static Color operator *(Color value, float scale) Parameters Type Name Description Color value Source Color . System.Single scale Multiplicator. Returns Type Description Color Multiplication result. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Audio.AudioCategory.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.AudioCategory.html",
    "title": "Struct AudioCategory | MonoGame Documentation",
    "keywords": "Struct AudioCategory Provides functionality for manipulating multiple sounds at a time. Implements System.IEquatable < AudioCategory > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public struct AudioCategory : IEquatable<AudioCategory> Properties | Improve this Doc View Source Name Gets the category's friendly name. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(AudioCategory) Determines whether two AudioCategory instances are equal. Declaration public bool Equals(AudioCategory other) Parameters Type Name Description AudioCategory other AudioCategory to compare with this instance. Returns Type Description System.Boolean true if the objects are equal or false if they aren't | Improve this Doc View Source Equals(Object) Determines whether two AudioCategory instances are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to compare with this instance. Returns Type Description System.Boolean true if the objects are equal or false if they aren't. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code for this object. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Pause() Pauses all associated sounds. Declaration public void Pause() | Improve this Doc View Source Resume() Resumes all associated paused sounds. Declaration public void Resume() | Improve this Doc View Source SetVolume(Single) Declaration public void SetVolume(float volume) Parameters Type Name Description System.Single volume | Improve this Doc View Source Stop(AudioStopOptions) Stops all associated sounds. Declaration public void Stop(AudioStopOptions options) Parameters Type Name Description AudioStopOptions options | Improve this Doc View Source ToString() Returns the name of this AudioCategory Declaration public override string ToString() Returns Type Description System.String Friendly name of the AudioCategory Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(AudioCategory, AudioCategory) Determines whether two AudioCategory instances are equal. Declaration public static bool operator ==(AudioCategory first, AudioCategory second) Parameters Type Name Description AudioCategory first First AudioCategory instance to compare. AudioCategory second Second AudioCategory instance to compare. Returns Type Description System.Boolean true if the objects are equal or false if they aren't. | Improve this Doc View Source Inequality(AudioCategory, AudioCategory) Determines whether two AudioCategory instances are not equal. Declaration public static bool operator !=(AudioCategory first, AudioCategory second) Parameters Type Name Description AudioCategory first First AudioCategory instance to compare. AudioCategory second Second AudioCategory instance to compare. Returns Type Description System.Boolean true if the objects are not equal or false if they are. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Plane.html": {
    "href": "_api/Microsoft.Xna.Framework.Plane.html",
    "title": "Struct Plane | MonoGame Documentation",
    "keywords": "Struct Plane Implements System.IEquatable < Plane > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Plane : IEquatable<Plane> Constructors | Improve this Doc View Source Plane(Vector3, Vector3, Vector3) Declaration public Plane(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a Vector3 b Vector3 c | Improve this Doc View Source Plane(Vector3, Single) Declaration public Plane(Vector3 normal, float d) Parameters Type Name Description Vector3 normal System.Single d | Improve this Doc View Source Plane(Vector4) Declaration public Plane(Vector4 value) Parameters Type Name Description Vector4 value | Improve this Doc View Source Plane(Single, Single, Single, Single) Declaration public Plane(float a, float b, float c, float d) Parameters Type Name Description System.Single a System.Single b System.Single c System.Single d Fields | Improve this Doc View Source D Declaration [DataMember] public float D Field Value Type Description System.Single | Improve this Doc View Source Normal Declaration [DataMember] public Vector3 Normal Field Value Type Description Vector3 Methods | Improve this Doc View Source Dot(Vector4) Declaration public float Dot(Vector4 value) Parameters Type Name Description Vector4 value Returns Type Description System.Single | Improve this Doc View Source Dot(ref Vector4, out Single) Declaration public void Dot(ref Vector4 value, out float result) Parameters Type Name Description Vector4 value System.Single result | Improve this Doc View Source DotCoordinate(Vector3) Declaration public float DotCoordinate(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description System.Single | Improve this Doc View Source DotCoordinate(ref Vector3, out Single) Declaration public void DotCoordinate(ref Vector3 value, out float result) Parameters Type Name Description Vector3 value System.Single result | Improve this Doc View Source DotNormal(Vector3) Declaration public float DotNormal(Vector3 value) Parameters Type Name Description Vector3 value Returns Type Description System.Single | Improve this Doc View Source DotNormal(ref Vector3, out Single) Declaration public void DotNormal(ref Vector3 value, out float result) Parameters Type Name Description Vector3 value System.Single result | Improve this Doc View Source Equals(Plane) Declaration public bool Equals(Plane other) Parameters Type Name Description Plane other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Declaration public PlaneIntersectionType Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box Returns Type Description PlaneIntersectionType | Improve this Doc View Source Intersects(ref BoundingBox, out PlaneIntersectionType) Declaration public void Intersects(ref BoundingBox box, out PlaneIntersectionType result) Parameters Type Name Description BoundingBox box PlaneIntersectionType result | Improve this Doc View Source Intersects(BoundingFrustum) Declaration public PlaneIntersectionType Intersects(BoundingFrustum frustum) Parameters Type Name Description BoundingFrustum frustum Returns Type Description PlaneIntersectionType | Improve this Doc View Source Intersects(BoundingSphere) Declaration public PlaneIntersectionType Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere Returns Type Description PlaneIntersectionType | Improve this Doc View Source Intersects(ref BoundingSphere, out PlaneIntersectionType) Declaration public void Intersects(ref BoundingSphere sphere, out PlaneIntersectionType result) Parameters Type Name Description BoundingSphere sphere PlaneIntersectionType result | Improve this Doc View Source Normalize() Declaration public void Normalize() | Improve this Doc View Source Normalize(Plane) Declaration public static Plane Normalize(Plane value) Parameters Type Name Description Plane value Returns Type Description Plane | Improve this Doc View Source Normalize(ref Plane, out Plane) Declaration public static void Normalize(ref Plane value, out Plane result) Parameters Type Name Description Plane value Plane result | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Plane, Matrix) Transforms a normalized plane by a matrix. Declaration public static Plane Transform(Plane plane, Matrix matrix) Parameters Type Name Description Plane plane The normalized plane to transform. Matrix matrix The transformation matrix. Returns Type Description Plane The transformed plane. | Improve this Doc View Source Transform(Plane, Quaternion) Transforms a normalized plane by a quaternion rotation. Declaration public static Plane Transform(Plane plane, Quaternion rotation) Parameters Type Name Description Plane plane The normalized plane to transform. Quaternion rotation The quaternion rotation. Returns Type Description Plane The transformed plane. | Improve this Doc View Source Transform(ref Plane, ref Matrix, out Plane) Transforms a normalized plane by a matrix. Declaration public static void Transform(ref Plane plane, ref Matrix matrix, out Plane result) Parameters Type Name Description Plane plane The normalized plane to transform. Matrix matrix The transformation matrix. Plane result The transformed plane. | Improve this Doc View Source Transform(ref Plane, ref Quaternion, out Plane) Transforms a normalized plane by a quaternion rotation. Declaration public static void Transform(ref Plane plane, ref Quaternion rotation, out Plane result) Parameters Type Name Description Plane plane The normalized plane to transform. Quaternion rotation The quaternion rotation. Plane result The transformed plane. Operators | Improve this Doc View Source Equality(Plane, Plane) Declaration public static bool operator ==(Plane plane1, Plane plane2) Parameters Type Name Description Plane plane1 Plane plane2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Plane, Plane) Declaration public static bool operator !=(Plane plane1, Plane plane2) Parameters Type Name Description Plane plane1 Plane plane2 Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Media.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.html",
    "title": "Namespace Microsoft.Xna.Framework.Media | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Media Classes Album AlbumCollection Artist Genre MediaLibrary MediaPlayer MediaQueue MediaSource Playlist PlaylistCollection Song SongCollection Video Represents a video. VideoPlayer Enums MediaSourceType MediaState VideoSoundtrackType Type of sounds in a video"
  },
  "_api/Microsoft.Xna.Framework.Media.VideoSoundtrackType.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.VideoSoundtrackType.html",
    "title": "Enum VideoSoundtrackType | MonoGame Documentation",
    "keywords": "Enum VideoSoundtrackType Type of sounds in a video Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public enum VideoSoundtrackType Fields Name Description Dialog This video contains only dialog. Music This video contains only music. MusicAndDialog This video contains music and dialog."
  },
  "_api/Microsoft.Xna.Framework.Media.VideoPlayer.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.VideoPlayer.html",
    "title": "Class VideoPlayer | MonoGame Documentation",
    "keywords": "Class VideoPlayer Inheritance System.Object VideoPlayer Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class VideoPlayer : IDisposable Constructors | Improve this Doc View Source VideoPlayer() Declaration public VideoPlayer() Properties | Improve this Doc View Source IsDisposed Gets a value that indicates whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLooped Gets a value that indicates whether the player is playing video in a loop. Declaration public bool IsLooped { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMuted Gets or sets the muted setting for the video player. Declaration public bool IsMuted { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source PlayPosition Gets the play position within the currently playing video. Declaration public TimeSpan PlayPosition { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source State Gets the media playback state, MediaState. Declaration public MediaState State { get; } Property Value Type Description MediaState | Improve this Doc View Source Video Gets the Video that is currently playing. Declaration public Video Video { get; } Property Value Type Description Video | Improve this Doc View Source Volume Video player volume, from 0.0f (silence) to 1.0f (full volume relative to the current device volume). Declaration public float Volume { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source GetTexture() Retrieves a Texture2D containing the current frame of video being played. Declaration public Texture2D GetTexture() Returns Type Description Texture2D The current frame of video. Exceptions Type Condition System.InvalidOperationException Thrown if no video is set on the player System.InvalidOperationException Thrown if the platform was unable to get a texture in a reasonable amount of time. Often the platform specific media code is running in a different thread or process. Note: This may be a change from XNA behaviour | Improve this Doc View Source Pause() Pauses the currently playing video. Declaration public void Pause() | Improve this Doc View Source Play(Video) Plays a Video. Declaration public void Play(Video video) Parameters Type Name Description Video video Video to play. | Improve this Doc View Source Resume() Resumes a paused video. Declaration public void Resume() | Improve this Doc View Source Stop() Stops playing a video. Declaration public void Stop() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.GestureType.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.GestureType.html",
    "title": "Enum GestureType | MonoGame Documentation",
    "keywords": "Enum GestureType Enumuration of values that represent different gestures that can be processed by ReadGesture() . Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax [Flags] public enum GestureType Fields Name Description DoubleTap The user tapped the device twice which is always preceded by a Tap gesture. DragComplete States completion of a drag gesture(VerticalDrag, HorizontalDrag, or FreeDrag). Flick States that a touch was combined with a quick swipe. FreeDrag The use touched a point and then performed a free-form drag. Hold The use touched a single point for approximately one second. HorizontalDrag The user touched the screen and performed either left to right or right to left drag gesture. None No gestures. Pinch The user either converged or diverged two touch-points on the screen which is like a two-finger drag. PinchComplete An in-progress pinch operation was completed. Tap The user touched a single point. VerticalDrag The user touched the screen and performed either top to bottom or bottom to top drag gesture."
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.GestureSample.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.GestureSample.html",
    "title": "Struct GestureSample | MonoGame Documentation",
    "keywords": "Struct GestureSample Represents data from a multi-touch gesture over a span of time. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public struct GestureSample Constructors | Improve this Doc View Source GestureSample(GestureType, TimeSpan, Vector2, Vector2, Vector2, Vector2) Initializes a new GestureSample . Declaration public GestureSample(GestureType gestureType, TimeSpan timestamp, Vector2 position, Vector2 position2, Vector2 delta, Vector2 delta2) Parameters Type Name Description GestureType gestureType GestureType System.TimeSpan timestamp Vector2 position Vector2 position2 Vector2 delta Vector2 delta2 Properties | Improve this Doc View Source Delta Gets the delta information for the first touch-point in the gesture sample. Declaration public Vector2 Delta { get; } Property Value Type Description Vector2 | Improve this Doc View Source Delta2 Gets the delta information for the second touch-point in the gesture sample. Declaration public Vector2 Delta2 { get; } Property Value Type Description Vector2 | Improve this Doc View Source GestureType Gets the type of the gesture. Declaration public GestureType GestureType { get; } Property Value Type Description GestureType | Improve this Doc View Source Position Gets the position of the first touch-point in the gesture sample. Declaration public Vector2 Position { get; } Property Value Type Description Vector2 | Improve this Doc View Source Position2 Gets the position of the second touch-point in the gesture sample. Declaration public Vector2 Position2 { get; } Property Value Type Description Vector2 | Improve this Doc View Source Timestamp Gets the starting time for this multi-touch gesture sample. Declaration public TimeSpan Timestamp { get; } Property Value Type Description System.TimeSpan"
  },
  "_api/Microsoft.Xna.Framework.Input.MouseState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.MouseState.html",
    "title": "Struct MouseState | MonoGame Documentation",
    "keywords": "Struct MouseState Represents a mouse state with cursor position and button press information. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct MouseState Constructors | Improve this Doc View Source MouseState(Int32, Int32, Int32, ButtonState, ButtonState, ButtonState, ButtonState, ButtonState) Initializes a new instance of the MouseState. Declaration public MouseState(int x, int y, int scrollWheel, ButtonState leftButton, ButtonState middleButton, ButtonState rightButton, ButtonState xButton1, ButtonState xButton2) Parameters Type Name Description System.Int32 x Horizontal position of the mouse in relation to the window. System.Int32 y Vertical position of the mouse in relation to the window. System.Int32 scrollWheel Mouse scroll wheel's value. ButtonState leftButton Left mouse button's state. ButtonState middleButton Middle mouse button's state. ButtonState rightButton Right mouse button's state. ButtonState xButton1 XBUTTON1's state. ButtonState xButton2 XBUTTON2's state. Remarks Normally GetState() should be used to get mouse current state. The constructor is provided for simulating mouse input. | Improve this Doc View Source MouseState(Int32, Int32, Int32, ButtonState, ButtonState, ButtonState, ButtonState, ButtonState, Int32) Initializes a new instance of the MouseState. Declaration public MouseState(int x, int y, int scrollWheel, ButtonState leftButton, ButtonState middleButton, ButtonState rightButton, ButtonState xButton1, ButtonState xButton2, int horizontalScrollWheel) Parameters Type Name Description System.Int32 x Horizontal position of the mouse in relation to the window. System.Int32 y Vertical position of the mouse in relation to the window. System.Int32 scrollWheel Mouse scroll wheel's value. ButtonState leftButton Left mouse button's state. ButtonState middleButton Middle mouse button's state. ButtonState rightButton Right mouse button's state. ButtonState xButton1 XBUTTON1's state. ButtonState xButton2 XBUTTON2's state. System.Int32 horizontalScrollWheel Mouse horizontal scroll wheel's value. Remarks Normally GetState() should be used to get mouse current state. The constructor is provided for simulating mouse input. Properties | Improve this Doc View Source HorizontalScrollWheelValue Returns the cumulative horizontal scroll wheel value since the game start Declaration public int HorizontalScrollWheelValue { get; } Property Value Type Description System.Int32 | Improve this Doc View Source LeftButton Gets state of the left mouse button. Declaration public ButtonState LeftButton { get; } Property Value Type Description ButtonState | Improve this Doc View Source MiddleButton Gets state of the middle mouse button. Declaration public ButtonState MiddleButton { get; } Property Value Type Description ButtonState | Improve this Doc View Source Position Gets cursor position. Declaration public Point Position { get; } Property Value Type Description Point | Improve this Doc View Source RightButton Gets state of the right mouse button. Declaration public ButtonState RightButton { get; } Property Value Type Description ButtonState | Improve this Doc View Source ScrollWheelValue Returns cumulative scroll wheel value since the game start. Declaration public int ScrollWheelValue { get; } Property Value Type Description System.Int32 | Improve this Doc View Source X Gets horizontal position of the cursor in relation to the window. Declaration public int X { get; } Property Value Type Description System.Int32 | Improve this Doc View Source XButton1 Gets state of the XButton1. Declaration public ButtonState XButton1 { get; } Property Value Type Description ButtonState | Improve this Doc View Source XButton2 Gets state of the XButton2. Declaration public ButtonState XButton2 { get; } Property Value Type Description ButtonState | Improve this Doc View Source Y Gets vertical position of the cursor in relation to the window. Declaration public int Y { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The MouseState to compare. Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code for MouseState instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of the object. Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(MouseState, MouseState) Compares whether two MouseState instances are equal. Declaration public static bool operator ==(MouseState left, MouseState right) Parameters Type Name Description MouseState left MouseState instance on the left of the equal sign. MouseState right MouseState instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(MouseState, MouseState) Compares whether two MouseState instances are not equal. Declaration public static bool operator !=(MouseState left, MouseState right) Parameters Type Name Description MouseState left MouseState instance on the left of the equal sign. MouseState right MouseState instance on the right of the equal sign. Returns Type Description System.Boolean true if the objects are not equal; false otherwise."
  },
  "_api/Microsoft.Xna.Framework.Input.MouseCursor.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.MouseCursor.html",
    "title": "Class MouseCursor | MonoGame Documentation",
    "keywords": "Class MouseCursor Describes a mouse cursor. Inheritance System.Object MouseCursor Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public class MouseCursor : IDisposable Properties | Improve this Doc View Source Arrow Gets the default arrow cursor. Declaration public static MouseCursor Arrow { get; } Property Value Type Description MouseCursor | Improve this Doc View Source Crosshair Gets the crosshair (\"+\") cursor. Declaration public static MouseCursor Crosshair { get; } Property Value Type Description MouseCursor | Improve this Doc View Source Hand Gets the hand cursor, usually used for web links. Declaration public static MouseCursor Hand { get; } Property Value Type Description MouseCursor | Improve this Doc View Source Handle Declaration public IntPtr Handle { get; } Property Value Type Description System.IntPtr | Improve this Doc View Source IBeam Gets the cursor that appears when the mouse is over text editing regions. Declaration public static MouseCursor IBeam { get; } Property Value Type Description MouseCursor | Improve this Doc View Source No Gets the cursor that points that something is invalid, usually a cross. Declaration public static MouseCursor No { get; } Property Value Type Description MouseCursor | Improve this Doc View Source SizeAll Gets the size all cursor which points in all directions. Declaration public static MouseCursor SizeAll { get; } Property Value Type Description MouseCursor | Improve this Doc View Source SizeNESW Gets the northeast/southwest (\"/\") cursor. Declaration public static MouseCursor SizeNESW { get; } Property Value Type Description MouseCursor | Improve this Doc View Source SizeNS Gets the vertical north/south (\"|\") cursor. Declaration public static MouseCursor SizeNS { get; } Property Value Type Description MouseCursor | Improve this Doc View Source SizeNWSE Gets the northwest/southeast (\"&quot;) cursor. Declaration public static MouseCursor SizeNWSE { get; } Property Value Type Description MouseCursor | Improve this Doc View Source SizeWE Gets the horizontal west/east (\"-\") cursor. Declaration public static MouseCursor SizeWE { get; } Property Value Type Description MouseCursor | Improve this Doc View Source Wait Gets the waiting cursor that appears while the application/system is busy. Declaration public static MouseCursor Wait { get; } Property Value Type Description MouseCursor | Improve this Doc View Source WaitArrow Gets the cross between Arrow and Wait cursors. Declaration public static MouseCursor WaitArrow { get; } Property Value Type Description MouseCursor Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source FromTexture2D(Texture2D, Int32, Int32) Creates a mouse cursor from the specified texture. Declaration public static MouseCursor FromTexture2D(Texture2D texture, int originx, int originy) Parameters Type Name Description Texture2D texture Texture to use as the cursor image. System.Int32 originx X cordinate of the image that will be used for mouse position. System.Int32 originy Y cordinate of the image that will be used for mouse position. Returns Type Description MouseCursor Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Viewport.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Viewport.html",
    "title": "Struct Viewport | MonoGame Documentation",
    "keywords": "Struct Viewport Describes the view bounds for render-target surface. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Viewport Constructors | Improve this Doc View Source Viewport(Rectangle) Creates a new instance of Viewport struct. Declaration public Viewport(Rectangle bounds) Parameters Type Name Description Rectangle bounds A Rectangle that defines the location and size of the Viewport in a render target. | Improve this Doc View Source Viewport(Int32, Int32, Int32, Int32) Constructs a viewport from the given values. The MinDepth will be 0.0 and MaxDepth will be 1.0. Declaration public Viewport(int x, int y, int width, int height) Parameters Type Name Description System.Int32 x The x coordinate of the upper-left corner of the view bounds in pixels. System.Int32 y The y coordinate of the upper-left corner of the view bounds in pixels. System.Int32 width The width of the view bounds in pixels. System.Int32 height The height of the view bounds in pixels. | Improve this Doc View Source Viewport(Int32, Int32, Int32, Int32, Single, Single) Constructs a viewport from the given values. Declaration public Viewport(int x, int y, int width, int height, float minDepth, float maxDepth) Parameters Type Name Description System.Int32 x The x coordinate of the upper-left corner of the view bounds in pixels. System.Int32 y The y coordinate of the upper-left corner of the view bounds in pixels. System.Int32 width The width of the view bounds in pixels. System.Int32 height The height of the view bounds in pixels. System.Single minDepth The lower limit of depth. System.Single maxDepth The upper limit of depth. Properties | Improve this Doc View Source AspectRatio Gets the aspect ratio of this Viewport , which is width / height. Declaration public float AspectRatio { get; } Property Value Type Description System.Single | Improve this Doc View Source Bounds Gets or sets a boundary of this Viewport . Declaration public Rectangle Bounds { get; set; } Property Value Type Description Rectangle | Improve this Doc View Source Height The height of the bounds in pixels. Declaration [DataMember] public int Height { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxDepth The upper limit of depth of this viewport. Declaration [DataMember] public float MaxDepth { get; set; } Property Value Type Description System.Single | Improve this Doc View Source MinDepth The lower limit of depth of this viewport. Declaration [DataMember] public float MinDepth { get; set; } Property Value Type Description System.Single | Improve this Doc View Source TitleSafeArea Returns the subset of the viewport that is guaranteed to be visible on a lower quality display. Declaration public Rectangle TitleSafeArea { get; } Property Value Type Description Rectangle | Improve this Doc View Source Width The width of the bounds in pixels. Declaration [DataMember] public int Width { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source X The x coordinate of the beginning of this viewport. Declaration [DataMember] public int X { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Y The y coordinate of the beginning of this viewport. Declaration [DataMember] public int Y { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Project(Vector3, Matrix, Matrix, Matrix) Projects a Vector3 from world space into screen space. Declaration public Vector3 Project(Vector3 source, Matrix projection, Matrix view, Matrix world) Parameters Type Name Description Vector3 source The Vector3 to project. Matrix projection The projection Matrix . Matrix view The view Matrix . Matrix world The world Matrix . Returns Type Description Vector3 | Improve this Doc View Source ToString() Returns a System.String representation of this Viewport in the format: {X:[ X ] Y:[ Y ] Width:[ Width ] Height:[ Height ] MinDepth:[ MinDepth ] MaxDepth:[ MaxDepth ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this Viewport . Overrides System.ValueType.ToString() | Improve this Doc View Source Unproject(Vector3, Matrix, Matrix, Matrix) Unprojects a Vector3 from screen space into world space. Declaration public Vector3 Unproject(Vector3 source, Matrix projection, Matrix view, Matrix world) Parameters Type Name Description Vector3 source The Vector3 to unproject. Matrix projection The projection Matrix . Matrix view The view Matrix . Matrix world The world Matrix . Returns Type Description Vector3"
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexPositionTexture.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexPositionTexture.html",
    "title": "Struct VertexPositionTexture | MonoGame Documentation",
    "keywords": "Struct VertexPositionTexture Implements IVertexType Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct VertexPositionTexture : IVertexType Constructors | Improve this Doc View Source VertexPositionTexture(Vector3, Vector2) Declaration public VertexPositionTexture(Vector3 position, Vector2 textureCoordinate) Parameters Type Name Description Vector3 position Vector2 textureCoordinate Fields | Improve this Doc View Source Position Declaration public Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source TextureCoordinate Declaration public Vector2 TextureCoordinate Field Value Type Description Vector2 | Improve this Doc View Source VertexDeclaration Declaration public static readonly VertexDeclaration VertexDeclaration Field Value Type Description VertexDeclaration Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(VertexPositionTexture, VertexPositionTexture) Declaration public static bool operator ==(VertexPositionTexture left, VertexPositionTexture right) Parameters Type Name Description VertexPositionTexture left VertexPositionTexture right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(VertexPositionTexture, VertexPositionTexture) Declaration public static bool operator !=(VertexPositionTexture left, VertexPositionTexture right) Parameters Type Name Description VertexPositionTexture left VertexPositionTexture right Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IVertexType.VertexDeclaration Declaration VertexDeclaration IVertexType.VertexDeclaration { get; } Returns Type Description VertexDeclaration Implements IVertexType"
  },
  "_api/Microsoft.Xna.Framework.Graphics.TextureAddressMode.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.TextureAddressMode.html",
    "title": "Enum TextureAddressMode | MonoGame Documentation",
    "keywords": "Enum TextureAddressMode Defines modes for addressing texels using texture coordinates that are outside of the range of 0.0 to 1.0. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum TextureAddressMode Fields Name Description Border Texels outside range will be set to the border color. Clamp Texels outside range will be set to color of 0.0 or 1.0 texel. Mirror Same as Wrap but tiles will also flipped at every integer junction. Wrap Texels outside range will form the tile at every integer junction."
  },
  "_api/Microsoft.Xna.Framework.Graphics.Texture3D.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Texture3D.html",
    "title": "Class Texture3D | MonoGame Documentation",
    "keywords": "Class Texture3D Inheritance System.Object GraphicsResource Texture Texture3D RenderTarget3D Implements System.IDisposable Inherited Members Texture.Format Texture.LevelCount Texture.GraphicsDeviceResetting() Texture.GetSharedHandle() Texture.CreateShaderResourceView() Texture.Dispose(Boolean) GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class Texture3D : Texture, IDisposable Constructors | Improve this Doc View Source Texture3D(GraphicsDevice, Int32, Int32, Int32, Boolean, SurfaceFormat) Declaration public Texture3D(GraphicsDevice graphicsDevice, int width, int height, int depth, bool mipMap, SurfaceFormat format) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Int32 depth System.Boolean mipMap SurfaceFormat format | Improve this Doc View Source Texture3D(GraphicsDevice, Int32, Int32, Int32, Boolean, SurfaceFormat, Boolean) Declaration protected Texture3D(GraphicsDevice graphicsDevice, int width, int height, int depth, bool mipMap, SurfaceFormat format, bool renderTarget) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Int32 depth System.Boolean mipMap SurfaceFormat format System.Boolean renderTarget Properties | Improve this Doc View Source Depth Declaration public int Depth { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetData<T>(T[]) Gets a copy of 3D texture data. Declaration public void GetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Array of data. Type Parameters Name Description T The type of the elements in the array. | Improve this Doc View Source GetData<T>(T[], Int32, Int32) Gets a copy of 3D texture data, specifying a start index and number of elements. Declaration public void GetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data Array of data. System.Int32 startIndex Index of the first element to get. System.Int32 elementCount Number of elements to get. Type Parameters Name Description T The type of the elements in the array. | Improve this Doc View Source GetData<T>(Int32, Int32, Int32, Int32, Int32, Int32, Int32, T[], Int32, Int32) Gets a copy of 3D texture data, specifying a mipmap level, source box, start index, and number of elements. Declaration public void GetData<T>(int level, int left, int top, int right, int bottom, int front, int back, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 level Mipmap level. System.Int32 left Position of the left side of the box on the x-axis. System.Int32 top Position of the top of the box on the y-axis. System.Int32 right Position of the right side of the box on the x-axis. System.Int32 bottom Position of the bottom of the box on the y-axis. System.Int32 front Position of the front of the box on the z-axis. System.Int32 back Position of the back of the box on the z-axis. T[] data Array of data. System.Int32 startIndex Index of the first element to get. System.Int32 elementCount Number of elements to get. Type Parameters Name Description T The type of the elements in the array. | Improve this Doc View Source SetData<T>(T[]) Declaration public void SetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T | Improve this Doc View Source SetData<T>(T[], Int32, Int32) Declaration public void SetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetData<T>(Int32, Int32, Int32, Int32, Int32, Int32, Int32, T[], Int32, Int32) Declaration public void SetData<T>(int level, int left, int top, int right, int bottom, int front, int back, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 level System.Int32 left System.Int32 top System.Int32 right System.Int32 bottom System.Int32 front System.Int32 back T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.SetDataOptions.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SetDataOptions.html",
    "title": "Enum SetDataOptions | MonoGame Documentation",
    "keywords": "Enum SetDataOptions Defines how vertex or index buffer data will be flushed during a SetData operation. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum SetDataOptions Fields Name Description Discard The SetData will discard the entire buffer. A pointer to a new memory area is returned and rendering from the previous area do not stall. None The SetData can overwrite the portions of existing data. NoOverwrite The SetData operation will not overwrite existing data. This allows the driver to return immediately from a SetData operation and continue rendering."
  },
  "_api/Microsoft.Xna.Framework.Graphics.SamplerStateCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SamplerStateCollection.html",
    "title": "Class SamplerStateCollection | MonoGame Documentation",
    "keywords": "Class SamplerStateCollection Inheritance System.Object SamplerStateCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class SamplerStateCollection Properties | Improve this Doc View Source Item[Int32] Declaration public SamplerState this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description SamplerState"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Short2.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Short2.html",
    "title": "Struct Short2 | MonoGame Documentation",
    "keywords": "Struct Short2 Implements IPackedVector < System.UInt32 > IPackedVector System.IEquatable < Short2 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Short2 : IPackedVector<uint>, IPackedVector, IEquatable<Short2> Constructors | Improve this Doc View Source Short2(Vector2) Declaration public Short2(Vector2 vector) Parameters Type Name Description Vector2 vector | Improve this Doc View Source Short2(Single, Single) Declaration public Short2(float x, float y) Parameters Type Name Description System.Single x System.Single y Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(Short2) Declaration public bool Equals(Short2 other) Parameters Type Name Description Short2 other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector2() Declaration public Vector2 ToVector2() Returns Type Description Vector2 Operators | Improve this Doc View Source Equality(Short2, Short2) Declaration public static bool operator ==(Short2 a, Short2 b) Parameters Type Name Description Short2 a Short2 b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Short2, Short2) Declaration public static bool operator !=(Short2 a, Short2 b) Parameters Type Name Description Short2 a Short2 b Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source IPackedVector.ToVector4() Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.html",
    "title": "Struct Rgba64 | MonoGame Documentation",
    "keywords": "Struct Rgba64 Packed vector type containing four 16-bit unsigned normalized values ranging from 0 to 1. Implements IPackedVector < System.UInt64 > System.IEquatable < Rgba64 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Rgba64 : IPackedVector<ulong>, IEquatable<Rgba64>, IPackedVector Constructors | Improve this Doc View Source Rgba64(Vector4) Creates a new instance of Rgba64. Declaration public Rgba64(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components for the packed vector. | Improve this Doc View Source Rgba64(Single, Single, Single, Single) Creates a new instance of Rgba64. Declaration public Rgba64(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x component System.Single y The y component System.Single z The z component System.Single w The w component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public ulong PackedValue { get; set; } Property Value Type Description System.UInt64 Methods | Improve this Doc View Source Equals(Rgba64) Compares another Rgba64 packed vector with the packed vector. Declaration public bool Equals(Rgba64 other) Parameters Type Name Description Rgba64 other The Rgba64 packed vector to compare. Returns Type Description System.Boolean True if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean True if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Gets the packed vector in Vector4 format. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Operators | Improve this Doc View Source Equality(Rgba64, Rgba64) Declaration public static bool operator ==(Rgba64 lhs, Rgba64 rhs) Parameters Type Name Description Rgba64 lhs Rgba64 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Rgba64, Rgba64) Declaration public static bool operator !=(Rgba64 lhs, Rgba64 rhs) Parameters Type Name Description Rgba64 lhs Rgba64 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.CurveLoopType.html": {
    "href": "_api/Microsoft.Xna.Framework.CurveLoopType.html",
    "title": "Enum CurveLoopType | MonoGame Documentation",
    "keywords": "Enum CurveLoopType Defines how the Curve value is determined for position before first point or after the end point on the Curve . Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum CurveLoopType Fields Name Description Constant The value of Curve will be evaluated as first point for positions before the beginning and end point for positions after the end. Cycle The positions will wrap around from the end to beginning of the Curve for determined the value. CycleOffset The positions will wrap around from the end to beginning of the Curve . The value will be offset by the difference between the values of first and end CurveKey multiplied by the wrap amount. If the position is before the beginning of the Curve the difference will be subtracted from its value; otherwise the difference will be added. Linear The linear interpolation will be performed for determined the value. Oscillate The value at the end of the Curve act as an offset from the same side of the Curve toward the opposite side."
  },
  "_api/Microsoft.Xna.Framework.Content.ContentTypeReader.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentTypeReader.html",
    "title": "Class ContentTypeReader | MonoGame Documentation",
    "keywords": "Class ContentTypeReader Inheritance System.Object ContentTypeReader ContentTypeReader<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public abstract class ContentTypeReader Constructors | Improve this Doc View Source ContentTypeReader(Type) Declaration protected ContentTypeReader(Type targetType) Parameters Type Name Description System.Type targetType Properties | Improve this Doc View Source CanDeserializeIntoExistingObject Declaration public virtual bool CanDeserializeIntoExistingObject { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TargetType Declaration public Type TargetType { get; } Property Value Type Description System.Type | Improve this Doc View Source TypeVersion Declaration public virtual int TypeVersion { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Initialize(ContentTypeReaderManager) Declaration protected virtual void Initialize(ContentTypeReaderManager manager) Parameters Type Name Description ContentTypeReaderManager manager | Improve this Doc View Source Read(ContentReader, Object) Declaration protected abstract object Read(ContentReader input, object existingInstance) Parameters Type Name Description ContentReader input System.Object existingInstance Returns Type Description System.Object"
  },
  "_api/Microsoft.Xna.Framework.Content.ContentLoadException.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentLoadException.html",
    "title": "Class ContentLoadException | MonoGame Documentation",
    "keywords": "Class ContentLoadException Inheritance System.Object System.Exception ContentLoadException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public class ContentLoadException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source ContentLoadException() Declaration public ContentLoadException() | Improve this Doc View Source ContentLoadException(String) Declaration public ContentLoadException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source ContentLoadException(String, Exception) Declaration public ContentLoadException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Audio.WaveBank.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.WaveBank.html",
    "title": "Class WaveBank | MonoGame Documentation",
    "keywords": "Class WaveBank Represents a collection of wave files. Inheritance System.Object WaveBank Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class WaveBank : IDisposable Constructors | Improve this Doc View Source WaveBank(AudioEngine, String) Declaration public WaveBank(AudioEngine audioEngine, string nonStreamingWaveBankFilename) Parameters Type Name Description AudioEngine audioEngine Instance of the AudioEngine to associate this wave bank with. System.String nonStreamingWaveBankFilename Path to the .xwb file to load. Remarks This constructor immediately loads all wave data into memory at once. | Improve this Doc View Source WaveBank(AudioEngine, String, Int32, Int16) Declaration public WaveBank(AudioEngine audioEngine, string streamingWaveBankFilename, int offset, short packetsize) Parameters Type Name Description AudioEngine audioEngine Instance of the AudioEngine to associate this wave bank with. System.String streamingWaveBankFilename Path to the .xwb to stream from. System.Int32 offset DVD sector-aligned offset within the wave bank data file. System.Int16 packetsize Stream packet size, in sectors, to use for each stream. The minimum value is 2. Remarks This constructor streams wave data as needed. Note that packetsize is in sectors, which is 2048 bytes. AudioEngine.Update() must be called at least once before using data from a streaming wave bank. Properties | Improve this Doc View Source IsDisposed Is true if the WaveBank has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInUse Declaration public bool IsInUse { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPrepared Declaration public bool IsPrepared { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Dispose() Disposes the WaveBank. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() Events | Improve this Doc View Source Disposing This event is triggered when the WaveBank is disposed. Declaration public event EventHandler<EventArgs> Disposing Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Audio.Microphone.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.Microphone.html",
    "title": "Class Microphone | MonoGame Documentation",
    "keywords": "Class Microphone Provides microphones capture features. Inheritance System.Object Microphone Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public sealed class Microphone Fields | Improve this Doc View Source Name Returns the friendly name of the microphone. Declaration public readonly string Name Field Value Type Description System.String Properties | Improve this Doc View Source All Returns all compatible microphones. Declaration public static ReadOnlyCollection<Microphone> All { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < Microphone > | Improve this Doc View Source BufferDuration Gets or sets the capture buffer duration. This value must be greater than 100 milliseconds, lower than 1000 milliseconds, and must be 10 milliseconds aligned (BufferDuration % 10 == 10). Declaration public TimeSpan BufferDuration { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Default Returns the default microphone. Declaration public static Microphone Default { get; } Property Value Type Description Microphone | Improve this Doc View Source IsHeadset Determines if the microphone is a wired headset. Note: XNA could know if a headset microphone was plugged in an Xbox 360 controller but MonoGame can't. Hence, this is always true on mobile platforms, and always false otherwise. Declaration public bool IsHeadset { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SampleRate Returns the sample rate of the captured audio. Note: default value is 44100hz Declaration public int SampleRate { get; } Property Value Type Description System.Int32 | Improve this Doc View Source State Returns the state of the Microphone. Declaration public MicrophoneState State { get; } Property Value Type Description MicrophoneState Methods | Improve this Doc View Source GetData(Byte[]) Gets the latest available data from the microphone. Declaration public int GetData(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Buffer, in bytes, of the captured data (16-bit PCM). Returns Type Description System.Int32 The buffer size, in bytes, of the captured data. | Improve this Doc View Source GetData(Byte[], Int32, Int32) Gets the latest available data from the microphone. Declaration public int GetData(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer Buffer, in bytes, of the captured data (16-bit PCM). System.Int32 offset Byte offset. System.Int32 count Amount, in bytes. Returns Type Description System.Int32 The buffer size, in bytes, of the captured data. | Improve this Doc View Source GetSampleDuration(Int32) Returns the duration based on the size of the buffer (assuming 16-bit PCM data). Declaration public TimeSpan GetSampleDuration(int sizeInBytes) Parameters Type Name Description System.Int32 sizeInBytes Size, in bytes Returns Type Description System.TimeSpan TimeSpan of the duration. | Improve this Doc View Source GetSampleSizeInBytes(TimeSpan) Returns the size, in bytes, of the array required to hold the specified duration of 16-bit PCM data. Declaration public int GetSampleSizeInBytes(TimeSpan duration) Parameters Type Name Description System.TimeSpan duration TimeSpan of the duration of the sample. Returns Type Description System.Int32 Size, in bytes, of the buffer. | Improve this Doc View Source Start() Starts microphone capture. Declaration public void Start() | Improve this Doc View Source Stop() Stops microphone capture. Declaration public void Stop() Events | Improve this Doc View Source BufferReady Event fired when the audio data are available. Declaration public event EventHandler<EventArgs> BufferReady Event Type Type Description System.EventHandler < System.EventArgs >"
  },
  "_api/Microsoft.Xna.Framework.Audio.AudioEngine.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.AudioEngine.html",
    "title": "Class AudioEngine | MonoGame Documentation",
    "keywords": "Class AudioEngine Class used to create and manipulate code audio objects. Inheritance System.Object AudioEngine Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class AudioEngine : IDisposable Constructors | Improve this Doc View Source AudioEngine(String) Declaration public AudioEngine(string settingsFile) Parameters Type Name Description System.String settingsFile Path to a XACT settings file. | Improve this Doc View Source AudioEngine(String, TimeSpan, String) Declaration public AudioEngine(string settingsFile, TimeSpan lookAheadTime, string rendererId) Parameters Type Name Description System.String settingsFile Path to a XACT settings file. System.TimeSpan lookAheadTime Determines how many milliseconds the engine will look ahead when determing when to transition to another sound. System.String rendererId A string that specifies the audio renderer to use. Remarks For the best results, use a lookAheadTime of 250 milliseconds or greater. Fields | Improve this Doc View Source ContentVersion The current content version. Declaration public const int ContentVersion = 39 Field Value Type Description System.Int32 Properties | Improve this Doc View Source IsDisposed Is true if the AudioEngine has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Dispose() Disposes the AudioEngine. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetCategory(String) Returns an audio category by name. Declaration public AudioCategory GetCategory(string name) Parameters Type Name Description System.String name Friendly name of the category to get. Returns Type Description AudioCategory The AudioCategory with a matching name. Throws an exception if not found. | Improve this Doc View Source GetGlobalVariable(String) Gets the value of a global variable. Declaration public float GetGlobalVariable(string name) Parameters Type Name Description System.String name Friendly name of the variable. Returns Type Description System.Single float value of the queried variable. Remarks A global variable has global scope. It can be accessed by all code within a project. | Improve this Doc View Source SetGlobalVariable(String, Single) Sets the value of a global variable. Declaration public void SetGlobalVariable(string name, float value) Parameters Type Name Description System.String name Friendly name of the variable. System.Single value Value of the global variable. | Improve this Doc View Source Update() Performs periodic work required by the audio engine. Declaration public void Update() Remarks Must be called at least once per frame. Events | Improve this Doc View Source Disposing This event is triggered when the AudioEngine is disposed. Declaration public event EventHandler<EventArgs> Disposing Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "_api/MonoGame.Utilities.CompressionLevel.html": {
    "href": "_api/MonoGame.Utilities.CompressionLevel.html",
    "title": "Enum CompressionLevel | MonoGame Documentation",
    "keywords": "Enum CompressionLevel The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress. Namespace : MonoGame.Utilities Assembly : MonoGame.Framework.dll Syntax public enum CompressionLevel Fields Name Description BestCompression The \"best\" compression, where best means greatest reduction in size of the input data stream. This is also the slowest compression. BestSpeed The fastest but least effective compression. Default The default compression level, with a good balance of speed and compression efficiency. Level0 Same as None. Level1 A synonym for BestSpeed. Level2 A little slower, but better, than level 1. Level3 A little slower, but better, than level 2. Level4 A little slower, but better, than level 3. Level5 A little slower than level 4, but with better compression. Level6 A synonym for Default. Level7 Pretty good compression! Level8 Better compression than Level7! Level9 A synonym for BestCompression. None None means that the data will be simply stored, with no change at all. If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None cannot be opened with the default zip reader. Use a different CompressionLevel."
  },
  "_api/MonoGame.OpenGL.html": {
    "href": "_api/MonoGame.OpenGL.html",
    "title": "Namespace MonoGame.OpenGL | MonoGame Documentation",
    "keywords": "Namespace MonoGame.OpenGL Interfaces IWindowInfo"
  },
  "_api/MonoGame.OpenGL.IWindowInfo.html": {
    "href": "_api/MonoGame.OpenGL.IWindowInfo.html",
    "title": "Interface IWindowInfo | MonoGame Documentation",
    "keywords": "Interface IWindowInfo Namespace : MonoGame.OpenGL Assembly : MonoGame.Framework.dll Syntax public interface IWindowInfo Properties | Improve this Doc View Source Handle Declaration IntPtr Handle { get; } Property Value Type Description System.IntPtr"
  },
  "_api/Microsoft.Xna.Framework.html": {
    "href": "_api/Microsoft.Xna.Framework.html",
    "title": "Namespace Microsoft.Xna.Framework | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework Classes BoundingFrustum Defines a viewing frustum for intersection operations. Curve Contains a collection of CurveKey points in 2D space and provides methods for evaluating features of the curve they define. CurveKey Key point on the Curve . CurveKeyCollection The collection of the CurveKey elements and a part of the Curve class. DrawableGameComponent FrameworkDispatcher Helper class for processing internal framework events. Game GameComponent GameComponentCollection GameComponentCollectionEventArgs GameServiceContainer GameTime GameUpdateRequiredException GameWindow GraphicsDeviceInformation The settings used in creation of the graphics device. See PreparingDeviceSettings . GraphicsDeviceManager Used to initialize and control the presentation of the graphics device. LaunchParameters MathHelper Contains commonly used precalculated values and mathematical operations. PreparingDeviceSettingsEventArgs The arguments to the PreparingDeviceSettings event. TextInputEventArgs This class is used for the game window's TextInput event as EventArgs. TitleContainer Structs BoundingBox BoundingSphere Describes a sphere in 3D-space for bounding operations. Color Describes a 32-bit packed color. Matrix Represents the right-handed 4x4 floating point matrix, which can store translation, scale and rotation information. Plane Point Describes a 2D-point. Quaternion An efficient mathematical representation for three dimensional rotations. Ray Rectangle Describes a 2D-rectangle. Vector2 Describes a 2D-vector. Vector3 Describes a 3D-vector. Vector4 Describes a 4D-vector. Interfaces IDrawable IGameComponent IGraphicsDeviceManager Used by the platform code to control the graphics device. IUpdateable Enums ContainmentType Defines how the bounding volumes intersects or contain one another. CurveContinuity Defines the continuity of keys on a Curve . CurveLoopType Defines how the Curve value is determined for position before first point or after the end point on the Curve . CurveTangent Defines the different tangent types to be calculated for CurveKey points in a Curve . DisplayOrientation Defines the orientation of the display. GameRunBehavior Defines how Game should be runned. PlaneIntersectionType Defines the intersection between a Plane and a bounding volume. PlayerIndex Defines the index of player for various MonoGame components."
  },
  "_api/Microsoft.Xna.Framework.Media.MediaQueue.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.MediaQueue.html",
    "title": "Class MediaQueue | MonoGame Documentation",
    "keywords": "Class MediaQueue Inheritance System.Object MediaQueue Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class MediaQueue Constructors | Improve this Doc View Source MediaQueue() Declaration public MediaQueue() Properties | Improve this Doc View Source ActiveSong Declaration public Song ActiveSong { get; } Property Value Type Description Song | Improve this Doc View Source ActiveSongIndex Declaration public int ActiveSongIndex { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public Song this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description Song"
  },
  "_api/Microsoft.Xna.Framework.Graphics.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.html",
    "title": "Namespace Microsoft.Xna.Framework.Graphics | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Graphics Classes AlphaTestEffect Built-in effect that supports alpha testing. BasicEffect Built-in effect that supports optional texturing, vertex coloring, fog, and lighting. BlendState DepthStencilState DeviceLostException DeviceNotResetException DirectionalLight DisplayMode DisplayModeCollection DualTextureEffect Built-in effect that supports two-layer multitexturing. DynamicIndexBuffer DynamicVertexBuffer Effect EffectAnnotation EffectAnnotationCollection EffectMaterial EffectParameter EffectParameterCollection EffectPass EffectPassCollection EffectTechnique EffectTechniqueCollection EnvironmentMapEffect Built-in effect that supports environment mapping. GraphicsAdapter GraphicsDebug GraphicsDebugMessage GraphicsDevice GraphicsResource IndexBuffer Model A basic 3D model with per mesh parent bones. ModelBone ModelBoneCollection Represents a set of bones associated with a model. ModelEffectCollection ModelMesh ModelMeshCollection Represents a collection of ModelMesh objects. ModelMeshPart ModelMeshPartCollection NoSuitableGraphicsDeviceException OcclusionQuery PresentationParameters RasterizerState RenderTarget2D RenderTarget3D RenderTargetCube Represents a texture cube that can be used as a render target. ResourceCreatedEventArgs ResourceDestroyedEventArgs SamplerState SamplerStateCollection SkinnedEffect Built-in effect for rendering skinned character models. SpriteBatch Helper class for drawing text strings and sprites in one or more optimized batches. SpriteEffect The default effect used by SpriteBatch. SpriteFont SwapChainRenderTarget A swap chain used for rendering to a secondary GameWindow. TargetBlendState Texture Texture2D Texture3D TextureCollection TextureCube VertexBuffer VertexDeclaration Defines per-vertex data of a vertex buffer. Structs EffectPassCollection.Enumerator GraphicsMetrics A snapshot of rendering statistics from Metrics to be used for runtime debugging and profiling. ModelBoneCollection.Enumerator Provides the ability to iterate through the bones in an ModelMeshCollection. ModelEffectCollection.Enumerator ModelMeshCollection.Enumerator Provides the ability to iterate through the bones in an ModelMeshCollection. RenderTargetBinding SpriteFont.Glyph Struct that defines the spacing, Kerning, and bounds of a character. VertexBufferBinding Defines how a vertex buffer is bound to the graphics device for rendering. VertexElement Defines a single element in a vertex. VertexPosition VertexPositionColor VertexPositionColorTexture VertexPositionNormalTexture VertexPositionTexture Viewport Describes the view bounds for render-target surface. Interfaces IEffectFog The common effect fog rendering parameters. IEffectLights The common effect light rendering parameters. IEffectMatrices IGraphicsDeviceService IVertexType Enums Blend Defines a blend mode. BlendFunction Defines a function for color blending. BufferUsage A usage hint for optimizing memory placement of graphics buffers. ClearOptions Defines the buffers for clearing when calling Clear(ClearOptions, Color, Single, Int32) operation. ColorWriteChannels Defines the color channels for render target blending operations. CompareFunction The comparison function used for depth, stencil, and alpha tests. CubeMapFace Defines the faces in a cube map for the TextureCube class. CullMode Defines a culling mode for faces in rasterization process. DepthFormat Defines formats for depth-stencil buffer. EffectParameterClass Defines classes for effect parameters and shader constants. EffectParameterType Defines types for effect parameters and shader constants. FillMode Defines options for filling the primitive. GraphicsAdapter.DriverType Defines the driver type for graphics adapter. Usable only on DirectX platforms for now. GraphicsDeviceStatus Describes the status of the GraphicsDevice . GraphicsProfile Defines a set of graphic capabilities. IndexElementSize Defines size for index in IndexBuffer and DynamicIndexBuffer . PresentInterval Defines how Present() updates the game window. PrimitiveType Defines how vertex data is ordered. RenderTargetUsage Defines if the previous content in a render target is preserved when it set on the graphics device. SetDataOptions Defines how vertex or index buffer data will be flushed during a SetData operation. SpriteEffects Defines sprite visual options for mirroring. SpriteSortMode Defines sprite sort rendering options. StencilOperation Defines stencil buffer operations. SurfaceFormat Defines types of surface formats. Texture2D.SurfaceType TextureAddressMode Defines modes for addressing texels using texture coordinates that are outside of the range of 0.0 to 1.0. TextureFilter Defines filtering types for texture sampler. TextureFilterMode Filtering modes for texture samplers. VertexElementFormat Defines vertex element formats. VertexElementUsage Defines usage for vertex elements."
  },
  "_api/Microsoft.Xna.Framework.Graphics.TextureFilterMode.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.TextureFilterMode.html",
    "title": "Enum TextureFilterMode | MonoGame Documentation",
    "keywords": "Enum TextureFilterMode Filtering modes for texture samplers. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum TextureFilterMode Fields Name Description Comparison Default"
  },
  "_api/Microsoft.Xna.Framework.Graphics.TextureFilter.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.TextureFilter.html",
    "title": "Enum TextureFilter | MonoGame Documentation",
    "keywords": "Enum TextureFilter Defines filtering types for texture sampler. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum TextureFilter Fields Name Description Anisotropic Use anisotropic filtering. Linear Use linear filtering. LinearMipPoint Use linear filtering to shrink or expand, and point filtering between mipmap levels (mip). MinLinearMagPointMipLinear Use linear filtering to shrink, point filtering to expand, and linear filtering between mipmap levels. MinLinearMagPointMipPoint Use linear filtering to shrink, point filtering to expand, and point filtering between mipmap levels. MinPointMagLinearMipLinear Use point filtering to shrink, linear filtering to expand, and linear filtering between mipmap levels. MinPointMagLinearMipPoint Use point filtering to shrink, linear filtering to expand, and point filtering between mipmap levels. Point Use point filtering. PointMipLinear Use point filtering to shrink (minify) or expand (magnify), and linear filtering between mipmap levels."
  },
  "_api/Microsoft.Xna.Framework.Graphics.SpriteEffects.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SpriteEffects.html",
    "title": "Enum SpriteEffects | MonoGame Documentation",
    "keywords": "Enum SpriteEffects Defines sprite visual options for mirroring. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [Flags] public enum SpriteEffects Fields Name Description FlipHorizontally Render the sprite reversed along the X axis. FlipVertically Render the sprite reversed along the Y axis. None No options specified."
  },
  "_api/Microsoft.Xna.Framework.Graphics.SpriteEffect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SpriteEffect.html",
    "title": "Class SpriteEffect | MonoGame Documentation",
    "keywords": "Class SpriteEffect The default effect used by SpriteBatch. Inheritance System.Object GraphicsResource Effect SpriteEffect Implements System.IDisposable Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class SpriteEffect : Effect, IDisposable Constructors | Improve this Doc View Source SpriteEffect(GraphicsDevice) Creates a new SpriteEffect. Declaration public SpriteEffect(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device | Improve this Doc View Source SpriteEffect(SpriteEffect) Creates a new SpriteEffect by cloning parameter settings from an existing instance. Declaration protected SpriteEffect(SpriteEffect cloneSource) Parameters Type Name Description SpriteEffect cloneSource Methods | Improve this Doc View Source Clone() Creates a clone of the current SpriteEffect instance. Declaration public override Effect Clone() Returns Type Description Effect Overrides Effect.Clone() | Improve this Doc View Source OnApply() Lazily computes derived parameter values immediately before applying the effect. Declaration protected override void OnApply() Overrides Effect.OnApply() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PresentInterval.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PresentInterval.html",
    "title": "Enum PresentInterval | MonoGame Documentation",
    "keywords": "Enum PresentInterval Defines how Present() updates the game window. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum PresentInterval Fields Name Description Default Equivalent to One . Immediate The driver updates the window client area immediately. Present operations might be affected immediately. There is no limit for framerate. One The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than the screen refresh rate. Two The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than every second screen refresh."
  },
  "_api/Microsoft.Xna.Framework.Graphics.PresentationParameters.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PresentationParameters.html",
    "title": "Class PresentationParameters | MonoGame Documentation",
    "keywords": "Class PresentationParameters Inheritance System.Object PresentationParameters Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class PresentationParameters Constructors | Improve this Doc View Source PresentationParameters() Create a PresentationParameters instance with default values for all properties. Declaration public PresentationParameters() Fields | Improve this Doc View Source DefaultPresentRate Declaration public const int DefaultPresentRate = 60 Field Value Type Description System.Int32 Properties | Improve this Doc View Source BackBufferFormat Get or set the format of the back buffer. Declaration public SurfaceFormat BackBufferFormat { get; set; } Property Value Type Description SurfaceFormat | Improve this Doc View Source BackBufferHeight Get or set the height of the back buffer. Declaration public int BackBufferHeight { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BackBufferWidth Get or set the width of the back buffer. Declaration public int BackBufferWidth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Bounds Get the bounds of the back buffer. Declaration public Rectangle Bounds { get; } Property Value Type Description Rectangle | Improve this Doc View Source DepthStencilFormat Get or set the depth stencil format for the back buffer. Declaration public DepthFormat DepthStencilFormat { get; set; } Property Value Type Description DepthFormat | Improve this Doc View Source DeviceWindowHandle Get or set the handle of the window that will present the back buffer. Declaration public IntPtr DeviceWindowHandle { get; set; } Property Value Type Description System.IntPtr | Improve this Doc View Source DisplayOrientation Get or set the display orientation. Declaration public DisplayOrientation DisplayOrientation { get; set; } Property Value Type Description DisplayOrientation | Improve this Doc View Source HardwareModeSwitch If true the GraphicsDevice will do a mode switch when going to full screen mode. If false it will instead do a soft full screen by maximizing the window and making it borderless. Declaration public bool HardwareModeSwitch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFullScreen Get or set a value indicating if we are in full screen mode. Declaration public bool IsFullScreen { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiSampleCount Get or set the multisample count for the back buffer. Declaration public int MultiSampleCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PresentationInterval Get or set the presentation interval. Declaration public PresentInterval PresentationInterval { get; set; } Property Value Type Description PresentInterval | Improve this Doc View Source RenderTargetUsage Get or set the RenderTargetUsage for the back buffer. Determines if the back buffer is cleared when it is set as the render target by the GraphicsDevice . GraphicsDevice target. Declaration public RenderTargetUsage RenderTargetUsage { get; set; } Property Value Type Description RenderTargetUsage Methods | Improve this Doc View Source Clear() Reset all properties to their default values. Declaration public void Clear() | Improve this Doc View Source Clone() Create a copy of this PresentationParameters instance. Declaration public PresentationParameters Clone() Returns Type Description PresentationParameters"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.html",
    "title": "Struct HalfVector4 | MonoGame Documentation",
    "keywords": "Struct HalfVector4 Packed vector type containing four 16-bit floating-point values. Implements IPackedVector < System.UInt64 > IPackedVector System.IEquatable < HalfVector4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct HalfVector4 : IPackedVector<ulong>, IPackedVector, IEquatable<HalfVector4> Constructors | Improve this Doc View Source HalfVector4(Vector4) Initializes a new instance of the HalfVector4 structure. Declaration public HalfVector4(Vector4 vector) Parameters Type Name Description Vector4 vector A vector containing the initial values for the components of the HalfVector4 structure. | Improve this Doc View Source HalfVector4(Single, Single, Single, Single) Initializes a new instance of the HalfVector4 structure. Declaration public HalfVector4(float x, float y, float z, float w) Parameters Type Name Description System.Single x Initial value for the x component. System.Single y Initial value for the y component. System.Single z Initial value for the z component. System.Single w Initial value for the q component. Properties | Improve this Doc View Source PackedValue Directly gets or sets the packed representation of the value. Declaration [CLSCompliant(false)] public ulong PackedValue { get; set; } Property Value Type Description System.UInt64 The packed representation of the value. Methods | Improve this Doc View Source Equals(HalfVector4) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public bool Equals(HalfVector4 other) Parameters Type Name Description HalfVector4 other The object with which to make the comparison. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object with which to make the comparison. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code for the instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string representation of the current instance. Declaration public override string ToString() Returns Type Description System.String String that represents the object. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Expands the packed representation into a Vector4. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The expanded vector. Operators | Improve this Doc View Source Equality(HalfVector4, HalfVector4) Compares the current instance of a class to another instance to determine whether they are the same. Declaration public static bool operator ==(HalfVector4 a, HalfVector4 b) Parameters Type Name Description HalfVector4 a The object to the left of the equality operator. HalfVector4 b The object to the right of the equality operator. Returns Type Description System.Boolean true if the objects are the same; false otherwise. | Improve this Doc View Source Inequality(HalfVector4, HalfVector4) Compares the current instance of a class to another instance to determine whether they are different. Declaration public static bool operator !=(HalfVector4 a, HalfVector4 b) Parameters Type Name Description HalfVector4 a The object to the left of the equality operator. HalfVector4 b The object to the right of the equality operator. Returns Type Description System.Boolean true if the objects are different; false otherwise. Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed representation from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector The vector to create the packed representation from. Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.html",
    "title": "Struct HalfVector2 | MonoGame Documentation",
    "keywords": "Struct HalfVector2 Implements IPackedVector < System.UInt32 > IPackedVector System.IEquatable < HalfVector2 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct HalfVector2 : IPackedVector<uint>, IPackedVector, IEquatable<HalfVector2> Constructors | Improve this Doc View Source HalfVector2(Vector2) Declaration public HalfVector2(Vector2 vector) Parameters Type Name Description Vector2 vector | Improve this Doc View Source HalfVector2(Single, Single) Declaration public HalfVector2(float x, float y) Parameters Type Name Description System.Single x System.Single y Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(HalfVector2) Declaration public bool Equals(HalfVector2 other) Parameters Type Name Description HalfVector2 other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector2() Declaration public Vector2 ToVector2() Returns Type Description Vector2 Operators | Improve this Doc View Source Equality(HalfVector2, HalfVector2) Declaration public static bool operator ==(HalfVector2 a, HalfVector2 b) Parameters Type Name Description HalfVector2 a HalfVector2 b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(HalfVector2, HalfVector2) Declaration public static bool operator !=(HalfVector2 a, HalfVector2 b) Parameters Type Name Description HalfVector2 a HalfVector2 b Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source IPackedVector.ToVector4() Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 Implements IPackedVector<TPacked> IPackedVector System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.html",
    "title": "Struct ModelEffectCollection.Enumerator | MonoGame Documentation",
    "keywords": "Struct ModelEffectCollection.Enumerator Implements System.Collections.Generic.IEnumerator < Effect > System.IDisposable System.Collections.IEnumerator Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct Enumerator : IEnumerator<Effect>, IDisposable, IEnumerator Properties | Improve this Doc View Source Current Declaration public Effect Current { get; } Property Value Type Description Effect Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object | Improve this Doc View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelBoneCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelBoneCollection.html",
    "title": "Class ModelBoneCollection | MonoGame Documentation",
    "keywords": "Class ModelBoneCollection Represents a set of bones associated with a model. Inheritance System.Object System.Collections.ObjectModel.ReadOnlyCollection < ModelBone > ModelBoneCollection Implements System.Collections.Generic.IList < ModelBone > System.Collections.Generic.ICollection < ModelBone > System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList < ModelBone > System.Collections.Generic.IReadOnlyCollection < ModelBone > System.Collections.Generic.IEnumerable < ModelBone > System.Collections.IEnumerable Inherited Members System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Contains(Microsoft.Xna.Framework.Graphics.ModelBone) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.CopyTo(Microsoft.Xna.Framework.Graphics.ModelBone[], System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.IndexOf(Microsoft.Xna.Framework.Graphics.ModelBone) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelBone>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelBone>.set_Item(System.Int32, Microsoft.Xna.Framework.Graphics.ModelBone) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Add(Microsoft.Xna.Framework.Graphics.ModelBone) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelBone>.Insert(System.Int32, Microsoft.Xna.Framework.Graphics.ModelBone) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Remove(Microsoft.Xna.Framework.Graphics.ModelBone) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelBone>.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.Clear() System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.RemoveAt(System.Int32) System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Count System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.Items System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Graphics.ModelBone>.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.Generic.IList<Microsoft.Xna.Framework.Graphics.ModelBone>.Item[System.Int32] System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.IsFixedSize System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Graphics.ModelBone>.System.Collections.IList.Item[System.Int32] System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class ModelBoneCollection : ReadOnlyCollection<ModelBone>, IList<ModelBone>, ICollection<ModelBone>, IList, ICollection, IReadOnlyList<ModelBone>, IReadOnlyCollection<ModelBone>, IEnumerable<ModelBone>, IEnumerable Constructors | Improve this Doc View Source ModelBoneCollection(IList<ModelBone>) Declaration public ModelBoneCollection(IList<ModelBone> list) Parameters Type Name Description System.Collections.Generic.IList < ModelBone > list Properties | Improve this Doc View Source Item[String] Retrieves a ModelBone from the collection, given the name of the bone. Declaration public ModelBone this[string boneName] { get; } Parameters Type Name Description System.String boneName The name of the bone to retrieve. Property Value Type Description ModelBone Methods | Improve this Doc View Source GetEnumerator() Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection. Declaration public ModelBoneCollection.Enumerator GetEnumerator() Returns Type Description ModelBoneCollection.Enumerator | Improve this Doc View Source TryGetValue(String, out ModelBone) Finds a bone with a given name if it exists in the collection. Declaration public bool TryGetValue(string boneName, out ModelBone value) Parameters Type Name Description System.String boneName The name of the bone to find. ModelBone value The bone named boneName, if found. Returns Type Description System.Boolean true if the bone was found Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsDevice.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsDevice.html",
    "title": "Class GraphicsDevice | MonoGame Documentation",
    "keywords": "Class GraphicsDevice Inheritance System.Object GraphicsDevice Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class GraphicsDevice : IDisposable Constructors | Improve this Doc View Source GraphicsDevice(GraphicsAdapter, GraphicsProfile, PresentationParameters) Initializes a new instance of the GraphicsDevice class. Declaration public GraphicsDevice(GraphicsAdapter adapter, GraphicsProfile graphicsProfile, PresentationParameters presentationParameters) Parameters Type Name Description GraphicsAdapter adapter The graphics adapter. GraphicsProfile graphicsProfile The graphics profile. PresentationParameters presentationParameters The presentation options. Exceptions Type Condition System.ArgumentNullException presentationParameters is null . Properties | Improve this Doc View Source Adapter Declaration public GraphicsAdapter Adapter { get; } Property Value Type Description GraphicsAdapter | Improve this Doc View Source BlendFactor The color used as blend factor when alpha blending. Declaration public Color BlendFactor { get; set; } Property Value Type Description Color Remarks When only changing BlendFactor, use this rather than BlendFactor to only update BlendFactor so the whole BlendState does not have to be updated. | Improve this Doc View Source BlendState Declaration public BlendState BlendState { get; set; } Property Value Type Description BlendState | Improve this Doc View Source DepthStencilState Declaration public DepthStencilState DepthStencilState { get; set; } Property Value Type Description DepthStencilState | Improve this Doc View Source DisplayMode Declaration public DisplayMode DisplayMode { get; } Property Value Type Description DisplayMode | Improve this Doc View Source GraphicsDebug Access debugging APIs for the graphics subsystem. Declaration public GraphicsDebug GraphicsDebug { get; set; } Property Value Type Description GraphicsDebug | Improve this Doc View Source GraphicsDeviceStatus Declaration public GraphicsDeviceStatus GraphicsDeviceStatus { get; } Property Value Type Description GraphicsDeviceStatus | Improve this Doc View Source GraphicsProfile Declaration public GraphicsProfile GraphicsProfile { get; } Property Value Type Description GraphicsProfile | Improve this Doc View Source Handle Returns a handle to internal device object. Valid only on DirectX platforms. For usage, convert this to SharpDX.Direct3D11.Device. Declaration public object Handle { get; } Property Value Type Description System.Object | Improve this Doc View Source Indices Declaration public IndexBuffer Indices { get; set; } Property Value Type Description IndexBuffer | Improve this Doc View Source IsContentLost Declaration public bool IsContentLost { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDisposed Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Metrics The rendering information for debugging and profiling. The metrics are reset every frame after draw within Present() . Declaration public GraphicsMetrics Metrics { get; set; } Property Value Type Description GraphicsMetrics | Improve this Doc View Source PresentationParameters Declaration public PresentationParameters PresentationParameters { get; } Property Value Type Description PresentationParameters | Improve this Doc View Source RasterizerState Declaration public RasterizerState RasterizerState { get; set; } Property Value Type Description RasterizerState | Improve this Doc View Source RenderTargetCount Declaration public int RenderTargetCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ResourcesLost Declaration public bool ResourcesLost { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SamplerStates Declaration public SamplerStateCollection SamplerStates { get; } Property Value Type Description SamplerStateCollection | Improve this Doc View Source ScissorRectangle Declaration public Rectangle ScissorRectangle { get; set; } Property Value Type Description Rectangle | Improve this Doc View Source Textures Declaration public TextureCollection Textures { get; } Property Value Type Description TextureCollection | Improve this Doc View Source VertexSamplerStates Declaration public SamplerStateCollection VertexSamplerStates { get; } Property Value Type Description SamplerStateCollection | Improve this Doc View Source VertexTextures Declaration public TextureCollection VertexTextures { get; } Property Value Type Description TextureCollection | Improve this Doc View Source Viewport Declaration public Viewport Viewport { get; set; } Property Value Type Description Viewport Methods | Improve this Doc View Source Clear(Color) Declaration public void Clear(Color color) Parameters Type Name Description Color color | Improve this Doc View Source Clear(ClearOptions, Color, Single, Int32) Declaration public void Clear(ClearOptions options, Color color, float depth, int stencil) Parameters Type Name Description ClearOptions options Color color System.Single depth System.Int32 stencil | Improve this Doc View Source Clear(ClearOptions, Vector4, Single, Int32) Declaration public void Clear(ClearOptions options, Vector4 color, float depth, int stencil) Parameters Type Name Description ClearOptions options Vector4 color System.Single depth System.Int32 stencil | Improve this Doc View Source CreateDeviceResources() Create graphics device specific resources. Declaration protected virtual void CreateDeviceResources() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source DrawIndexedPrimitives(PrimitiveType, Int32, Int32, Int32) Draw geometry by indexing into the vertex buffer. Declaration public void DrawIndexedPrimitives(PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount) Parameters Type Name Description PrimitiveType primitiveType The type of primitives in the index buffer. System.Int32 baseVertex Used to offset the vertex range indexed from the vertex buffer. System.Int32 startIndex The index within the index buffer to start drawing from. System.Int32 primitiveCount The number of primitives to render from the index buffer. | Improve this Doc View Source DrawIndexedPrimitives(PrimitiveType, Int32, Int32, Int32, Int32, Int32) Draw geometry by indexing into the vertex buffer. Declaration [Obsolete(\"Use DrawIndexedPrimitives(PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount) instead. In future versions this method can be removed.\")] public void DrawIndexedPrimitives(PrimitiveType primitiveType, int baseVertex, int minVertexIndex, int numVertices, int startIndex, int primitiveCount) Parameters Type Name Description PrimitiveType primitiveType The type of primitives in the index buffer. System.Int32 baseVertex Used to offset the vertex range indexed from the vertex buffer. System.Int32 minVertexIndex This is unused and remains here only for XNA API compatibility. System.Int32 numVertices This is unused and remains here only for XNA API compatibility. System.Int32 startIndex The index within the index buffer to start drawing from. System.Int32 primitiveCount The number of primitives to render from the index buffer. Remarks Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored. | Improve this Doc View Source DrawInstancedPrimitives(PrimitiveType, Int32, Int32, Int32, Int32) Draw instanced geometry from the bound vertex buffers and index buffer. Declaration public void DrawInstancedPrimitives(PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount, int instanceCount) Parameters Type Name Description PrimitiveType primitiveType The type of primitives in the index buffer. System.Int32 baseVertex Used to offset the vertex range indexed from the vertex buffer. System.Int32 startIndex The index within the index buffer to start drawing from. System.Int32 primitiveCount The number of primitives in a single instance. System.Int32 instanceCount The number of instances to render. Remarks Draw geometry with data from multiple bound vertex streams at different frequencies. | Improve this Doc View Source DrawInstancedPrimitives(PrimitiveType, Int32, Int32, Int32, Int32, Int32, Int32) Draw instanced geometry from the bound vertex buffers and index buffer. Declaration [Obsolete(\"Use DrawInstancedPrimitives(PrimitiveType primitiveType, int baseVertex, int startIndex, int primitiveCount, int instanceCount) instead. In future versions this method can be removed.\")] public void DrawInstancedPrimitives(PrimitiveType primitiveType, int baseVertex, int minVertexIndex, int numVertices, int startIndex, int primitiveCount, int instanceCount) Parameters Type Name Description PrimitiveType primitiveType The type of primitives in the index buffer. System.Int32 baseVertex Used to offset the vertex range indexed from the vertex buffer. System.Int32 minVertexIndex This is unused and remains here only for XNA API compatibility. System.Int32 numVertices This is unused and remains here only for XNA API compatibility. System.Int32 startIndex The index within the index buffer to start drawing from. System.Int32 primitiveCount The number of primitives in a single instance. System.Int32 instanceCount The number of instances to render. Remarks Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored. | Improve this Doc View Source DrawPrimitives(PrimitiveType, Int32, Int32) Draw primitives of the specified type from the currently bound vertexbuffers without indexing. Declaration public void DrawPrimitives(PrimitiveType primitiveType, int vertexStart, int primitiveCount) Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw. System.Int32 vertexStart Index of the vertex to start at. System.Int32 primitiveCount The number of primitives to draw. | Improve this Doc View Source DrawUserIndexedPrimitives<T>(PrimitiveType, T[], Int32, Int32, Int16[], Int32, Int32) Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices. Declaration public void DrawUserIndexedPrimitives<T>(PrimitiveType primitiveType, T[] vertexData, int vertexOffset, int numVertices, short[] indexData, int indexOffset, int primitiveCount)where T : struct, IVertexType Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw with the vertices. T[] vertexData An array of vertices to draw. System.Int32 vertexOffset The index in the array of the first vertex to draw. System.Int32 numVertices The number of vertices to draw. System.Int16 [] indexData The index data. System.Int32 indexOffset The index in the array of indices of the first index to use System.Int32 primitiveCount The number of primitives to draw. Type Parameters Name Description T The type of the vertices. Remarks The VertexDeclaration will be found by getting VertexDeclaration from an instance of T and cached for subsequent calls. | Improve this Doc View Source DrawUserIndexedPrimitives<T>(PrimitiveType, T[], Int32, Int32, Int16[], Int32, Int32, VertexDeclaration) Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices. Declaration public void DrawUserIndexedPrimitives<T>(PrimitiveType primitiveType, T[] vertexData, int vertexOffset, int numVertices, short[] indexData, int indexOffset, int primitiveCount, VertexDeclaration vertexDeclaration)where T : struct Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw with the vertices. T[] vertexData An array of vertices to draw. System.Int32 vertexOffset The index in the array of the first vertex to draw. System.Int32 numVertices The number of vertices to draw. System.Int16 [] indexData The index data. System.Int32 indexOffset The index in the array of indices of the first index to use System.Int32 primitiveCount The number of primitives to draw. VertexDeclaration vertexDeclaration The layout of the vertices. Type Parameters Name Description T The type of the vertices. Remarks All indices in the vertex buffer are interpreted relative to the specified vertexOffset . For example a value of zero in the array of indices points to the vertex at index vertexOffset in the array of vertices. | Improve this Doc View Source DrawUserIndexedPrimitives<T>(PrimitiveType, T[], Int32, Int32, Int32[], Int32, Int32) Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices. Declaration public void DrawUserIndexedPrimitives<T>(PrimitiveType primitiveType, T[] vertexData, int vertexOffset, int numVertices, int[] indexData, int indexOffset, int primitiveCount)where T : struct, IVertexType Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw with the vertices. T[] vertexData An array of vertices to draw. System.Int32 vertexOffset The index in the array of the first vertex to draw. System.Int32 numVertices The number of vertices to draw. System.Int32 [] indexData The index data. System.Int32 indexOffset The index in the array of indices of the first index to use System.Int32 primitiveCount The number of primitives to draw. Type Parameters Name Description T The type of the vertices. Remarks The VertexDeclaration will be found by getting VertexDeclaration from an instance of T and cached for subsequent calls. | Improve this Doc View Source DrawUserIndexedPrimitives<T>(PrimitiveType, T[], Int32, Int32, Int32[], Int32, Int32, VertexDeclaration) Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices. Declaration public void DrawUserIndexedPrimitives<T>(PrimitiveType primitiveType, T[] vertexData, int vertexOffset, int numVertices, int[] indexData, int indexOffset, int primitiveCount, VertexDeclaration vertexDeclaration)where T : struct Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw with the vertices. T[] vertexData An array of vertices to draw. System.Int32 vertexOffset The index in the array of the first vertex to draw. System.Int32 numVertices The number of vertices to draw. System.Int32 [] indexData The index data. System.Int32 indexOffset The index in the array of indices of the first index to use System.Int32 primitiveCount The number of primitives to draw. VertexDeclaration vertexDeclaration The layout of the vertices. Type Parameters Name Description T The type of the vertices. Remarks All indices in the vertex buffer are interpreted relative to the specified vertexOffset . For example value of zero in the array of indices points to the vertex at index vertexOffset in the array of vertices. | Improve this Doc View Source DrawUserPrimitives<T>(PrimitiveType, T[], Int32, Int32) Draw primitives of the specified type from the data in an array of vertices without indexing. Declaration public void DrawUserPrimitives<T>(PrimitiveType primitiveType, T[] vertexData, int vertexOffset, int primitiveCount)where T : struct, IVertexType Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw with the vertices. T[] vertexData An array of vertices to draw. System.Int32 vertexOffset The index in the array of the first vertex that should be rendered. System.Int32 primitiveCount The number of primitives to draw. Type Parameters Name Description T The type of the vertices. Remarks The VertexDeclaration will be found by getting VertexDeclaration from an instance of T and cached for subsequent calls. | Improve this Doc View Source DrawUserPrimitives<T>(PrimitiveType, T[], Int32, Int32, VertexDeclaration) Draw primitives of the specified type from the data in the given array of vertices without indexing. Declaration public void DrawUserPrimitives<T>(PrimitiveType primitiveType, T[] vertexData, int vertexOffset, int primitiveCount, VertexDeclaration vertexDeclaration)where T : struct Parameters Type Name Description PrimitiveType primitiveType The type of primitives to draw with the vertices. T[] vertexData An array of vertices to draw. System.Int32 vertexOffset The index in the array of the first vertex that should be rendered. System.Int32 primitiveCount The number of primitives to draw. VertexDeclaration vertexDeclaration The layout of the vertices. Type Parameters Name Description T The type of the vertices. | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Flush() Sends queued-up commands in the command buffer to the graphics processing unit (GPU). Declaration public void Flush() | Improve this Doc View Source GetBackBufferData<T>(T[]) Gets the Pixel data of what is currently drawn on screen. The format is whatever the current format of the backbuffer is. Declaration public void GetBackBufferData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T A byte[] of size (ViewPort.Width * ViewPort.Height * 4) | Improve this Doc View Source GetBackBufferData<T>(T[], Int32, Int32) Declaration public void GetBackBufferData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source GetBackBufferData<T>(Nullable<Rectangle>, T[], Int32, Int32) Declaration public void GetBackBufferData<T>(Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Nullable < Rectangle > rect T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source GetRenderTargets() Declaration public RenderTargetBinding[] GetRenderTargets() Returns Type Description RenderTargetBinding [] | Improve this Doc View Source GetRenderTargets(RenderTargetBinding[]) Declaration public void GetRenderTargets(RenderTargetBinding[] outTargets) Parameters Type Name Description RenderTargetBinding [] outTargets | Improve this Doc View Source Present() Declaration public void Present() | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source Reset(PresentationParameters) Declaration public void Reset(PresentationParameters presentationParameters) Parameters Type Name Description PresentationParameters presentationParameters | Improve this Doc View Source SetRenderTarget(RenderTarget2D) Declaration public void SetRenderTarget(RenderTarget2D renderTarget) Parameters Type Name Description RenderTarget2D renderTarget | Improve this Doc View Source SetRenderTarget(RenderTarget2D, Int32) Declaration public void SetRenderTarget(RenderTarget2D renderTarget, int arraySlice) Parameters Type Name Description RenderTarget2D renderTarget System.Int32 arraySlice | Improve this Doc View Source SetRenderTarget(RenderTarget3D, Int32) Declaration public void SetRenderTarget(RenderTarget3D renderTarget, int arraySlice) Parameters Type Name Description RenderTarget3D renderTarget System.Int32 arraySlice | Improve this Doc View Source SetRenderTarget(RenderTargetCube, CubeMapFace) Declaration public void SetRenderTarget(RenderTargetCube renderTarget, CubeMapFace cubeMapFace) Parameters Type Name Description RenderTargetCube renderTarget CubeMapFace cubeMapFace | Improve this Doc View Source SetRenderTargets(RenderTargetBinding[]) Declaration public void SetRenderTargets(params RenderTargetBinding[] renderTargets) Parameters Type Name Description RenderTargetBinding [] renderTargets | Improve this Doc View Source SetVertexBuffer(VertexBuffer) Declaration public void SetVertexBuffer(VertexBuffer vertexBuffer) Parameters Type Name Description VertexBuffer vertexBuffer | Improve this Doc View Source SetVertexBuffer(VertexBuffer, Int32) Declaration public void SetVertexBuffer(VertexBuffer vertexBuffer, int vertexOffset) Parameters Type Name Description VertexBuffer vertexBuffer System.Int32 vertexOffset | Improve this Doc View Source SetVertexBuffers(VertexBufferBinding[]) Declaration public void SetVertexBuffers(params VertexBufferBinding[] vertexBuffers) Parameters Type Name Description VertexBufferBinding [] vertexBuffers Events | Improve this Doc View Source DeviceLost Declaration public event EventHandler<EventArgs> DeviceLost Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceReset Declaration public event EventHandler<EventArgs> DeviceReset Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceResetting Declaration public event EventHandler<EventArgs> DeviceResetting Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source Disposing Declaration public event EventHandler<EventArgs> Disposing Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source ResourceCreated Declaration public event EventHandler<ResourceCreatedEventArgs> ResourceCreated Event Type Type Description System.EventHandler < ResourceCreatedEventArgs > | Improve this Doc View Source ResourceDestroyed Declaration public event EventHandler<ResourceDestroyedEventArgs> ResourceDestroyed Event Type Type Description System.EventHandler < ResourceDestroyedEventArgs > Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsDebugMessage.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsDebugMessage.html",
    "title": "Class GraphicsDebugMessage | MonoGame Documentation",
    "keywords": "Class GraphicsDebugMessage Inheritance System.Object GraphicsDebugMessage Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class GraphicsDebugMessage Properties | Improve this Doc View Source Category Declaration public string Category { get; set; } Property Value Type Description System.String | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source IdName Declaration public string IdName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Message Declaration public string Message { get; set; } Property Value Type Description System.String | Improve this Doc View Source Severity Declaration public string Severity { get; set; } Property Value Type Description System.String"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectMaterial.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectMaterial.html",
    "title": "Class EffectMaterial | MonoGame Documentation",
    "keywords": "Class EffectMaterial Inheritance System.Object GraphicsResource Effect EffectMaterial Implements System.IDisposable Inherited Members Effect.Parameters Effect.Techniques Effect.CurrentTechnique Effect.Clone() Effect.OnApply() Effect.Dispose(Boolean) Effect.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectMaterial : Effect, IDisposable Constructors | Improve this Doc View Source EffectMaterial(Effect) Declaration public EffectMaterial(Effect cloneSource) Parameters Type Name Description Effect cloneSource Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.html",
    "title": "Class EffectAnnotationCollection | MonoGame Documentation",
    "keywords": "Class EffectAnnotationCollection Inheritance System.Object EffectAnnotationCollection Implements System.Collections.Generic.IEnumerable < EffectAnnotation > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectAnnotationCollection : IEnumerable<EffectAnnotation>, IEnumerable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public EffectAnnotation this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description EffectAnnotation | Improve this Doc View Source Item[String] Declaration public EffectAnnotation this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description EffectAnnotation Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<EffectAnnotation> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < EffectAnnotation > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ColorWriteChannels.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ColorWriteChannels.html",
    "title": "Enum ColorWriteChannels | MonoGame Documentation",
    "keywords": "Enum ColorWriteChannels Defines the color channels for render target blending operations. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [Flags] public enum ColorWriteChannels Fields Name Description All All channels selected. Alpha Alpha channel selected. Blue Blue channel selected. Green Green channel selected. None No channels selected. Red Red channel selected."
  },
  "_api/Microsoft.Xna.Framework.Graphics.ClearOptions.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ClearOptions.html",
    "title": "Enum ClearOptions | MonoGame Documentation",
    "keywords": "Enum ClearOptions Defines the buffers for clearing when calling Clear(ClearOptions, Color, Single, Int32) operation. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [Flags] public enum ClearOptions Fields Name Description DepthBuffer Depth buffer. Stencil Stencil buffer. Target Color buffer."
  },
  "_api/Microsoft.Xna.Framework.GameUpdateRequiredException.html": {
    "href": "_api/Microsoft.Xna.Framework.GameUpdateRequiredException.html",
    "title": "Class GameUpdateRequiredException | MonoGame Documentation",
    "keywords": "Class GameUpdateRequiredException Inheritance System.Object System.Exception GameUpdateRequiredException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GameUpdateRequiredException : Exception, ISerializable, _Exception Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.DrawableGameComponent.html": {
    "href": "_api/Microsoft.Xna.Framework.DrawableGameComponent.html",
    "title": "Class DrawableGameComponent | MonoGame Documentation",
    "keywords": "Class DrawableGameComponent Inheritance System.Object GameComponent DrawableGameComponent Implements IGameComponent IUpdateable System.IComparable < GameComponent > System.IDisposable IDrawable Inherited Members GameComponent.Game GameComponent.Enabled GameComponent.UpdateOrder GameComponent.EnabledChanged GameComponent.UpdateOrderChanged GameComponent.Update(GameTime) GameComponent.OnUpdateOrderChanged(Object, EventArgs) GameComponent.OnEnabledChanged(Object, EventArgs) GameComponent.Dispose(Boolean) GameComponent.Dispose() GameComponent.CompareTo(GameComponent) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class DrawableGameComponent : GameComponent, IGameComponent, IUpdateable, IComparable<GameComponent>, IDisposable, IDrawable Constructors | Improve this Doc View Source DrawableGameComponent(Game) Declaration public DrawableGameComponent(Game game) Parameters Type Name Description Game game Properties | Improve this Doc View Source DrawOrder Declaration public int DrawOrder { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source GraphicsDevice Declaration public GraphicsDevice GraphicsDevice { get; } Property Value Type Description GraphicsDevice | Improve this Doc View Source Visible Declaration public bool Visible { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw(GameTime) Declaration public virtual void Draw(GameTime gameTime) Parameters Type Name Description GameTime gameTime | Improve this Doc View Source Initialize() Declaration public override void Initialize() Overrides GameComponent.Initialize() | Improve this Doc View Source LoadContent() Declaration protected virtual void LoadContent() | Improve this Doc View Source OnDrawOrderChanged(Object, EventArgs) Declaration protected virtual void OnDrawOrderChanged(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source OnVisibleChanged(Object, EventArgs) Declaration protected virtual void OnVisibleChanged(object sender, EventArgs args) Parameters Type Name Description System.Object sender System.EventArgs args | Improve this Doc View Source UnloadContent() Declaration protected virtual void UnloadContent() Events | Improve this Doc View Source DrawOrderChanged Declaration public event EventHandler<EventArgs> DrawOrderChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source VisibleChanged Declaration public event EventHandler<EventArgs> VisibleChanged Event Type Type Description System.EventHandler < System.EventArgs > Implements IGameComponent IUpdateable System.IComparable<T> System.IDisposable IDrawable"
  },
  "_api/Microsoft.Xna.Framework.CurveKeyCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.CurveKeyCollection.html",
    "title": "Class CurveKeyCollection | MonoGame Documentation",
    "keywords": "Class CurveKeyCollection The collection of the CurveKey elements and a part of the Curve class. Inheritance System.Object CurveKeyCollection Implements System.Collections.Generic.ICollection < CurveKey > System.Collections.Generic.IEnumerable < CurveKey > System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public class CurveKeyCollection : ICollection<CurveKey>, IEnumerable<CurveKey>, IEnumerable Constructors | Improve this Doc View Source CurveKeyCollection() Creates a new instance of CurveKeyCollection class. Declaration public CurveKeyCollection() Properties | Improve this Doc View Source Count Returns the count of keys in this collection. Declaration [DataMember] public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Returns false because it is not a read-only collection. Declaration [DataMember] public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Indexer. Declaration [DataMember(Name = \"Items\")] public CurveKey this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index of key in this collection. Property Value Type Description CurveKey CurveKey at index position. Methods | Improve this Doc View Source Add(CurveKey) Adds a key to this collection. Declaration public void Add(CurveKey item) Parameters Type Name Description CurveKey item New key for the collection. Remarks The new key would be added respectively to a position of that key and the position of other keys. Exceptions Type Condition System.ArgumentNullException Throws if item is null. | Improve this Doc View Source Clear() Removes all keys from this collection. Declaration public void Clear() | Improve this Doc View Source Clone() Creates a copy of this collection. Declaration public CurveKeyCollection Clone() Returns Type Description CurveKeyCollection A copy of this collection. | Improve this Doc View Source Contains(CurveKey) Determines whether this collection contains a specific key. Declaration public bool Contains(CurveKey item) Parameters Type Name Description CurveKey item The key to locate in this collection. Returns Type Description System.Boolean true if the key is found; false otherwise. | Improve this Doc View Source CopyTo(CurveKey[], Int32) Copies the keys of this collection to an array, starting at the array index provided. Declaration public void CopyTo(CurveKey[] array, int arrayIndex) Parameters Type Name Description CurveKey [] array Destination array where elements will be copied. System.Int32 arrayIndex The zero-based index in the array to start copying from. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<CurveKey> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < CurveKey > An enumerator for the CurveKeyCollection . | Improve this Doc View Source IndexOf(CurveKey) Finds element in the collection and returns its index. Declaration public int IndexOf(CurveKey item) Parameters Type Name Description CurveKey item Element for the search. Returns Type Description System.Int32 Index of the element; or -1 if item is not found. | Improve this Doc View Source Remove(CurveKey) Removes specific element. Declaration public bool Remove(CurveKey item) Parameters Type Name Description CurveKey item The element Returns Type Description System.Boolean true if item is successfully removed; false otherwise. This method also returns false if item was not found. | Improve this Doc View Source RemoveAt(Int32) Removes element at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The index which element will be removed. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "_api/Microsoft.Xna.Framework.Content.ContentTypeReader-1.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentTypeReader-1.html",
    "title": "Class ContentTypeReader<T> | MonoGame Documentation",
    "keywords": "Class ContentTypeReader<T> Inheritance System.Object ContentTypeReader ContentTypeReader<T> Inherited Members ContentTypeReader.CanDeserializeIntoExistingObject ContentTypeReader.TargetType ContentTypeReader.TypeVersion ContentTypeReader.Initialize(ContentTypeReaderManager) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public abstract class ContentTypeReader<T> : ContentTypeReader Type Parameters Name Description T Constructors | Improve this Doc View Source ContentTypeReader() Declaration protected ContentTypeReader() Methods | Improve this Doc View Source Read(ContentReader, T) Declaration protected abstract T Read(ContentReader input, T existingInstance) Parameters Type Name Description ContentReader input T existingInstance Returns Type Description T | Improve this Doc View Source Read(ContentReader, Object) Declaration protected override object Read(ContentReader input, object existingInstance) Parameters Type Name Description ContentReader input System.Object existingInstance Returns Type Description System.Object Overrides ContentTypeReader.Read(ContentReader, Object)"
  },
  "_api/Microsoft.Xna.Framework.Content.ContentManager.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentManager.html",
    "title": "Class ContentManager | MonoGame Documentation",
    "keywords": "Class ContentManager Inheritance System.Object ContentManager ResourceContentManager Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax public class ContentManager : IDisposable Constructors | Improve this Doc View Source ContentManager(IServiceProvider) Declaration public ContentManager(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider | Improve this Doc View Source ContentManager(IServiceProvider, String) Declaration public ContentManager(IServiceProvider serviceProvider, string rootDirectory) Parameters Type Name Description System.IServiceProvider serviceProvider System.String rootDirectory Properties | Improve this Doc View Source LoadedAssets Virtual property to allow a derived ContentManager to have it's assets reloaded Declaration protected virtual Dictionary<string, object> LoadedAssets { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Object > | Improve this Doc View Source RootDirectory Declaration public string RootDirectory { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServiceProvider Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Load<T>(String) Declaration public virtual T Load<T>(string assetName) Parameters Type Name Description System.String assetName Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source LoadLocalized<T>(String) Declaration public virtual T LoadLocalized<T>(string assetName) Parameters Type Name Description System.String assetName Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source OpenStream(String) Declaration protected virtual Stream OpenStream(string assetName) Parameters Type Name Description System.String assetName Returns Type Description System.IO.Stream | Improve this Doc View Source ReadAsset<T>(String, Action<IDisposable>) Declaration protected T ReadAsset<T>(string assetName, Action<IDisposable> recordDisposableObject) Parameters Type Name Description System.String assetName System.Action < System.IDisposable > recordDisposableObject Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReloadAsset<T>(String, T) Declaration protected virtual void ReloadAsset<T>(string originalAssetName, T currentAsset) Parameters Type Name Description System.String originalAssetName T currentAsset Type Parameters Name Description T | Improve this Doc View Source ReloadGraphicsAssets() Declaration protected virtual void ReloadGraphicsAssets() | Improve this Doc View Source Unload() Declaration public virtual void Unload() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Audio.SoundEffectInstance.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.SoundEffectInstance.html",
    "title": "Class SoundEffectInstance | MonoGame Documentation",
    "keywords": "Class SoundEffectInstance Represents a single instance of a playing, paused, or stopped sound. Inheritance System.Object SoundEffectInstance DynamicSoundEffectInstance Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class SoundEffectInstance : IDisposable Remarks SoundEffectInstances are created through SoundEffect.CreateInstance() and used internally by SoundEffect.Play() Properties | Improve this Doc View Source IsDisposed Indicates whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLooped Enables or Disables whether the SoundEffectInstance should repeat after playback. Declaration public virtual bool IsLooped { get; set; } Property Value Type Description System.Boolean Remarks This value has no effect on an already playing sound. | Improve this Doc View Source Pan Gets or sets the pan, or speaker balance.. Declaration public float Pan { get; set; } Property Value Type Description System.Single Pan value ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker). Values outside of this range will throw an exception. | Improve this Doc View Source Pitch Gets or sets the pitch adjustment. Declaration public float Pitch { get; set; } Property Value Type Description System.Single Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave). Values outside of this range will throw an Exception. | Improve this Doc View Source State Gets the SoundEffectInstance's current playback state. Declaration public virtual SoundState State { get; } Property Value Type Description SoundState | Improve this Doc View Source Volume Gets or sets the volume of the SoundEffectInstance. Declaration public float Volume { get; set; } Property Value Type Description System.Single Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume. Remarks This is the volume relative to SoundEffect.MasterVolume. Before playback, this Volume property is multiplied by SoundEffect.MasterVolume when determining the final mix volume. Methods | Improve this Doc View Source Apply3D(AudioListener, AudioEmitter) Applies 3D positioning to the SoundEffectInstance using a single listener. Declaration public void Apply3D(AudioListener listener, AudioEmitter emitter) Parameters Type Name Description AudioListener listener Data about the listener. AudioEmitter emitter Data about the source of emission. | Improve this Doc View Source Apply3D(AudioListener[], AudioEmitter) Applies 3D positioning to the SoundEffectInstance using multiple listeners. Declaration public void Apply3D(AudioListener[] listeners, AudioEmitter emitter) Parameters Type Name Description AudioListener [] listeners Data about each listener. AudioEmitter emitter Data about the source of emission. | Improve this Doc View Source Dispose() Releases the resources held by this SoundEffectInstance . Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the resources held by this SoundEffectInstance . Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing If set to true , Dispose was called explicitly. Remarks If the disposing parameter is true, the Dispose method was called explicitly. This means that managed objects referenced by this instance should be disposed or released as required. If the disposing parameter is false, Dispose was called by the finalizer and no managed objects should be touched because we do not know if they are still valid or not at that time. Unmanaged resources should always be released. | Improve this Doc View Source Finalize() Releases unmanaged resources and performs other cleanup operations before the SoundEffectInstance is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source Pause() Pauses playback of a SoundEffectInstance. Declaration public virtual void Pause() Remarks Paused instances can be resumed with SoundEffectInstance.Play() or SoundEffectInstance.Resume(). | Improve this Doc View Source Play() Plays or resumes a SoundEffectInstance. Declaration public virtual void Play() Remarks Throws an exception if more sounds are playing than the platform allows. | Improve this Doc View Source Resume() Resumes playback for a SoundEffectInstance. Declaration public virtual void Resume() Remarks Only has effect on a SoundEffectInstance in a paused state. | Improve this Doc View Source Stop() Immediately stops playing a SoundEffectInstance. Declaration public virtual void Stop() | Improve this Doc View Source Stop(Boolean) Stops playing a SoundEffectInstance, either immediately or as authored. Declaration public virtual void Stop(bool immediate) Parameters Type Name Description System.Boolean immediate Determined whether the sound stops immediately, or after playing its release phase and/or transitions. Remarks Stopping a sound with the immediate argument set to false will allow it to play any release phases, such as fade, before coming to a stop. Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Audio.MicrophoneState.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.MicrophoneState.html",
    "title": "Enum MicrophoneState | MonoGame Documentation",
    "keywords": "Enum MicrophoneState Microphone state. Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public enum MicrophoneState Fields Name Description Started Stopped"
  },
  "_api/Microsoft.Xna.Framework.Audio.AudioListener.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.AudioListener.html",
    "title": "Class AudioListener | MonoGame Documentation",
    "keywords": "Class AudioListener Represents a 3D audio listener. Used when simulating 3D Audio. Inheritance System.Object AudioListener Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class AudioListener Constructors | Improve this Doc View Source AudioListener() Declaration public AudioListener() Properties | Improve this Doc View Source Forward Gets or sets the listener's forward vector. Declaration public Vector3 Forward { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Forward. (new Vector3(0, 0, -1)) Used with AudioListener.Velocity and AudioEmitter.Velocity to calculate Doppler values. The Forward and Up vectors must be orthonormal. | Improve this Doc View Source Position Gets or sets the listener's position. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Zero. | Improve this Doc View Source Up Gets or sets the listener's up vector.. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Up (New Vector3(0, -1, 0)). Used with AudioListener.Velocity and AudioEmitter.Velocity to calculate Doppler values. The values of the Forward and Up vectors must be orthonormal. | Improve this Doc View Source Velocity Gets or sets the listener's velocity vector. Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Remarks Defaults to Vector3.Zero. Scaled by DopplerScale to calculate the Doppler effect value applied to a Cue. This value is only used to calculate Doppler values."
  },
  "_api/Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.html": {
    "href": "_api/Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.html",
    "title": "Class PreparingDeviceSettingsEventArgs | MonoGame Documentation",
    "keywords": "Class PreparingDeviceSettingsEventArgs The arguments to the PreparingDeviceSettings event. Inheritance System.Object System.EventArgs PreparingDeviceSettingsEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class PreparingDeviceSettingsEventArgs : EventArgs Constructors | Improve this Doc View Source PreparingDeviceSettingsEventArgs(GraphicsDeviceInformation) Create a new instance of the event. Declaration public PreparingDeviceSettingsEventArgs(GraphicsDeviceInformation graphicsDeviceInformation) Parameters Type Name Description GraphicsDeviceInformation graphicsDeviceInformation The default settings to be used in device creation. Properties | Improve this Doc View Source GraphicsDeviceInformation The default settings that will be used in device creation. Declaration public GraphicsDeviceInformation GraphicsDeviceInformation { get; } Property Value Type Description GraphicsDeviceInformation"
  },
  "_api/Microsoft.Xna.Framework.Point.html": {
    "href": "_api/Microsoft.Xna.Framework.Point.html",
    "title": "Struct Point | MonoGame Documentation",
    "keywords": "Struct Point Describes a 2D-point. Implements System.IEquatable < Point > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Point : IEquatable<Point> Constructors | Improve this Doc View Source Point(Int32) Constructs a point with X and Y set to the same value. Declaration public Point(int value) Parameters Type Name Description System.Int32 value The x and y coordinates in 2d-space. | Improve this Doc View Source Point(Int32, Int32) Constructs a point with X and Y from two values. Declaration public Point(int x, int y) Parameters Type Name Description System.Int32 x The x coordinate in 2d-space. System.Int32 y The y coordinate in 2d-space. Fields | Improve this Doc View Source X The x coordinate of this Point . Declaration [DataMember] public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y The y coordinate of this Point . Declaration [DataMember] public int Y Field Value Type Description System.Int32 Properties | Improve this Doc View Source Zero Returns a Point with coordinates 0, 0. Declaration public static Point Zero { get; } Property Value Type Description Point Methods | Improve this Doc View Source Equals(Point) Compares whether current instance is equal to specified Point . Declaration public bool Equals(Point other) Parameters Type Name Description Point other The Point to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Point . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Point . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String representation of this Point in the format: {X:[ X ] Y:[ Y ]} Declaration public override string ToString() Returns Type Description System.String System.String representation of this Point . Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector2() Gets a Vector2 representation for this object. Declaration public Vector2 ToVector2() Returns Type Description Vector2 A Vector2 representation for this object. Operators | Improve this Doc View Source Addition(Point, Point) Adds two points. Declaration public static Point operator +(Point value1, Point value2) Parameters Type Name Description Point value1 Source Point on the left of the add sign. Point value2 Source Point on the right of the add sign. Returns Type Description Point Sum of the points. | Improve this Doc View Source Division(Point, Point) Divides the components of a Point by the components of another Point . Declaration public static Point operator /(Point source, Point divisor) Parameters Type Name Description Point source Source Point on the left of the div sign. Point divisor Divisor Point on the right of the div sign. Returns Type Description Point The result of dividing the points. | Improve this Doc View Source Equality(Point, Point) Compares whether two Point instances are equal. Declaration public static bool operator ==(Point a, Point b) Parameters Type Name Description Point a Point instance on the left of the equal sign. Point b Point instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Point, Point) Compares whether two Point instances are not equal. Declaration public static bool operator !=(Point a, Point b) Parameters Type Name Description Point a Point instance on the left of the not equal sign. Point b Point instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Point, Point) Multiplies the components of two points by each other. Declaration public static Point operator *(Point value1, Point value2) Parameters Type Name Description Point value1 Source Point on the left of the mul sign. Point value2 Source Point on the right of the mul sign. Returns Type Description Point Result of the multiplication. | Improve this Doc View Source Subtraction(Point, Point) Subtracts a Point from a Point . Declaration public static Point operator -(Point value1, Point value2) Parameters Type Name Description Point value1 Source Point on the left of the sub sign. Point value2 Source Point on the right of the sub sign. Returns Type Description Point Result of the subtraction. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.PlayerIndex.html": {
    "href": "_api/Microsoft.Xna.Framework.PlayerIndex.html",
    "title": "Enum PlayerIndex | MonoGame Documentation",
    "keywords": "Enum PlayerIndex Defines the index of player for various MonoGame components. Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum PlayerIndex Fields Name Description Four The fourth player index. One The first player index. Three The third player index. Two The second player index."
  },
  "_api/Microsoft.Xna.Framework.PlaneIntersectionType.html": {
    "href": "_api/Microsoft.Xna.Framework.PlaneIntersectionType.html",
    "title": "Enum PlaneIntersectionType | MonoGame Documentation",
    "keywords": "Enum PlaneIntersectionType Defines the intersection between a Plane and a bounding volume. Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum PlaneIntersectionType Fields Name Description Back There is no intersection, the bounding volume is in the positive half space of the plane. Front There is no intersection, the bounding volume is in the negative half space of the plane. Intersecting The plane is intersected."
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchLocationState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchLocationState.html",
    "title": "Enum TouchLocationState | MonoGame Documentation",
    "keywords": "Enum TouchLocationState Holds the possible state information for a touch location.. Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public enum TouchLocationState Fields Name Description Invalid This touch location position is invalid. Moved This touch location position was updated or pressed at the same position. Pressed This touch location position is new. Released This touch location position was released."
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchLocation.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchLocation.html",
    "title": "Struct TouchLocation | MonoGame Documentation",
    "keywords": "Struct TouchLocation Implements System.IEquatable < TouchLocation > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public struct TouchLocation : IEquatable<TouchLocation> Constructors | Improve this Doc View Source TouchLocation(Int32, TouchLocationState, Vector2) Declaration public TouchLocation(int id, TouchLocationState state, Vector2 position) Parameters Type Name Description System.Int32 id TouchLocationState state Vector2 position | Improve this Doc View Source TouchLocation(Int32, TouchLocationState, Vector2, TouchLocationState, Vector2) Declaration public TouchLocation(int id, TouchLocationState state, Vector2 position, TouchLocationState previousState, Vector2 previousPosition) Parameters Type Name Description System.Int32 id TouchLocationState state Vector2 position TouchLocationState previousState Vector2 previousPosition Properties | Improve this Doc View Source Id Declaration public int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Position Declaration public Vector2 Position { get; } Property Value Type Description Vector2 | Improve this Doc View Source Pressure Declaration public float Pressure { get; } Property Value Type Description System.Single | Improve this Doc View Source State Declaration public TouchLocationState State { get; } Property Value Type Description TouchLocationState Methods | Improve this Doc View Source Equals(TouchLocation) Declaration public bool Equals(TouchLocation other) Parameters Type Name Description TouchLocation other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source TryGetPreviousLocation(out TouchLocation) Declaration public bool TryGetPreviousLocation(out TouchLocation aPreviousLocation) Parameters Type Name Description TouchLocation aPreviousLocation Returns Type Description System.Boolean Operators | Improve this Doc View Source Equality(TouchLocation, TouchLocation) Declaration public static bool operator ==(TouchLocation value1, TouchLocation value2) Parameters Type Name Description TouchLocation value1 TouchLocation value2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(TouchLocation, TouchLocation) Declaration public static bool operator !=(TouchLocation value1, TouchLocation value2) Parameters Type Name Description TouchLocation value1 TouchLocation value2 Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.TextInputEventArgs.html": {
    "href": "_api/Microsoft.Xna.Framework.TextInputEventArgs.html",
    "title": "Class TextInputEventArgs | MonoGame Documentation",
    "keywords": "Class TextInputEventArgs This class is used for the game window's TextInput event as EventArgs. Inheritance System.Object System.EventArgs TextInputEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class TextInputEventArgs : EventArgs Constructors | Improve this Doc View Source TextInputEventArgs(Char, Keys) Declaration public TextInputEventArgs(char character, Keys key = Keys.None) Parameters Type Name Description System.Char character Keys key Properties | Improve this Doc View Source Character Declaration public char Character { get; } Property Value Type Description System.Char | Improve this Doc View Source Key Declaration public Keys Key { get; } Property Value Type Description Keys"
  },
  "_api/Microsoft.Xna.Framework.Rectangle.html": {
    "href": "_api/Microsoft.Xna.Framework.Rectangle.html",
    "title": "Struct Rectangle | MonoGame Documentation",
    "keywords": "Struct Rectangle Describes a 2D-rectangle. Implements System.IEquatable < Rectangle > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Rectangle : IEquatable<Rectangle> Constructors | Improve this Doc View Source Rectangle(Point, Point) Creates a new instance of Rectangle struct, with the specified location and size. Declaration public Rectangle(Point location, Point size) Parameters Type Name Description Point location The x and y coordinates of the top-left corner of the created Rectangle . Point size The width and height of the created Rectangle . | Improve this Doc View Source Rectangle(Int32, Int32, Int32, Int32) Creates a new instance of Rectangle struct, with the specified position, width, and height. Declaration public Rectangle(int x, int y, int width, int height) Parameters Type Name Description System.Int32 x The x coordinate of the top-left corner of the created Rectangle . System.Int32 y The y coordinate of the top-left corner of the created Rectangle . System.Int32 width The width of the created Rectangle . System.Int32 height The height of the created Rectangle . Fields | Improve this Doc View Source Height The height of this Rectangle . Declaration [DataMember] public int Height Field Value Type Description System.Int32 | Improve this Doc View Source Width The width of this Rectangle . Declaration [DataMember] public int Width Field Value Type Description System.Int32 | Improve this Doc View Source X The x coordinate of the top-left corner of this Rectangle . Declaration [DataMember] public int X Field Value Type Description System.Int32 | Improve this Doc View Source Y The y coordinate of the top-left corner of this Rectangle . Declaration [DataMember] public int Y Field Value Type Description System.Int32 Properties | Improve this Doc View Source Bottom Returns the y coordinate of the bottom edge of this Rectangle . Declaration public int Bottom { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Center A Point located in the center of this Rectangle . Declaration public Point Center { get; } Property Value Type Description Point Remarks If Width or Height is an odd number, the center point will be rounded down. | Improve this Doc View Source Empty Returns a Rectangle with X=0, Y=0, Width=0, Height=0. Declaration public static Rectangle Empty { get; } Property Value Type Description Rectangle | Improve this Doc View Source IsEmpty Whether or not this Rectangle has a Width and Height of 0, and a Location of (0, 0). Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Left Returns the x coordinate of the left edge of this Rectangle . Declaration public int Left { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Location The top-left coordinates of this Rectangle . Declaration public Point Location { get; set; } Property Value Type Description Point | Improve this Doc View Source Right Returns the x coordinate of the right edge of this Rectangle . Declaration public int Right { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Size The width-height coordinates of this Rectangle . Declaration public Point Size { get; set; } Property Value Type Description Point | Improve this Doc View Source Top Returns the y coordinate of the top edge of this Rectangle . Declaration public int Top { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Contains(Point) Gets whether or not the provided Point lies within the bounds of this Rectangle . Declaration public bool Contains(Point value) Parameters Type Name Description Point value The coordinates to check for inclusion in this Rectangle . Returns Type Description System.Boolean true if the provided Point lies inside this Rectangle ; false otherwise. | Improve this Doc View Source Contains(ref Point, out Boolean) Gets whether or not the provided Point lies within the bounds of this Rectangle . Declaration public void Contains(ref Point value, out bool result) Parameters Type Name Description Point value The coordinates to check for inclusion in this Rectangle . System.Boolean result true if the provided Point lies inside this Rectangle ; false otherwise. As an output parameter. | Improve this Doc View Source Contains(Rectangle) Gets whether or not the provided Rectangle lies within the bounds of this Rectangle . Declaration public bool Contains(Rectangle value) Parameters Type Name Description Rectangle value The Rectangle to check for inclusion in this Rectangle . Returns Type Description System.Boolean true if the provided Rectangle 's bounds lie entirely inside this Rectangle ; false otherwise. | Improve this Doc View Source Contains(ref Rectangle, out Boolean) Gets whether or not the provided Rectangle lies within the bounds of this Rectangle . Declaration public void Contains(ref Rectangle value, out bool result) Parameters Type Name Description Rectangle value The Rectangle to check for inclusion in this Rectangle . System.Boolean result true if the provided Rectangle 's bounds lie entirely inside this Rectangle ; false otherwise. As an output parameter. | Improve this Doc View Source Contains(Vector2) Gets whether or not the provided Vector2 lies within the bounds of this Rectangle . Declaration public bool Contains(Vector2 value) Parameters Type Name Description Vector2 value The coordinates to check for inclusion in this Rectangle . Returns Type Description System.Boolean true if the provided Vector2 lies inside this Rectangle ; false otherwise. | Improve this Doc View Source Contains(ref Vector2, out Boolean) Gets whether or not the provided Vector2 lies within the bounds of this Rectangle . Declaration public void Contains(ref Vector2 value, out bool result) Parameters Type Name Description Vector2 value The coordinates to check for inclusion in this Rectangle . System.Boolean result true if the provided Vector2 lies inside this Rectangle ; false otherwise. As an output parameter. | Improve this Doc View Source Contains(Int32, Int32) Gets whether or not the provided coordinates lie within the bounds of this Rectangle . Declaration public bool Contains(int x, int y) Parameters Type Name Description System.Int32 x The x coordinate of the point to check for containment. System.Int32 y The y coordinate of the point to check for containment. Returns Type Description System.Boolean true if the provided coordinates lie inside this Rectangle ; false otherwise. | Improve this Doc View Source Contains(Single, Single) Gets whether or not the provided coordinates lie within the bounds of this Rectangle . Declaration public bool Contains(float x, float y) Parameters Type Name Description System.Single x The x coordinate of the point to check for containment. System.Single y The y coordinate of the point to check for containment. Returns Type Description System.Boolean true if the provided coordinates lie inside this Rectangle ; false otherwise. | Improve this Doc View Source Equals(Rectangle) Compares whether current instance is equal to specified Rectangle . Declaration public bool Equals(Rectangle other) Parameters Type Name Description Rectangle other The Rectangle to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Rectangle . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Rectangle . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Inflate(Int32, Int32) Adjusts the edges of this Rectangle by specified horizontal and vertical amounts. Declaration public void Inflate(int horizontalAmount, int verticalAmount) Parameters Type Name Description System.Int32 horizontalAmount Value to adjust the left and right edges. System.Int32 verticalAmount Value to adjust the top and bottom edges. | Improve this Doc View Source Inflate(Single, Single) Adjusts the edges of this Rectangle by specified horizontal and vertical amounts. Declaration public void Inflate(float horizontalAmount, float verticalAmount) Parameters Type Name Description System.Single horizontalAmount Value to adjust the left and right edges. System.Single verticalAmount Value to adjust the top and bottom edges. | Improve this Doc View Source Intersect(Rectangle, Rectangle) Creates a new Rectangle that contains overlapping region of two other rectangles. Declaration public static Rectangle Intersect(Rectangle value1, Rectangle value2) Parameters Type Name Description Rectangle value1 The first Rectangle . Rectangle value2 The second Rectangle . Returns Type Description Rectangle Overlapping region of the two rectangles. | Improve this Doc View Source Intersect(ref Rectangle, ref Rectangle, out Rectangle) Creates a new Rectangle that contains overlapping region of two other rectangles. Declaration public static void Intersect(ref Rectangle value1, ref Rectangle value2, out Rectangle result) Parameters Type Name Description Rectangle value1 The first Rectangle . Rectangle value2 The second Rectangle . Rectangle result Overlapping region of the two rectangles as an output parameter. | Improve this Doc View Source Intersects(Rectangle) Gets whether or not the other Rectangle intersects with this rectangle. Declaration public bool Intersects(Rectangle value) Parameters Type Name Description Rectangle value The other rectangle for testing. Returns Type Description System.Boolean true if other Rectangle intersects with this rectangle; false otherwise. | Improve this Doc View Source Intersects(ref Rectangle, out Boolean) Gets whether or not the other Rectangle intersects with this rectangle. Declaration public void Intersects(ref Rectangle value, out bool result) Parameters Type Name Description Rectangle value The other rectangle for testing. System.Boolean result true if other Rectangle intersects with this rectangle; false otherwise. As an output parameter. | Improve this Doc View Source Offset(Point) Changes the Location of this Rectangle . Declaration public void Offset(Point amount) Parameters Type Name Description Point amount The x and y components to add to this Rectangle . | Improve this Doc View Source Offset(Vector2) Changes the Location of this Rectangle . Declaration public void Offset(Vector2 amount) Parameters Type Name Description Vector2 amount The x and y components to add to this Rectangle . | Improve this Doc View Source Offset(Int32, Int32) Changes the Location of this Rectangle . Declaration public void Offset(int offsetX, int offsetY) Parameters Type Name Description System.Int32 offsetX The x coordinate to add to this Rectangle . System.Int32 offsetY The y coordinate to add to this Rectangle . | Improve this Doc View Source Offset(Single, Single) Changes the Location of this Rectangle . Declaration public void Offset(float offsetX, float offsetY) Parameters Type Name Description System.Single offsetX The x coordinate to add to this Rectangle . System.Single offsetY The y coordinate to add to this Rectangle . | Improve this Doc View Source ToString() Returns a System.String representation of this Rectangle in the format: {X:[ X ] Y:[ Y ] Width:[ Width ] Height:[ Height ]} Declaration public override string ToString() Returns Type Description System.String System.String representation of this Rectangle . Overrides System.ValueType.ToString() | Improve this Doc View Source Union(Rectangle, Rectangle) Creates a new Rectangle that completely contains two other rectangles. Declaration public static Rectangle Union(Rectangle value1, Rectangle value2) Parameters Type Name Description Rectangle value1 The first Rectangle . Rectangle value2 The second Rectangle . Returns Type Description Rectangle The union of the two rectangles. | Improve this Doc View Source Union(ref Rectangle, ref Rectangle, out Rectangle) Creates a new Rectangle that completely contains two other rectangles. Declaration public static void Union(ref Rectangle value1, ref Rectangle value2, out Rectangle result) Parameters Type Name Description Rectangle value1 The first Rectangle . Rectangle value2 The second Rectangle . Rectangle result The union of the two rectangles as an output parameter. Operators | Improve this Doc View Source Equality(Rectangle, Rectangle) Compares whether two Rectangle instances are equal. Declaration public static bool operator ==(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle instance on the left of the equal sign. Rectangle b Rectangle instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Rectangle, Rectangle) Compares whether two Rectangle instances are not equal. Declaration public static bool operator !=(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle instance on the left of the not equal sign. Rectangle b Rectangle instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Ray.html": {
    "href": "_api/Microsoft.Xna.Framework.Ray.html",
    "title": "Struct Ray | MonoGame Documentation",
    "keywords": "Struct Ray Implements System.IEquatable < Ray > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Ray : IEquatable<Ray> Constructors | Improve this Doc View Source Ray(Vector3, Vector3) Declaration public Ray(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position Vector3 direction Fields | Improve this Doc View Source Direction Declaration [DataMember] public Vector3 Direction Field Value Type Description Vector3 | Improve this Doc View Source Position Declaration [DataMember] public Vector3 Position Field Value Type Description Vector3 Methods | Improve this Doc View Source Equals(Ray) Declaration public bool Equals(Ray other) Parameters Type Name Description Ray other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Declaration public float ? Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source Intersects(ref BoundingBox, out Nullable<Single>) Declaration public void Intersects(ref BoundingBox box, out float ? result) Parameters Type Name Description BoundingBox box System.Nullable < System.Single > result | Improve this Doc View Source Intersects(BoundingSphere) Declaration public float ? Intersects(BoundingSphere sphere) Parameters Type Name Description BoundingSphere sphere Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source Intersects(ref BoundingSphere, out Nullable<Single>) Declaration public void Intersects(ref BoundingSphere sphere, out float ? result) Parameters Type Name Description BoundingSphere sphere System.Nullable < System.Single > result | Improve this Doc View Source Intersects(Plane) Declaration public float ? Intersects(Plane plane) Parameters Type Name Description Plane plane Returns Type Description System.Nullable < System.Single > | Improve this Doc View Source Intersects(ref Plane, out Nullable<Single>) Declaration public void Intersects(ref Plane plane, out float ? result) Parameters Type Name Description Plane plane System.Nullable < System.Single > result | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(Ray, Ray) Declaration public static bool operator ==(Ray a, Ray b) Parameters Type Name Description Ray a Ray b Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Ray, Ray) Declaration public static bool operator !=(Ray a, Ray b) Parameters Type Name Description Ray a Ray b Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Quaternion.html": {
    "href": "_api/Microsoft.Xna.Framework.Quaternion.html",
    "title": "Struct Quaternion | MonoGame Documentation",
    "keywords": "Struct Quaternion An efficient mathematical representation for three dimensional rotations. Implements System.IEquatable < Quaternion > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public struct Quaternion : IEquatable<Quaternion> Constructors | Improve this Doc View Source Quaternion(Vector3, Single) Constructs a quaternion with X, Y, Z from Vector3 and rotation component from a scalar. Declaration public Quaternion(Vector3 value, float w) Parameters Type Name Description Vector3 value The x, y, z coordinates in 3d-space. System.Single w The rotation component. | Improve this Doc View Source Quaternion(Vector4) Constructs a quaternion from Vector4 . Declaration public Quaternion(Vector4 value) Parameters Type Name Description Vector4 value The x, y, z coordinates in 3d-space and the rotation component. | Improve this Doc View Source Quaternion(Single, Single, Single, Single) Constructs a quaternion with X, Y, Z and W from four values. Declaration public Quaternion(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x coordinate in 3d-space. System.Single y The y coordinate in 3d-space. System.Single z The z coordinate in 3d-space. System.Single w The rotation component. Fields | Improve this Doc View Source W The rotation component of this Quaternion . Declaration [DataMember] public float W Field Value Type Description System.Single | Improve this Doc View Source X The x coordinate of this Quaternion . Declaration [DataMember] public float X Field Value Type Description System.Single | Improve this Doc View Source Y The y coordinate of this Quaternion . Declaration [DataMember] public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The z coordinate of this Quaternion . Declaration [DataMember] public float Z Field Value Type Description System.Single Properties | Improve this Doc View Source Identity Returns a quaternion representing no rotation. Declaration public static Quaternion Identity { get; } Property Value Type Description Quaternion Methods | Improve this Doc View Source Add(Quaternion, Quaternion) Creates a new Quaternion that contains the sum of two quaternions. Declaration public static Quaternion Add(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . Returns Type Description Quaternion The result of the quaternion addition. | Improve this Doc View Source Add(ref Quaternion, ref Quaternion, out Quaternion) Creates a new Quaternion that contains the sum of two quaternions. Declaration public static void Add(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . Quaternion result The result of the quaternion addition as an output parameter. | Improve this Doc View Source Concatenate(Quaternion, Quaternion) Creates a new Quaternion that contains concatenation between two quaternion. Declaration public static Quaternion Concatenate(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first Quaternion to concatenate. Quaternion value2 The second Quaternion to concatenate. Returns Type Description Quaternion The result of rotation of value1 followed by value2 rotation. | Improve this Doc View Source Concatenate(ref Quaternion, ref Quaternion, out Quaternion) Creates a new Quaternion that contains concatenation between two quaternion. Declaration public static void Concatenate(ref Quaternion value1, ref Quaternion value2, out Quaternion result) Parameters Type Name Description Quaternion value1 The first Quaternion to concatenate. Quaternion value2 The second Quaternion to concatenate. Quaternion result The result of rotation of value1 followed by value2 rotation as an output parameter. | Improve this Doc View Source Conjugate() Transforms this quaternion into its conjugated version. Declaration public void Conjugate() | Improve this Doc View Source Conjugate(Quaternion) Creates a new Quaternion that contains conjugated version of the specified quaternion. Declaration public static Quaternion Conjugate(Quaternion value) Parameters Type Name Description Quaternion value The quaternion which values will be used to create the conjugated version. Returns Type Description Quaternion The conjugate version of the specified quaternion. | Improve this Doc View Source Conjugate(ref Quaternion, out Quaternion) Creates a new Quaternion that contains conjugated version of the specified quaternion. Declaration public static void Conjugate(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion which values will be used to create the conjugated version. Quaternion result The conjugated version of the specified quaternion as an output parameter. | Improve this Doc View Source CreateFromAxisAngle(Vector3, Single) Creates a new Quaternion from the specified axis and angle. Declaration public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis of rotation. System.Single angle The angle in radians. Returns Type Description Quaternion The new quaternion builded from axis and angle. | Improve this Doc View Source CreateFromAxisAngle(ref Vector3, Single, out Quaternion) Creates a new Quaternion from the specified axis and angle. Declaration public static void CreateFromAxisAngle(ref Vector3 axis, float angle, out Quaternion result) Parameters Type Name Description Vector3 axis The axis of rotation. System.Single angle The angle in radians. Quaternion result The new quaternion builded from axis and angle as an output parameter. | Improve this Doc View Source CreateFromRotationMatrix(Matrix) Creates a new Quaternion from the specified Matrix . Declaration public static Quaternion CreateFromRotationMatrix(Matrix matrix) Parameters Type Name Description Matrix matrix The rotation matrix. Returns Type Description Quaternion A quaternion composed from the rotation part of the matrix. | Improve this Doc View Source CreateFromRotationMatrix(ref Matrix, out Quaternion) Creates a new Quaternion from the specified Matrix . Declaration public static void CreateFromRotationMatrix(ref Matrix matrix, out Quaternion result) Parameters Type Name Description Matrix matrix The rotation matrix. Quaternion result A quaternion composed from the rotation part of the matrix as an output parameter. | Improve this Doc View Source CreateFromYawPitchRoll(Single, Single, Single) Creates a new Quaternion from the specified yaw, pitch and roll angles. Declaration public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description System.Single yaw Yaw around the y axis in radians. System.Single pitch Pitch around the x axis in radians. System.Single roll Roll around the z axis in radians. Returns Type Description Quaternion A new quaternion from the concatenated yaw, pitch, and roll angles. | Improve this Doc View Source CreateFromYawPitchRoll(Single, Single, Single, out Quaternion) Creates a new Quaternion from the specified yaw, pitch and roll angles. Declaration public static void CreateFromYawPitchRoll(float yaw, float pitch, float roll, out Quaternion result) Parameters Type Name Description System.Single yaw Yaw around the y axis in radians. System.Single pitch Pitch around the x axis in radians. System.Single roll Roll around the z axis in radians. Quaternion result A new quaternion from the concatenated yaw, pitch, and roll angles as an output parameter. | Improve this Doc View Source Divide(Quaternion, Quaternion) Divides a Quaternion by the other Quaternion . Declaration public static Quaternion Divide(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Divisor Quaternion . Returns Type Description Quaternion The result of dividing the quaternions. | Improve this Doc View Source Divide(ref Quaternion, ref Quaternion, out Quaternion) Divides a Quaternion by the other Quaternion . Declaration public static void Divide(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Divisor Quaternion . Quaternion result The result of dividing the quaternions as an output parameter. | Improve this Doc View Source Dot(Quaternion, Quaternion) Returns a dot product of two quaternions. Declaration public static float Dot(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The first quaternion. Quaternion quaternion2 The second quaternion. Returns Type Description System.Single The dot product of two quaternions. | Improve this Doc View Source Dot(ref Quaternion, ref Quaternion, out Single) Returns a dot product of two quaternions. Declaration public static void Dot(ref Quaternion quaternion1, ref Quaternion quaternion2, out float result) Parameters Type Name Description Quaternion quaternion1 The first quaternion. Quaternion quaternion2 The second quaternion. System.Single result The dot product of two quaternions as an output parameter. | Improve this Doc View Source Equals(Quaternion) Compares whether current instance is equal to specified Quaternion . Declaration public bool Equals(Quaternion other) Parameters Type Name Description Quaternion other The Quaternion to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified System.Object . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare. Returns Type Description System.Boolean true if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code of this Quaternion . Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of this Quaternion . Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Inverse(Quaternion) Returns the inverse quaternion which represents the opposite rotation. Declaration public static Quaternion Inverse(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Source Quaternion . Returns Type Description Quaternion The inverse quaternion. | Improve this Doc View Source Inverse(ref Quaternion, out Quaternion) Returns the inverse quaternion which represents the opposite rotation. Declaration public static void Inverse(ref Quaternion quaternion, out Quaternion result) Parameters Type Name Description Quaternion quaternion Source Quaternion . Quaternion result The inverse quaternion as an output parameter. | Improve this Doc View Source Length() Returns the magnitude of the quaternion components. Declaration public float Length() Returns Type Description System.Single The magnitude of the quaternion components. | Improve this Doc View Source LengthSquared() Returns the squared magnitude of the quaternion components. Declaration public float LengthSquared() Returns Type Description System.Single The squared magnitude of the quaternion components. | Improve this Doc View Source Lerp(Quaternion, Quaternion, Single) Performs a linear blend between two quaternions. Declaration public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . System.Single amount The blend amount where 0 returns quaternion1 and 1 quaternion2 . Returns Type Description Quaternion The result of linear blending between two quaternions. | Improve this Doc View Source Lerp(ref Quaternion, ref Quaternion, Single, out Quaternion) Performs a linear blend between two quaternions. Declaration public static void Lerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . System.Single amount The blend amount where 0 returns quaternion1 and 1 quaternion2 . Quaternion result The result of linear blending between two quaternions as an output parameter. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Creates a new Quaternion that contains a multiplication of two quaternions. Declaration public static Quaternion Multiply(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . Returns Type Description Quaternion The result of the quaternion multiplication. | Improve this Doc View Source Multiply(Quaternion, Single) Creates a new Quaternion that contains a multiplication of Quaternion and a scalar. Declaration public static Quaternion Multiply(Quaternion quaternion1, float scaleFactor) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . System.Single scaleFactor Scalar value. Returns Type Description Quaternion The result of the quaternion multiplication with a scalar. | Improve this Doc View Source Multiply(ref Quaternion, ref Quaternion, out Quaternion) Creates a new Quaternion that contains a multiplication of two quaternions. Declaration public static void Multiply(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . Quaternion result The result of the quaternion multiplication as an output parameter. | Improve this Doc View Source Multiply(ref Quaternion, Single, out Quaternion) Creates a new Quaternion that contains a multiplication of Quaternion and a scalar. Declaration public static void Multiply(ref Quaternion quaternion1, float scaleFactor, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . System.Single scaleFactor Scalar value. Quaternion result The result of the quaternion multiplication with a scalar as an output parameter. | Improve this Doc View Source Negate(Quaternion) Flips the sign of the all the quaternion components. Declaration public static Quaternion Negate(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Source Quaternion . Returns Type Description Quaternion The result of the quaternion negation. | Improve this Doc View Source Negate(ref Quaternion, out Quaternion) Flips the sign of the all the quaternion components. Declaration public static void Negate(ref Quaternion quaternion, out Quaternion result) Parameters Type Name Description Quaternion quaternion Source Quaternion . Quaternion result The result of the quaternion negation as an output parameter. | Improve this Doc View Source Normalize() Scales the quaternion magnitude to unit length. Declaration public void Normalize() | Improve this Doc View Source Normalize(Quaternion) Scales the quaternion magnitude to unit length. Declaration public static Quaternion Normalize(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Source Quaternion . Returns Type Description Quaternion The unit length quaternion. | Improve this Doc View Source Normalize(ref Quaternion, out Quaternion) Scales the quaternion magnitude to unit length. Declaration public static void Normalize(ref Quaternion quaternion, out Quaternion result) Parameters Type Name Description Quaternion quaternion Source Quaternion . Quaternion result The unit length quaternion an output parameter. | Improve this Doc View Source Slerp(Quaternion, Quaternion, Single) Performs a spherical linear blend between two quaternions. Declaration public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . System.Single amount The blend amount where 0 returns quaternion1 and 1 quaternion2 . Returns Type Description Quaternion The result of spherical linear blending between two quaternions. | Improve this Doc View Source Slerp(ref Quaternion, ref Quaternion, Single, out Quaternion) Performs a spherical linear blend between two quaternions. Declaration public static void Slerp(ref Quaternion quaternion1, ref Quaternion quaternion2, float amount, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . System.Single amount The blend amount where 0 returns quaternion1 and 1 quaternion2 . Quaternion result The result of spherical linear blending between two quaternions as an output parameter. | Improve this Doc View Source Subtract(Quaternion, Quaternion) Creates a new Quaternion that contains subtraction of one Quaternion from another. Declaration public static Quaternion Subtract(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . Returns Type Description Quaternion The result of the quaternion subtraction. | Improve this Doc View Source Subtract(ref Quaternion, ref Quaternion, out Quaternion) Creates a new Quaternion that contains subtraction of one Quaternion from another. Declaration public static void Subtract(ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result) Parameters Type Name Description Quaternion quaternion1 Source Quaternion . Quaternion quaternion2 Source Quaternion . Quaternion result The result of the quaternion subtraction as an output parameter. | Improve this Doc View Source ToString() Returns a System.String representation of this Quaternion in the format: {X:[ X ] Y:[ Y ] Z:[ Z ] W:[ W ]} Declaration public override string ToString() Returns Type Description System.String A System.String representation of this Quaternion . Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Gets a Vector4 representation for this object. Declaration public Vector4 ToVector4() Returns Type Description Vector4 A Vector4 representation for this object. Operators | Improve this Doc View Source Addition(Quaternion, Quaternion) Adds two quaternions. Declaration public static Quaternion operator +(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion on the left of the add sign. Quaternion quaternion2 Source Quaternion on the right of the add sign. Returns Type Description Quaternion Sum of the vectors. | Improve this Doc View Source Division(Quaternion, Quaternion) Divides a Quaternion by the other Quaternion . Declaration public static Quaternion operator /(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion on the left of the div sign. Quaternion quaternion2 Divisor Quaternion on the right of the div sign. Returns Type Description Quaternion The result of dividing the quaternions. | Improve this Doc View Source Equality(Quaternion, Quaternion) Compares whether two Quaternion instances are equal. Declaration public static bool operator ==(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Quaternion instance on the left of the equal sign. Quaternion quaternion2 Quaternion instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(Quaternion, Quaternion) Compares whether two Quaternion instances are not equal. Declaration public static bool operator !=(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Quaternion instance on the left of the not equal sign. Quaternion quaternion2 Quaternion instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies two quaternions. Declaration public static Quaternion operator *(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Quaternion on the left of the mul sign. Quaternion quaternion2 Source Quaternion on the right of the mul sign. Returns Type Description Quaternion Result of the quaternions multiplication. | Improve this Doc View Source Multiply(Quaternion, Single) Multiplies the components of quaternion by a scalar. Declaration public static Quaternion operator *(Quaternion quaternion1, float scaleFactor) Parameters Type Name Description Quaternion quaternion1 Source Vector3 on the left of the mul sign. System.Single scaleFactor Scalar value on the right of the mul sign. Returns Type Description Quaternion Result of the quaternion multiplication with a scalar. | Improve this Doc View Source Subtraction(Quaternion, Quaternion) Subtracts a Quaternion from a Quaternion . Declaration public static Quaternion operator -(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 Source Vector3 on the left of the sub sign. Quaternion quaternion2 Source Vector3 on the right of the sub sign. Returns Type Description Quaternion Result of the quaternion subtraction. | Improve this Doc View Source UnaryNegation(Quaternion) Flips the sign of the all the quaternion components. Declaration public static Quaternion operator -(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Source Quaternion on the right of the sub sign. Returns Type Description Quaternion The result of the quaternion negation. Implements System.IEquatable<T>"
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.html",
    "title": "Namespace Microsoft.Xna.Framework.Input.Touch | MonoGame Documentation",
    "keywords": "Namespace Microsoft.Xna.Framework.Input.Touch Classes TouchPanel Allows retrieval of information from Touch Panel device. TouchPanelState Structs GestureSample Represents data from a multi-touch gesture over a span of time. TouchCollection Provides state information for a touch screen enabled device. TouchCollection.Enumerator Provides the ability to iterate through the TouchLocations in an TouchCollection. TouchLocation TouchPanelCapabilities Allows retrieval of capabilities information from touch panel device. Enums GestureType Enumuration of values that represent different gestures that can be processed by ReadGesture() . TouchLocationState Holds the possible state information for a touch location.."
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchPanelState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchPanelState.html",
    "title": "Class TouchPanelState | MonoGame Documentation",
    "keywords": "Class TouchPanelState Inheritance System.Object TouchPanelState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public class TouchPanelState Properties | Improve this Doc View Source DisplayHeight Gets or sets the display height of the touch panel. Declaration public int DisplayHeight { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DisplayOrientation Gets or sets the display orientation of the touch panel. Declaration public DisplayOrientation DisplayOrientation { get; set; } Property Value Type Description DisplayOrientation | Improve this Doc View Source DisplayWidth Gets or sets the display width of the touch panel. Declaration public int DisplayWidth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EnabledGestures Gets or sets enabled gestures. Declaration public GestureType EnabledGestures { get; set; } Property Value Type Description GestureType | Improve this Doc View Source EnableMouseGestures Declaration public bool EnableMouseGestures { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableMouseTouchPoint Declaration public bool EnableMouseTouchPoint { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsGestureAvailable Returns true if a touch gesture is available. Declaration public bool IsGestureAvailable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WindowHandle The window handle of the touch panel. Purely for Xna compatibility. Declaration public IntPtr WindowHandle { get; set; } Property Value Type Description System.IntPtr Methods | Improve this Doc View Source GetCapabilities() Returns capabilities of touch panel device. Declaration public TouchPanelCapabilities GetCapabilities() Returns Type Description TouchPanelCapabilities TouchPanelCapabilities | Improve this Doc View Source GetState() Declaration public TouchCollection GetState() Returns Type Description TouchCollection | Improve this Doc View Source ReadGesture() Returns the next available gesture on touch panel device. Declaration public GestureSample ReadGesture() Returns Type Description GestureSample GestureSample"
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities.html",
    "title": "Struct TouchPanelCapabilities | MonoGame Documentation",
    "keywords": "Struct TouchPanelCapabilities Allows retrieval of capabilities information from touch panel device. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public struct TouchPanelCapabilities Properties | Improve this Doc View Source HasPressure Declaration public bool HasPressure { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsConnected Returns true if a device is available for use. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaximumTouchCount Returns the maximum number of touch locations tracked by the touch panel device. Declaration public int MaximumTouchCount { get; } Property Value Type Description System.Int32"
  },
  "_api/Microsoft.Xna.Framework.Input.Touch.TouchPanel.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Touch.TouchPanel.html",
    "title": "Class TouchPanel | MonoGame Documentation",
    "keywords": "Class TouchPanel Allows retrieval of information from Touch Panel device. Inheritance System.Object TouchPanel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input.Touch Assembly : MonoGame.Framework.dll Syntax public static class TouchPanel Properties | Improve this Doc View Source DisplayHeight Gets or sets the display height of the touch panel. Declaration public static int DisplayHeight { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DisplayOrientation Gets or sets the display orientation of the touch panel. Declaration public static DisplayOrientation DisplayOrientation { get; set; } Property Value Type Description DisplayOrientation | Improve this Doc View Source DisplayWidth Gets or sets the display width of the touch panel. Declaration public static int DisplayWidth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EnabledGestures Gets or sets enabled gestures. Declaration public static GestureType EnabledGestures { get; set; } Property Value Type Description GestureType | Improve this Doc View Source EnableMouseGestures Declaration public static bool EnableMouseGestures { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableMouseTouchPoint Declaration public static bool EnableMouseTouchPoint { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsGestureAvailable Returns true if a touch gesture is available. Declaration public static bool IsGestureAvailable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WindowHandle The window handle of the touch panel. Purely for Xna compatibility. Declaration public static IntPtr WindowHandle { get; set; } Property Value Type Description System.IntPtr Methods | Improve this Doc View Source GetCapabilities() Declaration public static TouchPanelCapabilities GetCapabilities() Returns Type Description TouchPanelCapabilities | Improve this Doc View Source GetState() Gets the current state of the touch panel. Declaration public static TouchCollection GetState() Returns Type Description TouchCollection TouchCollection | Improve this Doc View Source GetState(GameWindow) Declaration public static TouchPanelState GetState(GameWindow window) Parameters Type Name Description GameWindow window Returns Type Description TouchPanelState | Improve this Doc View Source ReadGesture() Returns the next available gesture on touch panel device. Declaration public static GestureSample ReadGesture() Returns Type Description GestureSample GestureSample"
  },
  "_api/Microsoft.Xna.Framework.IDrawable.html": {
    "href": "_api/Microsoft.Xna.Framework.IDrawable.html",
    "title": "Interface IDrawable | MonoGame Documentation",
    "keywords": "Interface IDrawable Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public interface IDrawable Properties | Improve this Doc View Source DrawOrder Declaration int DrawOrder { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Visible Declaration bool Visible { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Draw(GameTime) Declaration void Draw(GameTime gameTime) Parameters Type Name Description GameTime gameTime Events | Improve this Doc View Source DrawOrderChanged Declaration event EventHandler<EventArgs> DrawOrderChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source VisibleChanged Declaration event EventHandler<EventArgs> VisibleChanged Event Type Type Description System.EventHandler < System.EventArgs >"
  },
  "_api/Microsoft.Xna.Framework.GraphicsDeviceManager.html": {
    "href": "_api/Microsoft.Xna.Framework.GraphicsDeviceManager.html",
    "title": "Class GraphicsDeviceManager | MonoGame Documentation",
    "keywords": "Class GraphicsDeviceManager Used to initialize and control the presentation of the graphics device. Inheritance System.Object GraphicsDeviceManager Implements IGraphicsDeviceService System.IDisposable IGraphicsDeviceManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GraphicsDeviceManager : IGraphicsDeviceService, IDisposable, IGraphicsDeviceManager Constructors | Improve this Doc View Source GraphicsDeviceManager(Game) Associates this graphics device manager to a game instances. Declaration public GraphicsDeviceManager(Game game) Parameters Type Name Description Game game The game instance to attach. Fields | Improve this Doc View Source DefaultBackBufferHeight The default back buffer height. Declaration public static readonly int DefaultBackBufferHeight Field Value Type Description System.Int32 | Improve this Doc View Source DefaultBackBufferWidth The default back buffer width. Declaration public static readonly int DefaultBackBufferWidth Field Value Type Description System.Int32 Properties | Improve this Doc View Source GraphicsDevice Returns the graphics device for this manager. Declaration public GraphicsDevice GraphicsDevice { get; } Property Value Type Description GraphicsDevice | Improve this Doc View Source GraphicsProfile The profile which determines the graphics feature level. Declaration public GraphicsProfile GraphicsProfile { get; set; } Property Value Type Description GraphicsProfile | Improve this Doc View Source HardwareModeSwitch Gets or sets the boolean which defines how window switches from windowed to fullscreen state. \"Hard\" mode(true) is slow to switch, but more effecient for performance, while \"soft\" mode(false) is vice versa. The default value is true . Declaration public bool HardwareModeSwitch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFullScreen Indicates the desire to switch into fullscreen mode. Declaration public bool IsFullScreen { get; set; } Property Value Type Description System.Boolean Remarks When called at startup this will automatically set fullscreen mode during initialization. If set after startup you must call ApplyChanges() for the fullscreen mode to be changed. Note that for some platforms that do not support windowed modes this property has no affect. | Improve this Doc View Source PreferMultiSampling Indicates the desire for a multisampled back buffer. Declaration public bool PreferMultiSampling { get; set; } Property Value Type Description System.Boolean Remarks When called at startup this will automatically set the MSAA mode during initialization. If set after startup you must call ApplyChanges() for the MSAA mode to be changed. | Improve this Doc View Source PreferredBackBufferFormat Indicates the desired back buffer color format. Declaration public SurfaceFormat PreferredBackBufferFormat { get; set; } Property Value Type Description SurfaceFormat Remarks When called at startup this will automatically set the format during initialization. If set after startup you must call ApplyChanges() for the format to be changed. | Improve this Doc View Source PreferredBackBufferHeight Indicates the desired back buffer height in pixels. Declaration public int PreferredBackBufferHeight { get; set; } Property Value Type Description System.Int32 Remarks When called at startup this will automatically set the height during initialization. If set after startup you must call ApplyChanges() for the height to be changed. | Improve this Doc View Source PreferredBackBufferWidth Indicates the desired back buffer width in pixels. Declaration public int PreferredBackBufferWidth { get; set; } Property Value Type Description System.Int32 Remarks When called at startup this will automatically set the width during initialization. If set after startup you must call ApplyChanges() for the width to be changed. | Improve this Doc View Source PreferredDepthStencilFormat Indicates the desired depth-stencil buffer format. Declaration public DepthFormat PreferredDepthStencilFormat { get; set; } Property Value Type Description DepthFormat Remarks The depth-stencil buffer format defines the scene depth precision and stencil bits available for effects during rendering. When called at startup this will automatically set the format during initialization. If set after startup you must call ApplyChanges() for the format to be changed. | Improve this Doc View Source SupportedOrientations Indicates the desired allowable display orientations when the device is rotated. Declaration public DisplayOrientation SupportedOrientations { get; set; } Property Value Type Description DisplayOrientation Remarks This property only applies to mobile platforms with automatic display rotation. When called at startup this will automatically apply the supported orientations during initialization. If set after startup you must call ApplyChanges() for the supported orientations to be changed. | Improve this Doc View Source SynchronizeWithVerticalRetrace Indicates the desire for vsync when presenting the back buffer. Declaration public bool SynchronizeWithVerticalRetrace { get; set; } Property Value Type Description System.Boolean Remarks Vsync limits the frame rate of the game to the monitor referesh rate to prevent screen tearing. When called at startup this will automatically set the vsync mode during initialization. If set after startup you must call ApplyChanges() for the vsync mode to be changed. Methods | Improve this Doc View Source ApplyChanges() Applies any pending property changes to the graphics device. Declaration public void ApplyChanges() | Improve this Doc View Source BeginDraw() Declaration public bool BeginDraw() Returns Type Description System.Boolean | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source EndDraw() Declaration public void EndDraw() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source OnDeviceDisposing(EventArgs) Declaration protected void OnDeviceDisposing(EventArgs e) Parameters Type Name Description System.EventArgs e | Improve this Doc View Source OnDeviceResetting(EventArgs) Declaration protected void OnDeviceResetting(EventArgs e) Parameters Type Name Description System.EventArgs e | Improve this Doc View Source ToggleFullScreen() Toggles between windowed and fullscreen modes. Declaration public void ToggleFullScreen() Remarks Note that on platforms that do not support windowed modes this has no affect. Events | Improve this Doc View Source DeviceCreated Declaration public event EventHandler<EventArgs> DeviceCreated Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceDisposing Declaration public event EventHandler<EventArgs> DeviceDisposing Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceReset Declaration public event EventHandler<EventArgs> DeviceReset Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source DeviceResetting Declaration public event EventHandler<EventArgs> DeviceResetting Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source Disposed Declaration public event EventHandler<EventArgs> Disposed Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source PreparingDeviceSettings Declaration public event EventHandler<PreparingDeviceSettingsEventArgs> PreparingDeviceSettings Event Type Type Description System.EventHandler < PreparingDeviceSettingsEventArgs > Explicit Interface Implementations | Improve this Doc View Source IGraphicsDeviceManager.CreateDevice() Declaration void IGraphicsDeviceManager.CreateDevice() Implements IGraphicsDeviceService System.IDisposable IGraphicsDeviceManager"
  },
  "_api/Microsoft.Xna.Framework.GraphicsDeviceInformation.html": {
    "href": "_api/Microsoft.Xna.Framework.GraphicsDeviceInformation.html",
    "title": "Class GraphicsDeviceInformation | MonoGame Documentation",
    "keywords": "Class GraphicsDeviceInformation The settings used in creation of the graphics device. See PreparingDeviceSettings . Inheritance System.Object GraphicsDeviceInformation Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GraphicsDeviceInformation Properties | Improve this Doc View Source Adapter The graphics adapter on which the graphics device will be created. Declaration public GraphicsAdapter Adapter { get; set; } Property Value Type Description GraphicsAdapter Remarks This is only valid on desktop systems where multiple graphics adapters are possible. Defaults to DefaultAdapter . | Improve this Doc View Source GraphicsProfile The requested graphics device feature set. Declaration public GraphicsProfile GraphicsProfile { get; set; } Property Value Type Description GraphicsProfile | Improve this Doc View Source PresentationParameters The settings that define how graphics will be presented to the display. Declaration public PresentationParameters PresentationParameters { get; set; } Property Value Type Description PresentationParameters"
  },
  "manual/tools/mgcb.html": {
    "href": "manual/tools/mgcb.html",
    "title": "MGCB | MonoGame Documentation",
    "keywords": "MGCB The MonoGame Content Builder (MGCB.exe) is a command line tool for building XNB content on Windows, Mac, and Linux desktop systems. Typically it is executed by the Pipeline GUI tool when editing content or indirectly from VisualStudio or MonoDevelop during the build process of a MonoGame project. Alternatively you can use it yourself from the command line for specialized build pipelines or for debugging content processing. Command Line Options The options are processed \"left to right\". When an option is repeated the last option always wins. Output Directory /outputDir:<directory_path> It specifies the directory where all content is written. If this option is omitted the output will be put into the current working directory. Intermediate Directory /intermediateDir:<directory_path> It specifies the directory where all intermediate files are written. If this option is omitted the intermediate data will be put into the current working directory. Rebuild Content /rebuild An optional parameter which forces a full rebuild of all content. Clean Content /clean Delete all previously built content and intermediate files. Only the /intermediateDir and /outputDir need to be defined for clean to do its job. Incremental Build /incremental Skip cleaning files not included in the current build. Useful for custom tools which only require a subset of the game content built. Assembly Reference /reference:<assembly_path> An optional parameter which adds an assembly reference which contains importers, processors, or writers needed during content building. Target Platform /platform:<target_Platform> Set the target platform for this build. It must be a member of the TargetPlatform enum: Windows iOS Android DesktopGL MacOSX WindowsStoreApp NativeClient PlayStation4 WindowsPhone8 RaspberryPi PSVita XboxOne Switch If not set it will default to Windows. NOTE: PlayStation 4, Xbox One, PS Vita, and Switch support is only available to licensed console developers. Target Graphics Profile /profile:<graphics_Profile> Set the target graphics profile for this build. It must be a member of the GraphicsProfile enum: HiDef Reach If not set it will default to HiDef. Target Build Configuration /config:<build_config> The optional build configuration name from the build system. This is sometimes used as a hint in content processors. Content Compression /compress Uses LZ4 compression to compress the contents of the XNB files. Content build times will increase with this option enabled. Compression is not recommended for platforms such as Android, Windows Phone 8 and Windows 8 as the app package is already compressed. This is not compatible with LZX compression used in XNA content. Content Importer Name /importer:<class_name> An optional parameter which defines the class name of the content importer for reading source content. If the option is omitted or used without a class name the default content importer for the source type is used. Content Processor Name /processor:<class_name> An optional parameter which defines the class name of the content processor for processing imported content. If the option is omitted used without a class name the default content processor for the imported content is used. Note that when you change the processor all previously defined /processorParam are cleared. Content Processor Parameter /processorParam:<name>=<value> An optional parameter which defines a parameter name and value to set on a content processor. Note all defined processor parameters are cleared when the /processor is set. Build Content File /build:<content_filepath> Instructs the content builder to build the specified content file using the previously set switches and options. Response File /@:<response_filepath> This defines a text response file (sometimes called a command file) that contains the same options and switches you would normally find on the command line. Each switch is specified on a new line. Comment lines are prefixed with #. You can specify multiple response files or mix normal command line switches with response files. An example response file could look like this: # Directories /outputDir:bin/foo /intermediateDir:obj/foo /rebuild # Build a texture /importer:TextureImporter /processor:TextureProcessor /processorParam:ColorKeyEnabled=false /build:Textures\\wood.png /build:Textures\\metal.png /build:Textures\\plastic.png #### Launch Debugger /launchdebugger Allows a debugger to attach to the MGCB executable before content is built. #### Define Preprocessor Parameter /define = Sets or creates a preprocessor parameter with the given name and value. ### Preprocessor Macros $if = $endif Preprocessor macros are intended to allow conditionals within a response file. The preprocess step is what expands a response file command into its composite commands for each line in the file. However, a line is only emitted if all conditionals which contain the line evaluate true. MGCB.exe /define:BuildEffects=No /@:example.mgcb <example.mgcb file> $if BuildEffects=Yes /importer:EffectImporter /processor:EffectProcessor /build:Effects\\custom.fx all other effects here.... $endif ### Customizing your Build Process When building content from your project via `msbuild` there are a few ways to can hook into the build process. The `MonoGame.Content.Builder.targets` runs a target called `BuildContent` just before your project builds. If you want to do any processing before or after this process you can use the `BeforeTargets` and `AfterTargets` mechanism provided by `msbuild` to run your own targest. If you want to customise the arguements sent to the `MGCB.exe` as part of the build process you can use the `<MonoGameMGCBAdditionalArguments>` property to define those. For example if you wanted to pass in the current project configuration you could define -config:$(Configuration)"
  },
  "manual/tools/2mgfx.html": {
    "href": "manual/tools/2mgfx.html",
    "title": "2MGFX | MonoGame Documentation",
    "keywords": "2MGFX The 2MGFX tool is used to build a MonoGame Effect from an input Microsoft FX or MGFX file. Command Line The command line options are: 2MGFX <SourceFile> <OutputFile> [/Debug] [/Profile:<DirectX_11,OpenGL,PlayStation4>] Source File The input effect file in typical FX format with samplers, techniques, and passes defined. This parameter is required. Output File The file to write for the output compiled MGFX file. This parameter is required. NOTE: The generated file is not an XNB file for use with the ContentManager. Debug Info If the /Debug flag is passed the resulting compiled MGFX file will contain extra debug information and the fewest possible optimizations. Platform Profile The /Profile option defines the platform we're targeting with this effect file. It can be one of the following: - DirectX_11 - OpenGL - PlayStation4 - PSVita - XboxOne - Switch NOTE: PlayStation 4, Xbox One, PS Vita, and Switch support is only available to licensed console developers. Help If you use /? , /help , or simply pass no paramters to 2MGFX.exe you will get information about these command line options. Runtime Use The resulting compiled MGFX file can be used from your game code like so: byte[] bytecode = File.ReadAllBytes(\"mycompiled.mgfx\"); var effect = new Effect(bytecode); This is basically how the stock effects (BasicEffect, DualTextureEffect, etc) are compiled and loaded."
  },
  "manual/platform_specific/tvOS.html": {
    "href": "manual/platform_specific/tvOS.html",
    "title": "Platform-Specific Notes: tvOS | MonoGame Documentation",
    "keywords": "Platform-Specific Notes: tvOS Menu Button Handling The Menu button will map to the \"Back\" button on the GamePad. However on tvOS, the Menu button requires some special processing. According to the Apple documentation the Menu Button \" Pauses/resumes gameplay. Returns to previous screen, exits to main game menu, and/or exits to Apple TV Home screen. \" By default MonoGame will exit to the Apple TV Home screen when the Menu button is pressed, this is not alawys the desired behviour. When in gameplay the Menu button really should Pause the game rather than Exiting to the Home screen. Because MonoGame has no idea of the game state, it is down to the developer to inform it when it can exit to the Home screen and when it should ignore the Menu event and allow the developer to the event. Some sample code. public class Game1 : Game , IPlaformBackButton { bool IsOnRootMenu = true; public bool Handled () { return IsOnRootMenu ? false : true; } public Game1 () { Services.AddService<IPlaformBackButton>(this); } public override Update(GameTime gametime) { if (GamePad.GetState (PlayerIndex.One).Buttons.Back == ButtonState.Pressed) { // do something in game } } } The key to this working is the IPlatformBackButton interface. By implementing and registering this interface MonoGame can callback into your application to ask if it should let you handle the Menu button or if it should pass it up to tvOS. So in this case if the app is on the \"Main menu\" the developer will set IsOnRootMenu to true and when the Menu button is pressed the game with Exit. However if IsOnRootMenu is false then the \"Menu\" button click will be routed to the GamePad Back button and the developer can check for the Back button press and act accordingly."
  },
  "manual/content/using_pipeline_tool.html": {
    "href": "manual/content/using_pipeline_tool.html",
    "title": "| MonoGame Documentation",
    "keywords": "�PNG \u001a \u0000\u0000\u0000 IHDR\u0000\u0000\u0001@\u0000\u0000\u0000�\b\u0002\u0000\u0000\u0000�ڱ�\u0000\u0000\u0000\u0001sRGB\u0000��\u001c�\u0000\u0000\u0000\u0004gAMA\u0000\u0000�� �a\u0005\u0000\u0000\u0000 pHYs\u0000\u0000\u000e�\u0000\u0000\u000e�\u0001�o�d\u0000\u0000\u0000\u0016tEXtSoftware\u0000paint.net 4.0;��i\u0000\u0000\u0018>IDATx^�]=�\u001cב�/�~��?�\u0019�+X�^0~V��2\u0001L�\u0010\u0016��\u0004l�� �N\u001e\u0001y\u0019� �\u0004�]I�(�\u001f��\u0017\u0004C�:0\u0014\u0018x[u�nݺ\u001f=�3�\u001f���� T]��nϽu�{��FW���\u0010����D�\u001f<|\u0002��\"\b\u0001���\u0002�ߏ�\u0013! \u0010\\\u0016\u001b\u0002��\u000f@\u0010\\\u0006! \u0010\\0! \u0010\\0U��<'B� �0B� � B� � n\u0013��K�O���\u001f\u001a�����ds���C������˿}��lt@��@\u0010���\u0002\u001eYcC\u0016���?� {\u0015�^\u0002f���O��?���|ǫ8�E���'�L��Ȑ��8<~�MZ�|����q� \u0004W��\u0002v���4Y��ZJ�]٩��3���\u001fCzQ'�&�Jy�Ǡp ��}^� �^��C�\u0006�\u0006�3��i�\u0007�x,b�j��t- (��M�N �tI\u0007��SD��'ω\u001d\u0002NRl8� �oz��Sd K��n�0�^ �-���g�a/�>T�lG-%��S��M���S�u��4��0\b\u001e. �� S�}:�.�)����w� ��{`E�� ���6\u0001�Ǧ�A\u0010\u001c�Q�/�\u00100\b.�*�O \u0010! \u0010\\\u0018�\u00110\b��\u0010\u0002\u0006�\u0005\u0013\u0002\u0006�\u0005�\u0016�\u0000\u0000X\b \u0000X0 \u0000X0T��|��\b\u0001\u0003��\u0000\u0001\u0003��\u0001\u0001\u0003��\u0001\u0001\u0003�������{��^{�\u0003=\u001c\u000e\u001f�Eu\u0003bq�Jp��'��\u001d�p��t\u0002\u0004���%���\u0016��\u0007��NHg\b�\u0014G\" \u0013�/���ڛ��}��[�A�\u001b� )fdY�9\u0019 -�\u0002~�8���ƚ����蛼A\u0018}4�c���Q�\u0003 C_\u0001�� *0\u0012ϵk����i��\u000e��I:\u001eF�\u000em�Zg\u000e�dKe�]�HA;��毅a\u001e7��\u0011���ӳ�0�?QFL\u000e�\u001f�?M_�bu\u001cx�MZ�t�(pJ�' ��\b�黅l1BSi\u0007q���\"I I@j�X�y\u0004V�%H�`���� %�8E8\u0019�X�� 3���x\u00165�fJ��\"ةf�LI�*�D3�U 9t2��K��>��Jax�7 �i�%�/e�.Ʌځ \u0015�4F\u001e^�� f3\u0015��XGa�h�\u0019\u0003�:2��\u0006\\M�M 4\u0010\u000e\\�9\u001b����]�\u0004O* �(�\u0017�\u0018e��p4% T ӗJ�6�(\u0010�k�8!����fw�}� \u0014\u0017�(�\u0013 N�:�:��y. �\u0003�\u0015#\u001a�����qb�ް����K��\u0007�)�\u0013�d�gƮe\\\u00167�����-}V^�jFS�@�i����r�\u0006�� \u0006�x� ��� �ɹ:5����`ө(��v����M?p\u001a0\u0001_\u0010�\u0004L�\u0006qp�h\b}�$\"f�/k0W+�V ���6��VSjH�FҤ�-fo�z �ө#���ie��tB�L���\u0000�t �+g���A� �h\u0010!;K�Ġ\u0002���\u0005q���q�)\u0013\u0000v\u0005\u0004</ � @��\u0002\u0002\u0006\u000e\u0002\u0004 \u0000 \u0006\u0004 \u0000 \u0006\u0004 \u0000 \u0006\u0004 \u0000 F\u0014�g\u0017D\b\u0018\u0000����� \u0000�B�\u0016�\u0018 \b\u001e9G\u0017��޻<�EM\u0010\u0004�S\b���J\b\u0018\u0004��0\u0001?x��l\u0010\u0004U��>� ����/�\\ ����ݰ�&! \u0010�b \u0001�[��g��54�\u0018\u0002��xY��\u0001�\u0013�n\u0002�����(F7�\u0016�;�Cu�Q\u000e\u0007\u00170i������?���o~K����a�T���Iu\u0002���a\u001eK\u0011�\u0002���\u000f�\b=ʡ\b�\u001e \u0012o�I��^�.���/S/\u0004 �\u001e��\u0002���\u001bT�����H6yD��x��{��\u0005l�^�^�\u000e\u0017� �t�� \u0012���=�\u0019���o��-IW@6y�\u0002�2�/ �j}�%�\u000e! ���W�{�\u0010�ӧO��/=�-\u0002\u0016��\u0005u\u0005�N\u0002\u0016 �z�\u00100xz�\u0002��%Q�\u0002&�y���\u0010 \u0001�\u0010�\u0012�\u0010���! ���K���C�\" \u0003���p��\u0007�h\u0002�ú\u0002q��E��� � ?��\u00100xz�� Ld��@�%ъ�� �e�\u0011p������bе\u0017�\u0005O�}\u0005,�4\u0014�\u001bX\bX�#�~��+�5 �Ӳ� �V���YX���ip7\u0001�񟑚7��+�|�u��u=v\u001a\u0016�\u0012,�����[\u0004��)q\u0007\u0001˿�\u0010D��c\u0007��\u0014���իW\"T�tk�\u0012w\u0012����\u0001��� ��� \u0012��� �d!�B��U�\u0005\u0016/�)`�\"\u0000\u0004O�� ذ�c)�B�\u0012c�r �-�K� \"� ��}\u0005�7 \u0001װ�.�\u00110\b��� x?B� �E\b\u0018\u0004\u0017�)\u0004|8�\u001a\u0004 ��� \u0018\u0004��\b\u0001��\u0019\u0005��%Ѽ \b.�\u00100\b.�� ��\u0001@�~�\u001e\u001000\u0018�\u000f��\u0004��(�N�2\u0000\u0000\u0001�\u0001\u0015��_\u0011�މZ\u0006\u0000 �90����^����s�6����ׯ�|D\u0016����t2x�Mus�Y�)P�\u0003��@�\u0001[1\u0006\u0006\u0017p�%޸>R�E�T�����͍�)~ l���=���͛� {\u0003������h\u0002Ͱv.���#yTW\u0003����A�\u000f} »��V�n�G\u00130��{~Mͮ }��{��7o�\u0014CTn� N����s�\u0016o�x�FqB�0z�L��|�����\u0017�C�����ʔ\u0015/�=RV���\u0003�[��Ъ\u000e����)K� ���%�yh�t�R\u0006;S3�g�GC�\u000f~�2�� ��d3X[SV�Q�\u0003��������ۧ(�8ז�J��5]\u001eF�pЊ\u0004\u000e@�\u000f�� �a/�����@\b9�Rց��\u0003�Fm^�hP�Ee)\u0002��#�+n�K|�+����}b������7�\u001d��9{nt�\\\u0005���xE\u0014{'j\u0019E��b����r���a� u\u0004�p��L�D��Fqw:�H ��p�oPu� �)t��(��\u000emMY\u0005\u0006\u0017��\u0007v�\u00186��gg�B�\u0015�a��X�����A��z��0��8!�S%_��\u0001�\u0019U?�e畷\u0005�\u0017dq��/UlnW� 0���U\u0003�0= ``0�\u001f�� ��\u0017��b�D-\u0003\u0000\u0010�\u001c�����~�\u001e\u001000\u0018�\u000f��P\u0001� 8#\u000f\u0015p�\u0003��I���\u0005 @�� �~ж\u0002�� �+��;��Bpͤ~ж\u0002�\u0002\u0004 \u000eF�\u0007m+ �\"��?*~�|�\u001a����\u0014\b\u0017\u000f���x_�d�y�^^޾��N��\u000f�V �\u0005H���}��pp�X.|\u0003w����\u0002\u000e�z�^:�m��$m��@P�\u0005� �f �Pٱ��,�gih?�wn���A�J\u0010�������O���y�ӈU\" ��WD�wb��$��ޡٿ���\b/+o�a��D��ʜ����� ��;����4�\u0011� xC��!�I�[��� � ����\u000e��\u0015rMk\u0015T�N� � �\u001e�. �g�'��#����O��g��g螅�0�\b(���c\u0019��E��MC�\u0007m+�\u0006��+��Wǈ��s�\u0007E���N�/�R'\u0017q\u0018�,)�+�l �f�(�\u0011o\u001e,1gg�-�1 h\u0001w4 7��VhAkem2sR�E=��̵c ś6�\u0005��Ө����Y�U�,c�l ��@/\u0019�%����\u0005�n.��l\\� H��mE \u0001䪊 թ\bX$\u0012�N5͙+,� �)&�ӄj��d�H�Q\u001erđ��0\u0016Ϻ fOc�١\u0002���WD�wb����\u001aW��o��[�;%�~%�\u0014�QP�: \u0012�����\u0006'�y��,c��M\u0001�<\u0013H{�3/�7/#�]�7\u0001�\u001f��\b��\\t��\u001fE�\u0004�9Ma�t,>K���h�z�&p�$�p�g;����D�cP\u0001� N�\u001e�g�o>�� ʐqk+\u001b��p�E���t\u0012���,c�l͛\u0002�g��t�7�q��M@�\u0007m+F�TC�&Y�\u0003/�\u0014!z��0d�����3ڍӑ���@�ٹ��\bnN4?\u0006\u00160�Ź�g�s�)45�:�� �I6�&^�<}�6 &��0g��k;�H��r}V[��E)[ �\u0017\u0001��h���.�/c:��՛��\u000f�V��~R'�Ë�\u0015��)�SSW��#�P.�n��h* ���\u0013͏�\u0005L ���\u001b9���1|�B�F'ҵ��dH�~B�qN�Y��\u0004�x��\u0015,����ږe�Q�?1�2��� ֱ 2��g�\u0015�^� H��me 5�h���t\u001aay�|$�_�XI�Xarj��;��OFj�Ǐ�Reps��1��{��<#� &�i�uVKጫG��m�3:�A\u0003 �\u0002\u0011�' ����\u0001�q�\u0002�u��\u001f��vF���2x���#�q ��\u0001���Y�\\\u0001Ͼz�\u000f�V;�\u0016p��=ʻ֣\u0002\u0006O��\u000f�V�T����H��m\u0005L�C\u0005 ���\u0002��+�y�S_\u0007���?�9\u0000\u0001\u0003À�I- B���&�,�S�\u0000�\u0007\u0004< T�O���h��O-\u0003�\u001e\u0010�,\u0018C��/x�\u001d�9�\u0019�<���<v<��o\u0005\u0001\u001b\u0000\u0001ς�\u0005\u001c��=}�m� Q\u0019\\6{\u0017����\u00130-`z �R��a\u0005������\u0010� �\u0016��<���A � �S�Ŏ�����y���\u0002�J.�X1$� ]!'�H@�fV�ܨ�=\u0011�cGt\bxCW� lP��\u0002n/� �h��m-b� o���i&�M�]l\u000e ��Y���@/t �+���5T\u0011��Ȋ\u0010Rx���v\u000e�����,;��ֱc�+pX\\�V.�Z�p� R�\u001e��Ys�D@ �\u00100��r��Xd\u001e��\u0014�L)� �]����I>���20�{ ��������y���]E��\u000e��Ys�D@_l\u0014p8l���gE��\u0006呌\u001e��)���o\u001d;�\u00150���]�E �B�����W��±_Y\u000e���Z\u00044m���Us�D@_l\u000f�V�AA�᳢�N�� �H���\u0014A\u0016y�1 -\u0006C ���\u0012ߥ�z\u0004a���LW�<q�iiC@\\�Pĩ�/}��Q�\u001b5�N\u0004�E���6\u00199��=�\u0015E���\u0014\u001fi���ە\u001b��9����c�\b\u0002\u0006V�\\��\u0015��\u0014k�z UxY:��B���H�:�\u0016�\\y�\u001f�:vD\u0001?��h��O-\u0003�\u001eN�� �Ґ�\u0006\u0016��(�/�~M4Y���\u0001V�e �o���>v@��0X���}v�e��\u0001\u0001\u0003� !\u0002>5\u001c* \u0010\u0014B��\u0000W``\u0018@��\u0000\u0002\u0006�\u0001\u0004< L��\u0010M���e��\u0003\u0002�\u0005\u001000 �Y0���sy���,\u001fΟ\u000f��:�)����ω+F%��� �{1���?��V?���a���˻�n�&2\u0001��\u0006{ �{1��y���>��۰w�:1x���uV�4M8\u0001\u001f�\u0006{ �{1��;7�/��\u001c-�XG��:�q\u0003�$K��S\u000fC��3N\u001a�R|,1�8� Y�D�\"��<\u001d���\u001c:f���N��d��0\u001e\u0017�Q��F����Cł7�jN�N�ICG�(�g�\u0010M���e\u0004�\u0002�ZG�\u00055����S\u0011\u0013\u0007yU��N3i�5����\u0005 �5[N�H0Om\u0018����t��\u0007��Ȟ����� ��XUyBd\u0002n��ϫ�\u0005�\u0013\" \\\u0010g\u0016�'\u001b ��N�%ň���t�\u0005A\u0005���7D�ej\u0019\u0001o@s �y���7���ąm\u0015)m��߬�}\"��hP� ���7k>�e�'.)\u0004��a)�b1Q~���~\u0005���y5��=���PׂS�� ���;���ʧ\b�\u0017�\u0017�A\u0005ܹu~��� ���F�e�Jw\u0015� :��f��\u0013 �Gr�'U Kb|p��'5���\u0014\u0016]OTש=\u0013b�{��MO2\u001c��l��+�a(� !�*�G\u0004I�ٹ�4��J�\u0001t\u0018wa\u0019\u0018V�����?����=\u001c\u0019o�l��b��MF�zP��w\u0001vV��&JVDg� �\u0004�'�j\u0003>��jWOV��Od4��!��<�Q\u0001\u0019hduN���u�\u0018Z�\u0004^��������,�'uJOH\u0012\u000f���Z��ܜ\u001d'�Dz��Rpd��\u0011�D\u0004��:\u001aVT�\u0010�� �L�|��X���2��5�B�\u000e�¶�F\u0016#��j�E \u0004\u0001\u0003��u�rP �/:�, ��� �\u0018\u001b\u0010�\u0011\u0002\u0002\u000e�̱� �)�\u0007\u0004|�X���v7{�3 &�b\"@��0�W��A���a\u0000\u0001ςC\u0005 �B\u0012�+W~��%\u001e'}���\u0015\u00188\u0010$`�'pbB��0��g� ���o�&����\u0003V\u000f\bx\u0016B��0�\u0005|��K�\u000f�o�C��������;��7t�\u0005rX\u0001?��˄\u001bw/�yq�F�o\u0018\u0012c\u0003B��\u0007z��\u0005\u001c\u00052\u0001\u0007�ݿ�\u000eo�=\u001c��)���\u0005ܥ��\u0002�q㆗0\u0004�\u0018x\u0001ӵw\u0002i���R�b\u001e��� �{#\u0005B��A\u0012p����,1 L��{�xȞL�t���$�n�Q )���j��K'���|vy\u0015��g� ���,\u001d\u001e\u0015�\u0016�y�\u0010�W ��e�q��$K�Ia��\u001e}V5�n�\b\u0018\u001e��;ޗ�\u0012D9A$�\u001c��ě�D+Z��&4�%�壚\u001b�!�\u00025�^)H�V�\u000eP���P�28x�k��q���A4��� 3���1XᇢX�\u0019l���-'\u0002���+p�7ez\u001dz�j�z-�x�h�N�ü $]�4\u001d ��M��vp�DG�ɯ��\u0018�]\u001a3Ʌ�ܣ� �Xeo�\b\u0018\u001e��\u0003�\u0010�%��Ю��\u0016�ԕw���+\u0014�ʫ\u0003�oGI7��\u0013\u001d g\u0011p��|���Yd�\u0005\u0019-{�D���\u0002��פ��)4)A�N'�T�z�\u0004E��6H��+��� \u0001�4��gz�k\u0001ups�#����(�\"�tV !xl��Vǂ�6\u0019� ��L�ĠF��\u0006;���|DD��m�D�;aO/�ZWޙl2R3x�h U\u00057':\u0012��!V�-t@\b\u0014O̹q�V�+0�s\" x�\u0002��.y�=6��� \u0018X/\u0006\u00160]\u0006� v\u0013\u0002\u0006���\u0002�\u001d��y�w�GE\u0015����\u0012M����\u0007�\u001e{ \u0018<�Q�/�%�,�Sw\u000fX= �Y\b\u0001\u0003�\u0000\u0002��� \u0018\u0004�$ �20!p\u0005\u0006�\u0001\u0004< ``\u0018@��\u0000\u0002\u0006�\u0001\u0004< L��\u0011M���e��\u0003\u0002�\u0005� ����\u0010���X����\u0002)�\u0015� d��\u00003\u0000\u0002�\u0005� ���6 X=��\u0016\u001a�='\u0005�\u0005 \u0018�\u001e�+��z�\u0001�\"�|_��8��\u0012�t�)�H{�]�<��༻�/[����FA�[�\u0006zv��c �{̮ C3�-\u0005/P:���u�r�����o%��Ͷ+���\u0003|��l�\u0006�ɸ�\" �e��8��(2�ǋ��ɔMUM@\u000e�Rj��\u0005=��\u0011O]҂��]=�T��dϭ\u0011�\u0003�iܹ&�6 �çW �\u0013ɎO�M[, j�����\u0010ڍ�&�:\u0017�\u0006����\u0018��)²\\]-[wP\u0016SvJy2qb+S��@���2Z�(�i��e��3��4ފ �T�/^|G\u0014{'��\u0006;3���]\u001b\u0006�\u0018�\u0019�]'v������� ��\u0006��i��ֻ\"ܸ�%h \u001c�\u0000\u001eu��<>��V�Jq2�\u0001\u0017�S�H�d\u0011ZEb���~w����#���[�\u000fE�\u0018��G��\u0000\u0000\u0000\u0000IEND�B �"
  },
  "manual/content/localization.html": {
    "href": "manual/content/localization.html",
    "title": "Localization | MonoGame Documentation",
    "keywords": "Localization Localization is an important part of any game. While it can be possible to design a game that is region independent, its quite hard. At some point you will need to produce localized text and graphics. MonoGame has a simple localization system built in. If you want to develop your own system you are still able to do so. But the default system should be good enough for most use cases. Creating resx files. MonoGame runs on .net/Mono on most platforms. Localization is handled by those platforms via the use of resx files. There are walkthroughs on MSDN which walk you through the process. A simplified version is presented here. Create a .resx file in the IDE e.g Foo.resx and add it to your game project. Note this needs to be added to the main app projects. The Foo.resx file should have an Action of EmbeddedResouce and a Generator value of ResXFileCodeGenerator. There is a snippet from the .csproj <EmbeddedResource Include=\"Foo.resx\"> <Generator>ResXFileCodeGenerator</Generator> <LastGenOutput>Foo.Designer.cs</LastGenOutput> </EmbeddedResource> Add any string resources to that file. These are in the form of a Key/Value pair. You can use the built in editor or manually edit the .resx file by hand. Its an xml file so you can view the contents easily. <data name=\"Wall_Style\" xml:space=\"preserve\"> <value>Wall Style : {0}</value> </data> What happens when the resx is processed by the generator and produces a Foo.Designer.cs file which is then included in your project. You can then access the \"string\" value by using code as follows var s = MyProject.Foo.Wall_Style; Note in the example we have a place holder ({0}) for additional text. You can still use te property of Foo.Wall_Style with things like string.Format. int i = 1; var s = string.Format (MyProject.Foo.Wall_Style, i); All this means you dont need to hard the string directly. When accessing MyProject.Foo.Wall_Style the code will lookup the value from the embedded resx file. You can add support for a new language by adding a new resx file which uses the language/region code e.g Foo.de-DE.resx. This new file will contain the translations for that language/region. In the example we are targetting German. Universal Windows Platform (UWP) considerations. Unfortunately UWP does not support resx files anymore. They have a new file called resw. The format is similar but incompatible. As a result you will need to duplicate the data into a set of resw files to get the to work on UWP. The process is like the standrd resx process. Upgrading your SpriteFont files By default the SpriteFont processor uses a limited set of characters to generate the font. While this is fine for english languages it would probably not include special characters needed for other languages (French, Arabic, Korean etc). As a result MonoGame has a LocalizedFontProcessor which does something slightly different. The process looks at the resx files you provide it with and generates an optimized spritefont which only contains the characters your game uses. To make use of this functionality you ned to tell the spritefont which resx files to use. Open the .spritefont with a xml/text editor and add lines like this inside the Asset node <ResourceFiles> <Resx>..\\Foo.resx</Resx> <Resx>..\\Foo.de-DE.resx</Resx> </ResourceFiles> Note the paths are relative to the .spritefont directory. In the example above the resx files are in the directory above the .spritefont. You should end up with a .spritefont file like this <?xml version=\"1.0\" encoding=\"utf-8\"?> <XnaContent xmlns:Graphics=\"Microsoft.Xna.Framework.Content.Pipeline.Graphics\"> <Asset Type=\"Graphics:FontDescription\"> <FontName>Verdana</FontName> <Size>14</Size> <Spacing>1</Spacing> <Style>Regular</Style> <CharacterRegions> <CharacterRegion> <Start>&#32;</Start> <End>&#32;</End> </CharacterRegion> </CharacterRegions> <ResourceFiles> <Resx>..\\Foo.resx</Resx> <Resx>..\\Foo.de-DE.resx</Resx> </ResourceFiles> </Asset> </XnaContent> Once that is done you then need to change the .mgcb file so that the SpriteFontProcessor is replaced with the LocalizedFontProcessor. This can be done by editing the .mgcb file or using the Pipeline tool. After that you can just compile your content as normal. If the processor has any trouble resolving or reading the resx files you will get an error. Loading the Font Loading the font can be done in the normal way. The end result of the process is a .xnb file containing a normal SpriteFont. var font = Content.Load<SpriteFont>(\"Foo\"); Other Localized assets Not all localized assets will be fonts. In certain situtions you might need to swap out an entire texture or spritesheet. For these cases a new method has been added to the ContentManager, LoadLocalized. The idea behind this method is that it will look for localized files BEFORE loading the default one. So for example say you have an asset, MyCharacter. You have a MyCharacter.xnb file which contains the data for that item. You can also has a MyCharacter.de-DE.xnb file which contains the German version of that asset. This asset could be a Texture, Audio or any other game asset. You can then use LoadLocalized to load the localized version of the asset. var myCharacter = Content.LoadLocalized<Texture2D>(\"MyCharacter\"); The decision on which localized asset to load is made by looking for a file with the following patterns <AssetName>.<CurrentCulture.Name> <AssetName>.<CurrentCulture.TwoLetterISOLanguageName> These values are retrieved from CultureInfo.CurrentCulture.Name // eg. \"en-US\" CultureInfo.CurrentCulture.TwoLetterISOLanguageName // eg. \"en\" which are part of the System.Globalization namespace. On a side note you can also use the LoadLocalized to load language specific SpriteFonts. They just need to be named in the same way as we have described above."
  },
  "manual/content/custom_effects.html": {
    "href": "manual/content/custom_effects.html",
    "title": "Custom Effects | MonoGame Documentation",
    "keywords": "Custom Effects A core element of Microsoft XNA is the effect system which is used for all rendering. For MonoGame we have the burden of supporting stock and custom effects for desktop GLSL, mobile GLSL, DirectX HLSL, and custom formats like that of the PlayStation Mobile. There currently is no effect system or shader language that supports all the platforms we require, forcing us to build a new custom effect system. MGFX MGFX is MonoGame's own \"FX\" runtime and tools which with the following core goals: Support a similar technique, passes, shaders structure as Microsoft FX files. Have a textual format for ease of editing. Have a compiled and optimized binary format for runtime use. Be cross-platform and support multiple shader languages and bytecodes. Easy to extend for future platforms and features. Stock Effects The following stock effects in MonoGame and fully supported on current platforms: BasicEffect AlphaTestEffect DualTextureEffect EnvironmentMapEffect SkinnedEffect Under the hood these effects use the same system and tools as one would for a custom Effect. The source and pre-compiled versions of these effects can be found in the 'MonoGame.Framework\\Graphics\\Effect\\Resources' folder. If your game requires an extra little bit of performance you can easily hand edit the existing effects to remove unnecessary features or optimize for specific hardware and rebuild them with the MGFX tool. Custom Effects To use a custom effect with MonoGame you must do one of the following (not both): Run the effect file through the MonoGame Effect content processor for loading via the ContentManager (Recommended). Process your effect file with the 2MGFX tool and load them yourself at runtime. Effect Writing Tips These are some tips for writing or converting effects for use with MonoGame. Use the DX11 feature levels vs_4_0_level_9_1 or ps_4_0_level_9_1 when targeting Windows 8 Metro applications and wanting to support all devices. Higher shader models work, but might not run on all Windows 8 systems. When targeting Windows Phone 8 you can use vs_4_0_level_9_3 or ps_4_0_level_9_3 . When targeting GL platforms we automatically translate FX files to GLSL using a library called MojoShader . It will only work with vs_3_0 or ps_3_0 or lower shaders. Make sure the pixel shaders inputs exactly match the vertex shader outputs so the parameters are passed in the correct registers. You can use #if SM4 to add conditional code for DirectX platforms. On DirectX platforms use the SV_Position semantic instead of POSITION in vertex shader inputs. Note that on GL platforms default values on Effect parameters do not work. Either set the parameter from code or use a real constant like a #define. Do not name your sampler Sampler - it will not compile. The effect compiler is aggressive about removing unused paramters, be sure the parameters you are setting are actually used. If you think you've found a bug porting a shader please let us know . Roadmap There is still work to be done for better support of custom effects and shaders in MonoGame: Support GLSL in FX files. Write a new preprocessor replacing D3DPreprocess . Replace MojoShader with HL2GLSL . Create an automated tests for custom effects. Support PlayStation Suite shaders in MGFX tools and formats. Support pre-compiled GLSL assembly instead of GLSL code."
  },
  "manual/content/content.html": {
    "href": "manual/content/content.html",
    "title": "Adding Content | MonoGame Documentation",
    "keywords": "Adding Content A big part of your game is your content. This includes standard files like textures, sound effects, music, videos, and custom effects as well as custom content like level and enemy files. MonoGame implements its own content pipeline for transforming your unoptimized assets into platform optimized content. This is critical in building a game which runs as fast as possible under tight resource constraints. This section will cover the following topics: What is Game Content Using The Pipeline Tool Using TrueType Fonts Custom Effects Custom Content Types"
  },
  "manual/content/adding_ttf_fonts.html": {
    "href": "manual/content/adding_ttf_fonts.html",
    "title": "Adding TTF Fonts | MonoGame Documentation",
    "keywords": "Adding TTF Fonts MonoGame supports more than one method of using fonts, the following is an explanation of how to use TrueType fonts. Using TrueType Fonts with MonoGame To be able to use a truetype font, MonoGame requires the truetype font file and a .spritefont file. Truetype fonts may be installed on the system, or added to the project manually using your IDE in the same directory as the .spritefont file. Create the .spritefont file. 2- Open the newly created .spritefont file in your text editor of choice, find this line and change it to your selected .ttf font. If the font is installed on the system, just type the name of the font. <FontName>Arial</FontName> Usage Example Make a class variable of type Spritefont SpriteFont font; Load the font in the LoadContent function font = myGame.Content.Load<SpriteFont>(\"Fonts/myFont\") Draw any text in the Draw function spriteBatch.Begin(); // Finds the center of the string in coordinates inside the text rectangle Vector2 textMiddlePoint = font.MeasureString(text) / 2; // Places text in center of the screen Vector2 position = new Vector2(myGame.Window.ClientBounds.Width / 2, myGame.Window.ClientBounds.Height / 2); spriteBatch.DrawString(font, \"MonoGame Font Test\", position, Color.White, 0, textMiddlePoint, 1.0f, SpriteEffects.None, 0.5f) spriteBatch.End(); If you want to know more, please refer to the API Documentation"
  },
  "manual/links.html": {
    "href": "manual/links.html",
    "title": "External Links | MonoGame Documentation",
    "keywords": "External Links Links to several useful reference sites related to MonoGame. Microsoft XNA Documentation OpenGL 4.3 Reference Card OpenGL ES 2.0 Reference Card WebGL Reference Card Collada Specification Valve's Guide to Porting to Linux"
  },
  "manual/platform_specific/platform_specific.html": {
    "href": "manual/platform_specific/platform_specific.html",
    "title": "Platform-Specific Notes | MonoGame Documentation",
    "keywords": "Platform-Specific Notes While MonoGame aims to provide a platform-agnostic framework for developing games and apps, there are still some specifics for each platform that the developer needs to be aware of. This section lists those specifics broken down by platform. Android tvOS"
  },
  "manual/platform_specific/android.html": {
    "href": "manual/platform_specific/android.html",
    "title": "Platform-Specific Notes: Android | MonoGame Documentation",
    "keywords": "Platform-Specific Notes: Android Target Frameworks Specifying the target Android versions can be confusing. MonoGame is built to target Android 4.2 (API Level 17), but can run on lower Android versions. If you build MonoGame from source, you will need the SDK Platform for API Level 17 installed in the Android SDK Manager. Since MonoGame targets Android 4.2, the Target Framework in your Android project must be set to 4.2 or higher. To allow your game to run on lower Android versions, set the Minimum Android version to the desired version in the project properties. Visual Studio There are three settings in the Application tab of the project properties to set the target Android versions. Compile using Android version must be set to a minimum of Android 4.2 . If you are using APIs available only in later Android versions, this must be set to the Android version that API became available or higher. Minimum Android to target is set to the lowest Android version that you wish to support. Target Android version is usually set to Use Compile using SDK version . This means to use the same value that we set the app to be built with. There is usually no reason to set this to any other value. This is an example of a project set to build with the 4.4 SDK and target 4.0 as a minimum Android version. Xamarin Studio Xamarin Studio has the same settings in the project options dialog. They are just in different places. Target framework on the General page is the equivalent of Visual Studio's Compile using Android version . On the Android Application page, you will find Minimum Android version (Visual Studio's Minimum Android to target ) and Target Android version (same as Visual Studio). Android Manifest Requirements OpenGL ES 2.0 Support MonoGame uses OpenGL ES 2.0. Google requires the following to be added to AndroidManifest.xml in order for the Market to hide the game from devices that do not have support for OpenGL ES 2.0. <!-- Tell the system this app requires OpenGL ES 2.0. --> <uses-feature android:glEsVersion=\"0x00020000\" android:required=\"true\" /> Texture Compression The Market can also filter games by the types of texture compression they support. Add a <supports-gl-texture> node for each type of texture compression used in your game. See the Android documentation for further details on this node. References Such Android API Levels, Much Confuse. Wow. is a blog post by Redth going into more detail about setting the Android versions in a Xamarin project."
  },
  "manual/introduction/what_is_monogame.html": {
    "href": "manual/introduction/what_is_monogame.html",
    "title": "What is MonoGame | MonoGame Documentation",
    "keywords": "What is MonoGame MonoGame is an Open Source implementation of the Microsoft XNA 4 Framework. Our goal is to allow people to make great games using a simple API. The currently supported platforms are as follows. Desktop PCs Windows 10 Store Apps (UWP) Windows Win32 (OpenGL & DirectX) Linux (OpenGL) Mac OS X (OpenGL) Mobile/Tablet Devices Android (OpenGL) iPhone/iPad (OpenGL) Windows Phone 10 Television tvOS MonoGame also supports a number of Game Consoles. The templates and source for these platforms are not publicly availalbe. However they are available to developers registered with the appropriate developer programs. Consoles (for registered developers) PlayStation 4 (Sony) PlayStation Vita (Sony) Xbox One (both UWP and XDK) (id@xbox) Nintendo Switch (Nintendo)"
  },
  "manual/introduction/system_requirements.html": {
    "href": "manual/introduction/system_requirements.html",
    "title": "System Requirements | MonoGame Documentation",
    "keywords": "System Requirements This section will give you an overview of minimal system requirements for developing and running MonoGame Applications. Development Windows - Linux - 1 GB Ram Mac - Running MonoGame Application on specific Platform WindowsDX - DirectX 9.0c capable gpu WindowsGL - Linux - 512 MB Ram Mac - Android - Android 4.2 or higher iOS - Windows Phone - Windows Phone 10"
  },
  "manual/introduction/setting_up_monogame_source.html": {
    "href": "manual/introduction/setting_up_monogame_source.html",
    "title": "Setting up MonoGame from Source | MonoGame Documentation",
    "keywords": "Setting up MonoGame from Source This section will help you setup MonoGame by building it from source code. Prerequisites Install the tools for the system you are building from: Windows: Git for Windows Visual Studio Xamarin.Android (Optional) Windows Phone 8 SDK (Optional) Mac: Git Xamarin Studio Xamarin.Android and Xamarin.iOS can be installed with the Xamarin Studio installer (Optional) Linux: Git Monodevelop Getting the source code Start up a Terminal (Mac/Linux) or Git Bash (Windows) and clone the MonoGame repository: git clone https://github.com/MonoGame/MonoGame.git cd MonoGame git submodule init git submodule update Building from source MonoGame uses Protobuild to generate project and solution files. Protobuild.exe will be in your MonoGame folder. To run Protobuild: On Windows run Protobuild.exe either by double-clicking or by executing it from the command line. On Mac/Linux open a terminal and run mono Protobuild.exe in the MonoGame folder. Once the project and solution files are generated you can build them with the IDE you installed. Referencing the projects First get the MonoGame SDK from the downloads page and install it to get the IDE templates. Start up the IDE you have installed and create a new project from one of the templates. Click Add > Existing Project... on your solution and select the MonoGame.Framework project that matches the template (i.e. MonoGame.Framework.Windows.csproj for a MonoGame Windows project template). The project files are located in MonoGame/MonoGame.Framework. Delete the existing MonoGame.Framework reference and add a reference to the added project by clicking Add Reference... > Projects and selecting the project. You can run your game now. If you make changes to the MonoGame.Framework project it will automatically rebuild when running your game."
  },
  "manual/introduction/setting_up_monogame_mac.html": {
    "href": "manual/introduction/setting_up_monogame_mac.html",
    "title": "Setting up MonoGame on Mac | MonoGame Documentation",
    "keywords": "Setting up MonoGame on Mac This section will help you setup MonoGame on Mac OSX. Running MonoGame Applications Developing MonoGame Applications Developing on the Mac requires a number of other frameworks and applications. If you are targeting MacOS/iOS and/or Android you will need licences from Xamarin . But to get started you can use the Linux or DesktopGL platforms which will run quite happily on MacOS providing you have mono installed. So to get setup you will first need to install mono. Go to Mono Downloads page Download the latest Mac OS installer. Note: If you are running El Capitan you will need to install the very latest mono otherwise things will not work correctly. You will also need Xamarin Studio Go to xamarin.com Fill in the required informaton Download the installer. This will install Xamarin Studio (which is Free) as well as other parts of the Xamarin plafrom which you can optionally use. To setup MonoGame application development on mac OSX do the following: Go to MonoGame Downloads page Click on the newest MonoGame release Download MonoGame for Mac Open the .pkg You will probably get an error about signing. If you do , right click and Open the .pkg file and you will be able to continue That's it, MonoGame is installed. Make sure you install mono and Xamarin Studio first so that MonoGame can correctly setup the project templates and addins."
  },
  "manual/introduction/setting_up_monogame_linux.html": {
    "href": "manual/introduction/setting_up_monogame_linux.html",
    "title": "Setting up MonoGame on Linux | MonoGame Documentation",
    "keywords": "Setting up MonoGame on Linux This section will help you setup MonoGame on Linux. Running MonoGame Applications The following packages are needed for the MonoGame Applications to run on Linux: libopenal-dev mono-runtime For Ubuntu/Debian based Linux systems, you can run: sudo apt-get install libopenal-dev mono-runtime Developing MonoGame Applications Go to MonoGame Downloads page Download MonoGame for Linux Open up terminal and type in: cd Downloads chmod +x monogame-sdk.run sudo ./monogame-sdk.run During the installation process the installer will give you the following list of dependencies, please make sure they are installed: monodevelop ( http://www.monodevelop.com/download/ ) libopenal-dev gtk-sharp3 referenceassemblies-pcl (needed to use PCL template) ttf-mscorefonts-installer (recommended, but not needed) That's it, MonoGame SDK is installed"
  },
  "manual/introduction/setting_up_monogame.html": {
    "href": "manual/introduction/setting_up_monogame.html",
    "title": "Setting up MonoGame | MonoGame Documentation",
    "keywords": "Setting up MonoGame This section will help you setup MonoGame on Platform of your choice. Please select the platform you wish to develop from: Windows Mac Linux Building from source"
  },
  "manual/introduction/monogame_faq.html": {
    "href": "manual/introduction/monogame_faq.html",
    "title": "MonoGame FAQ | MonoGame Documentation",
    "keywords": "MonoGame FAQ This page contains a list of frequently asked questions. What software do I need to start? Depending on the platform you wish to develop for the following thing are needed: Android - You need Xamarin.Android: http://android.xamarin.com/ , it works on Windows and Mac and it can be used in combination with either Visual Studio or Xamarin Studio. iOS - You need Xamarin.iOS: http://ios.xamarin.com/ , it works on Windows and Mac and it can be used in combination with either Visual Studio or Xamarin Studio."
  },
  "manual/introduction/introduction.html": {
    "href": "manual/introduction/introduction.html",
    "title": "Introduction | MonoGame Documentation",
    "keywords": "Introduction This section will give you an overview of MonoGame including, what it contains, development requirements, setup instructions, and additional links for help and support. This section will cover the following topics: What is MonoGame System Requirements Setting Up MonoGame Getting Started MonoGame FAQ Help and Support"
  },
  "manual/introduction/help_and_support.html": {
    "href": "manual/introduction/help_and_support.html",
    "title": "Help and Support | MonoGame Documentation",
    "keywords": "Help and Support This section will provide help and support for MonoGame. Help If you wish to learn how to use MonoGame, please checkout our the Tutorials . If you want to find an answer to a more specific problem, you can ask it on our Community page . Bugs and New Feature Requests If you find a bug or have a feature request, please open a new issue . Before opening any issue, please search for existing issues and read the Issue Guidelines ."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "MonoGame Documentation | MonoGame Documentation",
    "keywords": "MonoGame Documentation Welcome to the MonoGame Documentation Hub."
  },
  "index.html": {
    "href": "index.html",
    "title": "MonoGame Documentation | MonoGame Documentation",
    "keywords": "MonoGame Documentation Welcome to the MonoGame game library documentation hub. This area of the site contains the documentation on the API of MonoGame as well as how to use it to create great games. Note that this is a work in progress so there will be gaps in the documentation coverage. If you cannot find what you need here you can also look at the Microsoft XNA documentation . MonoGame is API compatible with XNA even down to the namespaces. So usually what works for XNA will work for MonoGame too. Note that this documentation hub is built from the source code on every commit to the development branch. As such it applies to the development builds available on the Downloads page. This may include new features which may not be available in the current stable release We Need Your Help! Truly great open source projects require high quality documentation. This is call for volunteers to help us make the MonoGame documentation truly great. If you can help write tutorials, guides, code snippets, reference docs, video walkthroughs or just any improvement to our current documentation we could use your help! Check out the README on GitHub or talk with us on the community site to learn how to help!"
  },
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | MonoGame Documentation",
    "keywords": "Changelog 3.6 Release - 2/28/2017 Fixed XML deserialization of Curve type. #5494 Fix #5498 Pipeline Tool template loading on MacOS. #5501 Fix typo in the exclude.addins which cause warnings when installing the Addin in XS. #5500 Added support for arbitrary defines passed to the Effect compiler. #5496 Fixed GraphicsDevice.Present() to check for current render target. #5389 Custom texture compression for SpriteFonts. #5299 Performance improvements to SpriteBatch.DrawString(). #5226 Removed the OUYA platform #5194 Dispose of all graphical resources in unit tests. #5133 Throw NoSuitableGraphicsDeviceException if graphics device creation fails. #5130 Optimized and added additional constructors to Color. #5117 Added SamplerState.TextureFilterMode to correctly support comparison filtering. #5112 Fixed Apply3D() on stereo SoundEffect. #5099 Fixed Effect.OnApply to return void to match XNA. #5090 Fix crash when DynamicSoundEffectInstance not disposed. #5075 Texture2D.FromStream now correctly throws on null arguments. #5050 Implemented GraphicsAdapter for DirectX platforms. #5024 Fixed initialization of GameComponent when created within another GameComponent. #5020 Improved SoundEffect internal platform extendability. #5006 Refactored audio processing for platform extensibility. #5001 Refactored texture processing for platform extensibility. #4996 Refactor ShaderProfile to allow for pipeline extensibility. #4992 Removed unnessasary dictionary lookup for user index buffers for DirectX platforms. #4988 New SetRenderTargets() method which allows for variable target count. #4987 Added support for XACT reverb and filter effects. #4974 Remove array in GamePadDPad constructor. #4970 Updated to the latest version of Protobuild. #4964 Fixed static VBs and IBs on UWP on XB1. #4955 Updated to the latest version of Protobuild. #4950 Update Xamarin Studio addin for latest platform changes. #4926 Replace OpenTK with custom OpenGL bindings #4874 Fix Mouse updating when moving the Window. #4924 Fix incorrect use of startIndex in Texture2D.GetData DX. #4833 Cleanup of AssemblyInfo for framework assembly. #4810 New SDL2 backend for desktop GL platforms. #4428 Two MaterialProcessor properties fixed. #4746 Fixed thumbstick virtual buttons to always use independent axes. #4742 Fixed back buffer MSAA on DirectX platforms. #4739 Added new CHANGELOG.md to project. #4732 Added obsolete attribute and updated documentation. #4731 Fixed layout of UWP windows in VS template to ignore window chrome. #4727 Remove support for reading raw assets through ContentManager. #4726 Implemented DynamicSoundEffectInstance for DirectX and OpenAL platforms. #4715 Removed unused Yeti Mp3 compressor. #4713 MonoGame Portable Assemblies. #4712 Fixed RGBA64 packing and added unit tests. #4683 Fix Gamepad crash when platform doesn't support the amount. #4677 Fixed Song stopping before they are finished on Windows. #4668 Removed the Linux .deb installer. #4665 OpenAssetImporter is now automatically selected for all the formats it supports. #4663 Fixed broken unit tests under Linux. #4614 Split out Title Container into partial classes. #4590 Added Rider Support to Linux installer. #4589 Implement vertexStride in VertexBuffer.SetData for OpenGL. #4568 Performance improvement to SpriteBatch vertex generation. #4547 Optimization of indices initialization in SpriteBatcher. #4546 Optimized ContentReader to decode LZ4 compressed streams directly. #4522 TitleContainer partial class cleanup. #4520 Remove raw asset support from ContentManager. #4489 Initial implementation of RenderTargetCube for OpenGL. #4488 Removed unnecessary platform differences in MGFX. #4486 SoundEffect fixes and tests. #4469 Cleanup FX syntax for shader compiler. #4462 General Improvements to Pipeline Gtk implementation. #4459 ShaderProfile Refactor. #4438 GraphicsDeviceManager partial class refactor. #4425 Remove legacy Storage classes. #4320 Added mipmap generation for DirectX render targets. #4189 3.5.1 Release - 3/30/2016 Fixed negative values when pressing up on left thumbstick on Mac. Removed exception and just return empty state when requesting an invalid GamePad index. Fixed texture processing for 64bpp textures. Fixed Texture2D.SaveAsPng on Mac. 3.5 Release - 3/17/2016 Content Pipeline Integration for Xamarin Studio and MonoDevleop on Mac and Linux. Automatic inclusion of XNBs into your final project on Mac and Linux. Improved Mac and Linux installers. Assemblies are now installed locally on Mac and Linux just like they are on Windows. New cross-platform �Desktop� project where same binary and content will work on Windows, Linux and Mac desktops. Better Support for Xamarin.Mac and Xam.Mac. Apple TV support (requires to be built from source at the moment). Various sound system fixes. New GraphicsMetrics API. Optimizations to SpriteBatch performance and garbage generation. Many improvements to the Pipeline tool: added toolbar, new filtered output view, new templates, drag and drop, and more. New GamePad support for UWP. Mac and Linux now support Vorbis compressed music. Major refactor of texture support in content pipeline. Added 151 new unit tests. Big improvements to FBX and model content processing. Various fixes to XML serialization. MediaLibrary implementation for Windows platforms. Removed PlayStation Mobile platform. Added content pipeline extension template project. Support for binding multiple vertex buffers in a draw call. Fixed deadzone issues in GamePad support. OcclusionQuery support for DX platforms. Fixed incorrect z depth in SpriteBatch. Lots of OpenTK backend fixes. Much improved font processing. Added new VertexPosition vertex format. Better VS project template installation under Windows. 3.4 Release - 4/29/2015 Removed old XNA content pipeline extensions. Added all missing PackedVector types. Replacement of old SDL joystick path with OpenTK. Added SamplerState.ComparisonFunction feature to DX and OGL platforms. Fixed bug where content importers would not be autodetected on upper case file extensions. Fixed compatibility with XNA sound effect XNBs. Lots of reference doc improvements. Added SamplerState.BorderColor feature to DX and OGL platforms. Lots of improvements to the Mac, Linux and Windows versions of the Pipeline GUI tool. Fixes for bad key mapping on Linux. Support for texture arrays on DX platforms. Fixed broken ModelMesh.Tag VS templates will now only install if VS is detected on your system. Added Color.MonoGameOrange. Fixed Xact SoundBack loading bug on Android. Added support for a bunch of missing render states to MGFX. Added support for sRGB texture formats to DX and OGL platforms. Added RasterizerState.DepthClipEnable support for DX and OGL platforms. New support for the Windows 10 UAP plafform. Fixed bug which caused the GamePad left thumbstick to not work correctly. Preliminary base classed for future Joystick API. Performance improvement on iOS by avoiding unnessasary GL context changes. Fixed bug where MediaPlayer volume affected all sounds. New XamarinStudio/MonoDevelop Addin for Mac. New Mac installer packages. 3.3 Release - 3/16/2015 Support for vertex texture fetch on Windows. New modern classes for KeyboardInput and MessageBox. Added more validation to draw calls and render states. Cleaned up usage of statics to support multiple GraphicsDevice instances. Support Window.Position on WindowsGL platform. Reduction of redundant OpenGL calls. Fullscreen support for Windows DX platform. Implemented Texture2D SaveAsPng and SaveAsJpeg for Android. Improved GamePad deadzone calculations. We now use FFmpeg for audio content building. BoundingSphere fixes and optimizations. Many improvements to Linux platform. Various fixes to FontTextureProcessor. New Windows Universal App template for Windows Store and Windows Phone support. Many fixes to reduce garbage generation during runtime. Adding support for TextureFormatOptions to FontDescriptionProcessor. XNA compatibility improvements to FontDescriptionProcessor. Resuscitated the unit test framework with 100s of additional unit tests. BoundingFrustum fixes and optimizations. Added VS2013 project templates. Moved to new MonoGame logo. Added MSAA render target support for OpenGL platforms. Added optional content compression support to content pipeline and runtime. TextureCube content reader and GetData fixes. New OpenAL software implementation for Android. Xact compatibility improvements. Lots of Android fixes and improvements. Added MediaLibrary implementation for Android, iOS, Windows Phone, and Windows Store. Added ReflectiveWriter implementation to content pipeline. Fixes to Texture2D.GetData on DirectX platforms. SpriteFont rendering performance optimizations. Huge refactor of ModelProcessor to be more compatible with XNA. Moved NET and GamerServices into its own MonoGame.Framework.Net assembly. Runtime support for ETC1 textures for Androud. Improved compatibility for FBXImporter and XImporter. Multiple SpritBatch compatibility fixes. We now use FreeImage in TextureImporter to support many more input formats. MGFX parsing and render state improvements. New Pipeline GUI tool for managing content projects for Windows, Mac, and Linux desktops. New implementation of content pipeline IntermediateSerializer. All tools and content pipeline built for 64-bit. New documentation system. Implement web platform (JSIL) stubs. Lots of fixes to PSM. Added Protobuild support for project generation. Major refactor of internals to better separate platform specific code. Added MGCB command line tool to Windows installer. 3.2 Release - 4/7/2014 Implemented missing PackedVector types. VS2013 support for MonoGame templates. Big improvement to XInput performance on Windows/Windows8. Added GameWindow.TextInput event enhancement. Added Xamarin.Mac compatability. Support for WPF interop under DirectX. Enhancement to support multiple GameWindows on Windows under DirectX. Various SpriteFont compatibility improvements. OpenAL performance/memory/error handling improvements. Reduction of Effect runtime memory usage. Support for DXT/S3TC textures on Android. Touch support on Windows desktop games. Added new RenderTarget3D enhancement. OUYA gamepad improvements. Internal improvements to reduce garbage generation. Various windowing fixes for OpenTK on Linux, Mac, and Windows. Automatic support for content reloading on resume for Android. Support for TextureCube, Texture3D, and RenderTargetCube on DirectX. Added TitleContainer.SupportRetina enhancement for loading @2x content. Lots of Android/Kindle compatibility fixes. Added enhancement GameWindow.IsBorderless. OpenGL now supports multiple render targets. Game.IsRunningSlowly working accurately to XNA. Game tick resolution improvements. XACT compatibility improvements. Various fixes and improvements to math types. DrawUserIndexedPrimitives now works with 32bit indicies. GamerServices fixes under iOS. Various MonoGame FX improvements and fixes. Render target fixes for Windows Phone. MediaPlayer/MediaQueue/Song fixes on Windows Phone. XNA accuracy fixes to TitleContainer. Fixes to SpriteBatch performance and compatibility with XNA. Threading fixes around SoundEffectInstance. Support for Song.Duration. Fixed disposal of OpenGL shader program cache. Improved support of PoT textures in OpenGL. Implemented missing EffectParameter SetValue/GetValue calls. Touch fixes to Windows Phone. Fixes to orientation support in iOS. Lots of PSM fixes which make it usable for 2D games. New Windows desktop platform using DirectX/XAudio. Old Windows project renamed WindowsGL. Fixed offsetInBytes parameter in IndexBuffer/VertexBuffer SetData. Fixed subpixel offset when viewport is changed in OpenGL. Tons of content pipeline improvements making it close to complete. 3.0.1 Release - 3/3/2013 Fix template error. Fix offsetInBytes parameter in IndexBuffer/VertexBuffer SetData. Fixes the scale applied on the origin in SpriteBatch. Fixed render targets on WP8. Removed minVertexIndex Exception. Fixed some threading issues on iOS. Use generic link for opening store on iOS. Fix Matrix::Transpose. Fixed vertexOffset in DrawUserIndexedPrimitives in GL. Keys.RightControl/RightShift Support for WinRT. Dispose in ShaderProgramCache. IsRunningSlowly Fix. 3.0 Release - 1/21/2013 3D (many thanks to Infinite Flight Studios for the code and Sickhead Games in taking the time to merge the code in). New platforms: Windows 8, Windows Phone 8, OUYA, PlayStation Mobile (including Vita). Custom Effects. PVRTC support for iOS. iOS supports compressed Songs. Skinned Meshs. VS2012 templates. New Windows Installer. New MonoDevelop Package/AddIn. A LOT of bug fixes. Closer XNA 4 compatibility. 2.5.1 Release - 6/18/2012 Updated android to use enumerations rather than hardocded ids as part of the Mono for Android 4.2 update. Changed the Android video player to make use of the ViewView. Corrected namespaces for SongReader and SoundEffectReader. Updated the Keyboard mapping for android. Added RectangleArrayReader. Removed links to the third party GamePadBridge. Added some missing mouseState operators. Replaced all calls to DateTime.Now with DateTime.UtcNow. Fixed SpriteFont rendering (again). Added code to correclty dispose of Textures on all platforms. Added some fixes for the sound on iOS. Adding missing MediaQueue class. Fixed Rectangle Intersect code. Changed the way UserPrimitives work on windows. Made sure the @2x file support on iOS works. Updated project templates. Added project templates for MacOS. Fixed MonoDevelop.MonoGame AddIn so it works on Linux. 2.5 Release - 3/29/2012 Fixes and Features Minor fixes to the Networking stack to make it more reliable when looking for games. SpriteBatch Fixes including making sure the matrix parameter is applied in both gles 1.1 and gles 2.0. Updated IDrawable and IUpdatable interfaces to match XNA 4.0. Fixed the Tick method. Updated VideoPlayer constructor contract to match XNA 4.0. Added Code to Lookup the Host Application Guid for Networking, the guid id is now pulled from the AssemblyInfo.cs if one is present. Uses OpenAL on all platforms except Android. Added Dxt5 decompression support. Improves SpriteFont to conform more closely to XNA 4.0. Moved DynamicVertexBuffer and DynamicIndexBuffer into its own files. iOS Fixed Console.WriteLine problem. Fixed loading of @2x Retina files. Fixed Landscape Rendering. Fixed Orientations changes correctly animate. Fixed Guide.BeginShowKeyboardInput. Fixed StorageDevice AOT compile problem. Fixed SpriteBatch to respect matrices when drawn. Fixed DoubleTap, improves touches in serial Game instances. Fixed App startup in non-Portrait orientations. Fixed UnauthorizedAccessException using TitleContainer. Fixed a runtime JIT error that was occuring with List<AddJournalEntry (). Guide.ShowKeyboard is not working. App Backgrounding has regressed. A patch is already being tested in the develop branch and the fix will be rolled out as part of the v2.5.1. Android Project Templates for MonoDevelop. Fixed a few issues with Gestures. Fixed the name of the assembly to be MonoGame.Framework.Android. Fixed a Memory Leak in Texture Loading. Force linear filter and clamp wrap on npot textures in ES2.0 on Android. Added SetData and GetData support for Texture2D. Guide.SignIn picks up the first email account on the phone. CatapultWars does not render correctly under gles 1.1. MacOS X SoundEffectInstance.Stop now works correctly. Linux Project Templates for Visual Studio and MonoDevelop. Fixed a bug when loading of Wav files. Windows Project Templates for Visual Studio and MonoDevelop. Fixed a bug when loading of Wav files. Added Game.IsMouseVisible implementation for Windows. Guide.SignIn picks up the logged in user. Added a new Installer to install the MonoDevelop and / or Visual Studio Templates and binaries. 2.1 Release - 10/28/2011 Features Content Manager rewritten to use partial classes and implementation of cached assets that are loaded. Greatly improves memory footprint. Experimental support for GamePads and Joysticks. Enhancements will be coming to integrate better for developers. ContentReader improvements across the board. Improved support for XACT audio. StarterKits VectorRumble. iOS Gesture support has been improved. Better support for portrait to landscape rotations. Fixed a rendering bug related to upsidedown portrait mode. Better WaveBank support. The Guide functionality is only available in iOS, for this release. Android Updated to support Mono for Android 4.0. Improvements to the Orientation Support. Changed Sound system to use SoundPool. Added Tap and DoubleTap Gesture Support. MacOS X A lot of enhancements and fixes for Full Screen and Windowed control. Cursor support fixed for IsMouseVisible. Implementation of IsActive property and the events Activated and Deactivated. First steps of DrawPrimitives, DrawUserPrimitives, DrawIndexedPrimitives. Better WaveBank support. Support for ApplyChanges() and setting the backbuffer and viewport sizes correctly. Linux All new implementation which share quite a bit of code between MacOS X and Windows. Added shader support via the Effects class. Windows All new implementation which shares quite a bit of code between MacOS and Linux. 2.0 Release - 10/28/2011 Project renamed MonoGame. Project moved to GitHub. Support for Linux, Mac, Linux, and OpenGL on Windows. 0.7 Release - 12/2/2009 First stable release. Originally named XnaTouch. iPhone support only. 2D rendering support. Audio support. Networking support. Partial multitouch support. Partial accelerometer support."
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "Tutorials | MonoGame Documentation",
    "keywords": "Tutorials This section will contain tutorials to learn MonoGame for various skill levels."
  },
  "manual/tools/tools.html": {
    "href": "manual/tools/tools.html",
    "title": "| MonoGame Documentation",
    "keywords": "This section explains the various command line tools that are part of MonoGame. 2MGFX is used to compile stand alone effects. MGCB is used to build content pipeline content."
  },
  "manual/tools/pipeline.html": {
    "href": "manual/tools/pipeline.html",
    "title": "Pipeline Tool | MonoGame Documentation",
    "keywords": "Pipeline Tool The MonoGame Pipeline Tool (Pipeline.exe) is the front-end GUI editor for MonoGame content builder projects. The Pipeline Tool has the following features: Create, open, and save MGCB projects. Import existing XNA .contentproj. Tree view showing content of project. Property grid for editing content settings. Full undo/redo support. Build, rebuild, and clean the project. Rebuild selected items. Create new content like fonts and xml. Support for custom importers/processors/writers. Template format for adding new custom content types. The Pipeline Tool is included in the SDK installation. Read detailed documentation"
  },
  "manual/getting_started/getting_started.html": {
    "href": "manual/getting_started/getting_started.html",
    "title": "Getting Started | MonoGame Documentation",
    "keywords": "Getting Started This section walks you through the basics of MonoGame and help you create your first game. Creating a New Project Visual Studio MonoDevelop / Xamarin Studio Understanding the Code Adding Content Adding Basic Code"
  },
  "manual/getting_started/4_adding_basic_code.html": {
    "href": "manual/getting_started/4_adding_basic_code.html",
    "title": "Adding Basic Code | MonoGame Documentation",
    "keywords": "Adding Basic Code This file will go over adding basic logic to your game. Do note that this file continues where Adding Content tutorial left off. First of all we need to add few new variables, one for position, and one for speed. public class Game1 : Game { Texture2D ballTexture; Vector2 ballPosition; float ballSpeed; Next let's initialize them. Find the Initialize method and add the following lines. // TODO: Add your initialization logic here ballPosition = new Vector2(graphics.PreferredBackBufferWidth / 2, graphics.PreferredBackBufferHeight / 2); ballSpeed = 100f; base.Initialize(); With this we are putting our ball starting position to the center of the screen. Last thing we need to do is modify the position that the ball is getting drawn to. Find Draw method and modify the Draw call to: spriteBatch.Draw(ballTexture, ballPosition, Color.White); Now run the game. As you can see the ball doesn't seem quite centered yet. This is happening because MonoGame uses (0, 0) as the origin point for drawing by default. We can modify this by doing the following: spriteBatch.Draw( ballTexture, ballPosition, null, Color.White, 0f, new Vector2(ballTexture.Width / 2, ballTexture.Height / 2), Vector2.One, SpriteEffects.None, 0f ); With this we are setting the origin to the center of the image. Now the image will get drawn to the center of the screen. Next let's setup some movement. Find the Update method and add: // TODO: Add your update logic here var kstate = Keyboard.GetState(); if (kstate.IsKeyDown(Keys.Up)) ballPosition.Y -= ballSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds; if(kstate.IsKeyDown(Keys.Down)) ballPosition.Y += ballSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds; if (kstate.IsKeyDown(Keys.Left)) ballPosition.X -= ballSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds; if(kstate.IsKeyDown(Keys.Right)) ballPosition.X += ballSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds; base.Update(gameTime); Let's discuss the code a bit. With this we are getting the current keyboard state and just putting it into a variable. var kstate = Keyboard.GetState(); Next is just a simple check to see if the Up arrow key is pressed. if (kstate.IsKeyDown(Keys.Up)) And last is a simple code for moving the ball by ballSpeed . The reason why ballSpeed is getting multiplied by gameTime.ElapsedGameTime.TotalSeconds is because Update is not usually fixed, that is the time between update calls is not the same, so in order to get smooth movement we multiple speed by the time since the last update method was called. ballPosition.Y -= ballSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds; The last 2 code parts repeat for Down, Left and Right arrow keys. Run the game and you should be able to move the ball with the arrow keys. You will probably notice that you can get out of the window, so let's make it so that the ball can't escape the window. We will do this by setting bounds onto the ballPosition after it has already been moved. if(kstate.IsKeyDown(Keys.Right)) ballPosition.X += ballSpeed * (float)gameTime.ElapsedGameTime.TotalSeconds; ballPosition.X = Math.Min(Math.Max(ballTexture.Width / 2, ballPosition.X), graphics.PreferredBackBufferWidth - ballTexture.Width / 2); ballPosition.Y = Math.Min(Math.Max(ballTexture.Height / 2, ballPosition.Y), graphics.PreferredBackBufferHeight - ballTexture.Height / 2); base.Update(gameTime); Now run the game and the ball won't be able to escape window bounds anymore. Happy Coding ^^"
  },
  "manual/getting_started/3_adding_content.html": {
    "href": "manual/getting_started/3_adding_content.html",
    "title": "Adding Content | MonoGame Documentation",
    "keywords": "Adding Content This file will go over adding content to your game. For help on creating a project please look at Creating a New Project First of all you are gonna need some content for your game. For this tutorial use the following image of a ball: Do right-click > Save Image As and save it somewhere with the name \"ball.png\". Now open up your game project and look at the left. You should see a solution explorer window. Expand the Content folder and open up Content.mgcb file by double clicking on it. You should now see a MonoGame Pipeline Tool window open up. In case it didn't get opened, you can right-click on Content.mgcb , select open with and then select MonoGame Pipeline . Your game content is managed from this external tool. You can add content to your game in one of the following ways: Add Existing Item toolbar button Edit > Add > Existing Item... menu button right-click > Add > Existing Item... context menu In our case let's use the Add Existing Item toolbar button. You should now be prompted to select a file. Select the \"ball.png\" that you have downloaded a moment ago. After that you will be asked on what action you want to do for adding the file. Just leave the it to default and click OK . Now simply click Save toolbar button and close the tool. Now that we have added the content, it's time to load it. First declare a new variable so we can load the ball image into memory. public class Game1 : Game { Texture2D textureBall; GraphicsDeviceManager graphics; Next find the Load Content method and use it to initialize the ball private variable: protected override void LoadContent() { // Create a new SpriteBatch, which can be used to draw textures. spriteBatch = new SpriteBatch(GraphicsDevice); // TODO: use this.Content to load your game content here textureBall = Content.Load<Texture2D>(\"ball\"); } And finally, find the Draw method, and let's draw the ball onto the screen: protected override void Draw(GameTime gameTime) { graphics.GraphicsDevice.Clear(Color.CornflowerBlue); // TODO: Add your drawing code here spriteBatch.Begin(); spriteBatch.Draw(textureBall, new Vector2(0, 0), Color.White); spriteBatch.End(); base.Draw(gameTime); } Now run the game and you should get the following: For the next part, look at Adding Basic Code page."
  },
  "manual/getting_started/2_understanding_the_code.html": {
    "href": "manual/getting_started/2_understanding_the_code.html",
    "title": "Understanding the Code | MonoGame Documentation",
    "keywords": "Understanding the Code This file will go over the code that is getting created when you start a blank project. For help on creating a project please look at Creating a New Project Using Statements using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using Microsoft.Xna.Framework.Storage; using Microsoft.Xna.Framework.Input; These using statements are required in order to use the code that MonoGame has to offer. The reason why they start with Microsoft.Xna.Framework is because MonoGame is an open source implementation of Microsoft Xna framework, and in order to maintain compatibility with the XNA code, it is using the same namespaces. The Game1 Class public class Game1 : Game The main Game1 class is inheriting from the Game class, which provides all the core methods for your game (ie. Load/Unload Content, Update, Draw etc.). You usually have only one Game class per game so its name isn't that important. Instanced Variables GraphicsDeviceManager graphics; SpriteBatch spriteBatch; The two default variables that the blank template starts with are GraphicsDeviceManager and SpriteBatch. Both of these variables are used for drawing stuff as you will see in a later tutorial. Constructor public Game1() { graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; } The main game constructor is used to initialize the starting variables. In this case we are creating a new GraphicsDeviceManager from our game, and are setting the folder which the game will search for content. Initialize Method protected override void Initialize() { // TODO: Add your initialization logic here base.Initialize(); } This method is called after the constructor, but before the main game loop(Update/Draw). This is where you can query any required services and load any non-graphic related content. LoadContent Method protected override void LoadContent() { // Create a new SpriteBatch, which can be used to draw textures. spriteBatch = new SpriteBatch(GraphicsDevice); // TODO: use this.Content to load your game content here } This method is used to load your game content. It is called only once per game, after Initialize method, but before the main game loop methods. Update Method protected override void Update(GameTime gameTime) { if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape)) Exit(); // TODO: Add your update logic here base.Update(gameTime); } This method is called multiple times per second, and is used to update your game state (checking for collisions, gathering input, playing audio, etc.). Draw Method protected override void Draw(GameTime gameTime) { graphics.GraphicsDevice.Clear(Color.CornflowerBlue); // TODO: Add your drawing code here base.Draw(gameTime); } Similar to the Update method, it is also called multiple times per second. For the next part, look at Adding Content page."
  },
  "manual/getting_started/1_creating_a_new_project_vs.html": {
    "href": "manual/getting_started/1_creating_a_new_project_vs.html",
    "title": "Creating a New Project with Visual Studio | MonoGame Documentation",
    "keywords": "Creating a New Project with Visual Studio Start up Visual Studio and select New Project... in the upper left corner. Now you should see a \"New Project\" dialog pop up, from here select Templates > Visual C# > MonoGame category, and then select MonoGame Cross Platform Desktop Project . Next type in the name that you wish to give your project, for this tutorial let's just use ExampleGame (do note that you should not use space character for it). After you've entered the name, click on the Browse button next to the location text field, and select where you wish to save your project. Finally click OK to create a new project. If everything went correctly, you should see an ExampleGame project open up like in the picture bellow. To run your game simply press the big Play Button in the toolbar or press F5 . You should now see your game window running. Currently it's just clearing the surface with blue color. For further information on creating your game, please look at the Understanding the Code ."
  },
  "manual/getting_started/1_creating_a_new_project_md.html": {
    "href": "manual/getting_started/1_creating_a_new_project_md.html",
    "title": "Creating a new project with MonoDevelop | MonoGame Documentation",
    "keywords": "Creating a new project with MonoDevelop Start up MonoDevelop / Xamarin Studio and select New... in the upper left corner. Now you should see a \"New Project\" dialog pop up. From here select MonoGame > App category, then select MonoGame Cross Platform Desktop Project and click Next . On the following dialog, type in the name that you wish to give your project. Do note that you should not use space character for it. For this tutorial, it will be named ExampleGame . After you've entered the name, click on the Browse button next to location text field, and select where you wish to save your project. Finally click Create to create a new project. If everything went correctly, you should see an ExampleGame project open up like in the picture bellow. To run your game simply press the big Play Button in the upper left corner or press F5 . You should now see your game window running. Currently it's just clearing the surface with blue color. For further information on creating your game, please look at the Understanding the Code ."
  },
  "manual/getting_started/1_creating_a_new_project.html": {
    "href": "manual/getting_started/1_creating_a_new_project.html",
    "title": "Creating a New Project | MonoGame Documentation",
    "keywords": "Creating a New Project This tutorial assumes that you have configured MonoGame correctly on your system, if you haven't, please read the Setting Up MonoGame . Depending on the software you plan on using please follow either Visual Studio , or VS for Mac / MonoDevelop guide."
  },
  "_api/Microsoft.Xna.Framework.Media.Video.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.Video.html",
    "title": "Class Video | MonoGame Documentation",
    "keywords": "Class Video Represents a video. Inheritance System.Object Video Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class Video : IDisposable Properties | Improve this Doc View Source Duration Gets the duration of the Video. Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source FileName I actually think this is a file PATH... Declaration public string FileName { get; } Property Value Type Description System.String | Improve this Doc View Source FramesPerSecond Gets the frame rate of this video. Declaration public float FramesPerSecond { get; } Property Value Type Description System.Single | Improve this Doc View Source Height Gets the height of this video, in pixels. Declaration public int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VideoSoundtrackType Gets the VideoSoundtrackType for this video. Declaration public VideoSoundtrackType VideoSoundtrackType { get; } Property Value Type Description VideoSoundtrackType | Improve this Doc View Source Width Gets the width of this video, in pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.SongCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.SongCollection.html",
    "title": "Class SongCollection | MonoGame Documentation",
    "keywords": "Class SongCollection Inheritance System.Object SongCollection Implements System.Collections.Generic.ICollection < Song > System.Collections.Generic.IEnumerable < Song > System.Collections.IEnumerable System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public class SongCollection : ICollection<Song>, IEnumerable<Song>, IEnumerable, IDisposable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public Song this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description Song Methods | Improve this Doc View Source Add(Song) Declaration public void Add(Song item) Parameters Type Name Description Song item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Clone() Declaration public SongCollection Clone() Returns Type Description SongCollection | Improve this Doc View Source Contains(Song) Declaration public bool Contains(Song item) Parameters Type Name Description Song item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(Song[], Int32) Declaration public void CopyTo(Song[] array, int arrayIndex) Parameters Type Name Description Song [] array System.Int32 arrayIndex | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Song> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Song > | Improve this Doc View Source IndexOf(Song) Declaration public int IndexOf(Song item) Parameters Type Name Description Song item Returns Type Description System.Int32 | Improve this Doc View Source Remove(Song) Declaration public bool Remove(Song item) Parameters Type Name Description Song item Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.Song.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.Song.html",
    "title": "Class Song | MonoGame Documentation",
    "keywords": "Class Song Inheritance System.Object Song Implements System.IEquatable < Song > System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class Song : IEquatable<Song>, IDisposable Properties | Improve this Doc View Source Album Gets the Album on which the Song appears. Declaration public Album Album { get; } Property Value Type Description Album | Improve this Doc View Source Artist Gets the Artist of the Song. Declaration public Artist Artist { get; } Property Value Type Description Artist | Improve this Doc View Source Duration Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Genre Gets the Genre of the Song. Declaration public Genre Genre { get; } Property Value Type Description Genre | Improve this Doc View Source IsDisposed Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsProtected Declaration public bool IsProtected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRated Declaration public bool IsRated { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source PlayCount Declaration public int PlayCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rating Declaration public int Rating { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TrackNumber Declaration public int TrackNumber { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Equals(Song) Declaration public bool Equals(Song song) Parameters Type Name Description Song song Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromUri(String, Uri) Returns a song that can be played via MediaPlayer . Declaration public static Song FromUri(string name, Uri uri) Parameters Type Name Description System.String name The name for the song. See Name . System.Uri uri The path to the song file. Returns Type Description Song | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators | Improve this Doc View Source Equality(Song, Song) Declaration public static bool operator ==(Song song1, Song song2) Parameters Type Name Description Song song1 Song song2 Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Song, Song) Declaration public static bool operator !=(Song song1, Song song2) Parameters Type Name Description Song song1 Song song2 Returns Type Description System.Boolean Implements System.IEquatable<T> System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.PlaylistCollection.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.PlaylistCollection.html",
    "title": "Class PlaylistCollection | MonoGame Documentation",
    "keywords": "Class PlaylistCollection Inheritance System.Object PlaylistCollection Implements System.Collections.Generic.ICollection < Playlist > System.Collections.Generic.IEnumerable < Playlist > System.Collections.IEnumerable System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class PlaylistCollection : ICollection<Playlist>, IEnumerable<Playlist>, IEnumerable, IDisposable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public Playlist this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description Playlist Methods | Improve this Doc View Source Add(Playlist) Declaration public void Add(Playlist item) Parameters Type Name Description Playlist item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Clone() Declaration public PlaylistCollection Clone() Returns Type Description PlaylistCollection | Improve this Doc View Source Contains(Playlist) Declaration public bool Contains(Playlist item) Parameters Type Name Description Playlist item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(Playlist[], Int32) Declaration public void CopyTo(Playlist[] array, int arrayIndex) Parameters Type Name Description Playlist [] array System.Int32 arrayIndex | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Playlist> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Playlist > | Improve this Doc View Source IndexOf(Playlist) Declaration public int IndexOf(Playlist item) Parameters Type Name Description Playlist item Returns Type Description System.Int32 | Improve this Doc View Source Remove(Playlist) Declaration public bool Remove(Playlist item) Parameters Type Name Description Playlist item Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Input.Mouse.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Mouse.html",
    "title": "Class Mouse | MonoGame Documentation",
    "keywords": "Class Mouse Allows reading position and button click information from mouse. Inheritance System.Object Mouse Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public static class Mouse Properties | Improve this Doc View Source WindowHandle Gets or sets the window handle for current mouse processing. Declaration public static IntPtr WindowHandle { get; set; } Property Value Type Description System.IntPtr Methods | Improve this Doc View Source GetState() Gets mouse state information that includes position and button presses for the primary window Declaration public static MouseState GetState() Returns Type Description MouseState Current state of the mouse. | Improve this Doc View Source GetState(GameWindow) This API is an extension to XNA. Gets mouse state information that includes position and button presses for the provided window Declaration public static MouseState GetState(GameWindow window) Parameters Type Name Description GameWindow window Returns Type Description MouseState Current state of the mouse. | Improve this Doc View Source PlatformSetCursor(MouseCursor) Declaration public static void PlatformSetCursor(MouseCursor cursor) Parameters Type Name Description MouseCursor cursor | Improve this Doc View Source SetCursor(MouseCursor) Sets the cursor image to the specified MouseCursor. Declaration public static void SetCursor(MouseCursor cursor) Parameters Type Name Description MouseCursor cursor Mouse cursor to use for the cursor image. | Improve this Doc View Source SetPosition(Int32, Int32) Sets mouse cursor's relative position to game-window. Declaration public static void SetPosition(int x, int y) Parameters Type Name Description System.Int32 x Relative horizontal position of the cursor. System.Int32 y Relative vertical position of the cursor."
  },
  "_api/Microsoft.Xna.Framework.Input.KeyState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.KeyState.html",
    "title": "Enum KeyState | MonoGame Documentation",
    "keywords": "Enum KeyState Identifies the state of a keyboard key. Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public enum KeyState Fields Name Description Down Key is pressed. Up Key is released."
  },
  "_api/Microsoft.Xna.Framework.Input.Keys.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Keys.html",
    "title": "Enum Keys | MonoGame Documentation",
    "keywords": "Enum Keys Defines the keys on a keyboard. Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public enum Keys Fields Name Description A A key. Add Add key. Apps Applications key. Attn Attn key. B B key. Back BACKSPACE key. BrowserBack Browser Back key. BrowserFavorites Browser Favorites key. BrowserForward Browser Forward key. BrowserHome Browser Start and Home key. BrowserRefresh Browser Refresh key. BrowserSearch Browser Search key. BrowserStop Browser Stop key. C C key. CapsLock CAPS LOCK key. ChatPadGreen Green ChatPad key. ChatPadOrange Orange ChatPad key. Crsel CrSel key. D D key. D0 Used for miscellaneous characters; it can vary by keyboard. D1 Used for miscellaneous characters; it can vary by keyboard. D2 Used for miscellaneous characters; it can vary by keyboard. D3 Used for miscellaneous characters; it can vary by keyboard. D4 Used for miscellaneous characters; it can vary by keyboard. D5 Used for miscellaneous characters; it can vary by keyboard. D6 Used for miscellaneous characters; it can vary by keyboard. D7 Used for miscellaneous characters; it can vary by keyboard. D8 Used for miscellaneous characters; it can vary by keyboard. D9 Used for miscellaneous characters; it can vary by keyboard. Decimal Decimal key. Delete DEL key. Divide Divide key. Down DOWN ARROW key. E E key. End END key. Enter ENTER key. EraseEof Erase EOF key. Escape ESC key. Execute EXECUTE key. Exsel ExSel key. F F key. F1 F1 key. F10 F10 key. F11 F11 key. F12 F12 key. F13 F13 key. F14 F14 key. F15 F15 key. F16 F16 key. F17 F17 key. F18 F18 key. F19 F19 key. F2 F2 key. F20 F20 key. F21 F21 key. F22 F22 key. F23 F23 key. F24 F24 key. F3 F3 key. F4 F4 key. F5 F5 key. F6 F6 key. F7 F7 key. F8 F8 key. F9 F9 key. G G key. H H key. Help HELP key. Home HOME key. I I key. ImeConvert IME Convert key. ImeNoConvert IME NoConvert key. Insert INS key. J J key. K K key. Kana Kana key on Japanese keyboards. Kanji Kanji key on Japanese keyboards. L L key. LaunchApplication1 Start Application 1 key. LaunchApplication2 Start Application 2 key. LaunchMail Start Mail key. Left LEFT ARROW key. LeftAlt Left ALT key. LeftControl Left CONTROL key. LeftShift Left SHIFT key. LeftWindows Left Windows key. M M key. MediaNextTrack Next Track key. MediaPlayPause Play/Pause Media key. MediaPreviousTrack Previous Track key. MediaStop Stop Media key. Multiply Multiply key. N N key. None Reserved. NumLock NUM LOCK key. NumPad0 Numeric keypad 0 key. NumPad1 Numeric keypad 1 key. NumPad2 Numeric keypad 2 key. NumPad3 Numeric keypad 3 key. NumPad4 Numeric keypad 4 key. NumPad5 Numeric keypad 5 key. NumPad6 Numeric keypad 6 key. NumPad7 Numeric keypad 7 key. NumPad8 Numeric keypad 8 key. NumPad9 Numeric keypad 9 key. O O key. Oem8 Used for miscellaneous characters; it can vary by keyboard. OemAuto OEM Auto key. OemBackslash The OEM angle bracket or backslash key on the RT 102 key keyboard. OemClear CLEAR key. OemCloseBrackets The OEM close bracket key on a US standard keyboard. OemComma For any country/region, the ',' key. OemCopy OEM Copy key. OemEnlW OEM Enlarge Window key. OemMinus For any country/region, the '-' key. OemOpenBrackets The OEM open bracket key on a US standard keyboard. OemPeriod For any country/region, the '.' key. OemPipe The OEM pipe key on a US standard keyboard. OemPlus For any country/region, the '+' key. OemQuestion The OEM question mark key on a US standard keyboard. OemQuotes The OEM singled/double quote key on a US standard keyboard. OemSemicolon The OEM Semicolon key on a US standard keyboard. OemTilde The OEM tilde key on a US standard keyboard. P P key. Pa1 PA1 key. PageDown PAGE DOWN key. PageUp PAGE UP key. Pause PAUSE key. Play Play key. Print PRINT key. PrintScreen PRINT SCREEN key. ProcessKey IME PROCESS key. Q Q key. R R key. Right RIGHT ARROW key. RightAlt Right ALT key. RightControl Right CONTROL key. RightShift Right SHIFT key. RightWindows Right Windows key. S S key. Scroll SCROLL LOCK key. Select SELECT key. SelectMedia Select Media key. Separator Separator key. Sleep Computer Sleep key. Space SPACEBAR key. Subtract Subtract key. T T key. Tab TAB key. U U key. Up UP ARROW key. V V key. VolumeDown Volume Down key. VolumeMute Volume Mute key. VolumeUp Volume Up key. W W key. X X key. Y Y key. Z Z key. Zoom Zoom key."
  },
  "_api/Microsoft.Xna.Framework.Input.KeyboardState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.KeyboardState.html",
    "title": "Struct KeyboardState | MonoGame Documentation",
    "keywords": "Struct KeyboardState Holds the state of keystrokes by a keyboard. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct KeyboardState Constructors | Improve this Doc View Source KeyboardState(Keys[]) Initializes a new instance of the KeyboardState class. Declaration public KeyboardState(params Keys[] keys) Parameters Type Name Description Keys [] keys List of keys to be flagged as pressed on initialization. | Improve this Doc View Source KeyboardState(Keys[], Boolean, Boolean) Initializes a new instance of the KeyboardState class. Declaration public KeyboardState(Keys[] keys, bool capsLock = false, bool numLock = false) Parameters Type Name Description Keys [] keys List of keys to be flagged as pressed on initialization. System.Boolean capsLock Caps Lock state. System.Boolean numLock Num Lock state. Properties | Improve this Doc View Source CapsLock Gets the current state of the Caps Lock key. Declaration public bool CapsLock { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Keys] Returns the state of a specified key. Declaration public KeyState this[Keys key] { get; } Parameters Type Name Description Keys key The key to query. Property Value Type Description KeyState The state of the key. | Improve this Doc View Source NumLock Gets the current state of the Num Lock key. Declaration public bool NumLock { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Compares whether current instance is equal to specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The KeyboardState to compare. Returns Type Description System.Boolean true if the provided KeyboardState instance is same with current; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code for KeyboardState instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code of the object. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetPressedKeys() Returns an array of values holding keys that are currently being pressed. Declaration public Keys[] GetPressedKeys() Returns Type Description Keys [] The keys that are currently being pressed. | Improve this Doc View Source IsKeyDown(Keys) Gets whether given key is currently being pressed. Declaration public bool IsKeyDown(Keys key) Parameters Type Name Description Keys key The key to query. Returns Type Description System.Boolean true if the key is pressed; false otherwise. | Improve this Doc View Source IsKeyUp(Keys) Gets whether given key is currently being not pressed. Declaration public bool IsKeyUp(Keys key) Parameters Type Name Description Keys key The key to query. Returns Type Description System.Boolean true if the key is not pressed; false otherwise. Operators | Improve this Doc View Source Equality(KeyboardState, KeyboardState) Compares whether two KeyboardState instances are equal. Declaration public static bool operator ==(KeyboardState a, KeyboardState b) Parameters Type Name Description KeyboardState a KeyboardState instance to the left of the equality operator. KeyboardState b KeyboardState instance to the right of the equality operator. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(KeyboardState, KeyboardState) Compares whether two KeyboardState instances are not equal. Declaration public static bool operator !=(KeyboardState a, KeyboardState b) Parameters Type Name Description KeyboardState a KeyboardState instance to the left of the inequality operator. KeyboardState b KeyboardState instance to the right of the inequality operator. Returns Type Description System.Boolean true if the instances are different; false otherwise."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.html",
    "title": "Struct VertexPositionNormalTexture | MonoGame Documentation",
    "keywords": "Struct VertexPositionNormalTexture Implements IVertexType Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct VertexPositionNormalTexture : IVertexType Constructors | Improve this Doc View Source VertexPositionNormalTexture(Vector3, Vector3, Vector2) Declaration public VertexPositionNormalTexture(Vector3 position, Vector3 normal, Vector2 textureCoordinate) Parameters Type Name Description Vector3 position Vector3 normal Vector2 textureCoordinate Fields | Improve this Doc View Source Normal Declaration public Vector3 Normal Field Value Type Description Vector3 | Improve this Doc View Source Position Declaration public Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source TextureCoordinate Declaration public Vector2 TextureCoordinate Field Value Type Description Vector2 | Improve this Doc View Source VertexDeclaration Declaration public static readonly VertexDeclaration VertexDeclaration Field Value Type Description VertexDeclaration Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(VertexPositionNormalTexture, VertexPositionNormalTexture) Declaration public static bool operator ==(VertexPositionNormalTexture left, VertexPositionNormalTexture right) Parameters Type Name Description VertexPositionNormalTexture left VertexPositionNormalTexture right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(VertexPositionNormalTexture, VertexPositionNormalTexture) Declaration public static bool operator !=(VertexPositionNormalTexture left, VertexPositionNormalTexture right) Parameters Type Name Description VertexPositionNormalTexture left VertexPositionNormalTexture right Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IVertexType.VertexDeclaration Declaration VertexDeclaration IVertexType.VertexDeclaration { get; } Returns Type Description VertexDeclaration Implements IVertexType"
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.html",
    "title": "Struct VertexPositionColorTexture | MonoGame Documentation",
    "keywords": "Struct VertexPositionColorTexture Implements IVertexType Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct VertexPositionColorTexture : IVertexType Constructors | Improve this Doc View Source VertexPositionColorTexture(Vector3, Color, Vector2) Declaration public VertexPositionColorTexture(Vector3 position, Color color, Vector2 textureCoordinate) Parameters Type Name Description Vector3 position Color color Vector2 textureCoordinate Fields | Improve this Doc View Source Color Declaration public Color Color Field Value Type Description Color | Improve this Doc View Source Position Declaration public Vector3 Position Field Value Type Description Vector3 | Improve this Doc View Source TextureCoordinate Declaration public Vector2 TextureCoordinate Field Value Type Description Vector2 | Improve this Doc View Source VertexDeclaration Declaration public static readonly VertexDeclaration VertexDeclaration Field Value Type Description VertexDeclaration Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(VertexPositionColorTexture, VertexPositionColorTexture) Declaration public static bool operator ==(VertexPositionColorTexture left, VertexPositionColorTexture right) Parameters Type Name Description VertexPositionColorTexture left VertexPositionColorTexture right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(VertexPositionColorTexture, VertexPositionColorTexture) Declaration public static bool operator !=(VertexPositionColorTexture left, VertexPositionColorTexture right) Parameters Type Name Description VertexPositionColorTexture left VertexPositionColorTexture right Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IVertexType.VertexDeclaration Declaration VertexDeclaration IVertexType.VertexDeclaration { get; } Returns Type Description VertexDeclaration Implements IVertexType"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Texture2D.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Texture2D.html",
    "title": "Class Texture2D | MonoGame Documentation",
    "keywords": "Class Texture2D Inheritance System.Object GraphicsResource Texture Texture2D RenderTarget2D Implements System.IDisposable Inherited Members Texture.Format Texture.LevelCount Texture.GraphicsDeviceResetting() Texture.GetSharedHandle() Texture.CreateShaderResourceView() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class Texture2D : Texture, IDisposable Constructors | Improve this Doc View Source Texture2D(GraphicsDevice, Int32, Int32) Creates a new texture of the given size Declaration public Texture2D(GraphicsDevice graphicsDevice, int width, int height) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height | Improve this Doc View Source Texture2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat) Creates a new texture of a given size with a surface format and optional mipmaps Declaration public Texture2D(GraphicsDevice graphicsDevice, int width, int height, bool mipmap, SurfaceFormat format) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipmap SurfaceFormat format | Improve this Doc View Source Texture2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, Texture2D.SurfaceType, Boolean, Int32) Declaration protected Texture2D(GraphicsDevice graphicsDevice, int width, int height, bool mipmap, SurfaceFormat format, Texture2D.SurfaceType type, bool shared, int arraySize) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipmap SurfaceFormat format Texture2D.SurfaceType type System.Boolean shared System.Int32 arraySize | Improve this Doc View Source Texture2D(GraphicsDevice, Int32, Int32, Boolean, SurfaceFormat, Int32) Creates a new texture array of a given size with a surface format and optional mipmaps. Throws ArgumentException if the current GraphicsDevice can't work with texture arrays Declaration public Texture2D(GraphicsDevice graphicsDevice, int width, int height, bool mipmap, SurfaceFormat format, int arraySize) Parameters Type Name Description GraphicsDevice graphicsDevice System.Int32 width System.Int32 height System.Boolean mipmap SurfaceFormat format System.Int32 arraySize Properties | Improve this Doc View Source Bounds Gets the dimensions of the texture Declaration public Rectangle Bounds { get; } Property Value Type Description Rectangle | Improve this Doc View Source Height Gets the height of the texture in pixels. Declaration public int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Mipmap Declaration protected bool Mipmap { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SampleDescription Declaration protected SampleDescription SampleDescription { get; } Property Value Type Description SharpDX.DXGI.SampleDescription | Improve this Doc View Source Shared Declaration protected bool Shared { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Width Gets the width of the texture in pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CreateSampleDescription() Declaration protected virtual SampleDescription CreateSampleDescription() Returns Type Description SharpDX.DXGI.SampleDescription | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Texture.Dispose(Boolean) | Improve this Doc View Source FromStream(GraphicsDevice, Stream) Creates a Texture2D from a stream, supported formats bmp, gif, jpg, png, tif and dds (only for simple textures). May work with other formats, but will not work with tga files. Declaration public static Texture2D FromStream(GraphicsDevice graphicsDevice, Stream stream) Parameters Type Name Description GraphicsDevice graphicsDevice The graphics device where the texture will be created. System.IO.Stream stream The stream from which to read the image data. Returns Type Description Texture2D The Color texture created from the image stream. Remarks Note that different image decoders may generate slight differences between platforms, but perceptually the images should be identical. This call does not premultiply the image alpha, but areas of zero alpha will result in black color data. | Improve this Doc View Source GetData<T>(T[]) Retrieves the contents of the texture Throws ArgumentException if data is null, data.length is too short or if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays Declaration public void GetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Destination array for the texture data Type Parameters Name Description T | Improve this Doc View Source GetData<T>(T[], Int32, Int32) Retrieves the contents of the texture Throws ArgumentException if data is null, data.length is too short or if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays Declaration public void GetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data Destination array for the texture data System.Int32 startIndex First position in data where to write the pixel data System.Int32 elementCount Number of pixels to read Type Parameters Name Description T | Improve this Doc View Source GetData<T>(Int32, Int32, Nullable<Rectangle>, T[], Int32, Int32) Retrieves the contents of the texture Throws ArgumentException if data is null, data.length is too short or if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays Declaration public void GetData<T>(int level, int arraySlice, Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 level Layer of the texture System.Int32 arraySlice Index inside the texture array System.Nullable < Rectangle > rect Area of the texture to retrieve T[] data Destination array for the data System.Int32 startIndex Starting index of data where to write the pixel data System.Int32 elementCount Number of pixels to read Type Parameters Name Description T | Improve this Doc View Source GetData<T>(Int32, Nullable<Rectangle>, T[], Int32, Int32) Retrieves the contents of the texture Throws ArgumentException if data is null, data.length is too short or if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays Declaration public void GetData<T>(int level, Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 level Layer of the texture System.Nullable < Rectangle > rect Area of the texture T[] data Destination array for the texture data System.Int32 startIndex First position in data where to write the pixel data System.Int32 elementCount Number of pixels to read Type Parameters Name Description T | Improve this Doc View Source GetTexture2DDescription() Declaration protected virtual Texture2DDescription GetTexture2DDescription() Returns Type Description SharpDX.Direct3D11.Texture2DDescription | Improve this Doc View Source Reload(Stream) Declaration public void Reload(Stream textureStream) Parameters Type Name Description System.IO.Stream textureStream | Improve this Doc View Source SaveAsJpeg(Stream, Int32, Int32) Converts the texture to a JPG image Declaration public void SaveAsJpeg(Stream stream, int width, int height) Parameters Type Name Description System.IO.Stream stream Destination for the image System.Int32 width System.Int32 height | Improve this Doc View Source SaveAsPng(Stream, Int32, Int32) Converts the texture to a PNG image Declaration public void SaveAsPng(Stream stream, int width, int height) Parameters Type Name Description System.IO.Stream stream Destination for the image System.Int32 width System.Int32 height | Improve this Doc View Source SetData<T>(T[]) Changes the texture's pixels Declaration public void SetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T New data for the texture | Improve this Doc View Source SetData<T>(T[], Int32, Int32) Changes the texture's pixels Declaration public void SetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data New data for the texture System.Int32 startIndex Start position of data System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetData<T>(Int32, Int32, Nullable<Rectangle>, T[], Int32, Int32) Changes the pixels of the texture Throws ArgumentNullException if data is null Throws ArgumentException if arraySlice is greater than 0, and the GraphicsDevice does not support texture arrays Declaration public void SetData<T>(int level, int arraySlice, Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 level Layer of the texture to modify System.Int32 arraySlice Index inside the texture array System.Nullable < Rectangle > rect Area to modify T[] data New data for the texture System.Int32 startIndex Start position of data System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source SetData<T>(Int32, Nullable<Rectangle>, T[], Int32, Int32) Changes the pixels of the texture Declaration public void SetData<T>(int level, Rectangle? rect, T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description System.Int32 level Layer of the texture to modify System.Nullable < Rectangle > rect Area to modify T[] data New data for the texture System.Int32 startIndex Start position of data System.Int32 elementCount Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Texture2D.SurfaceType.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Texture2D.SurfaceType.html",
    "title": "Enum Texture2D.SurfaceType | MonoGame Documentation",
    "keywords": "Enum Texture2D.SurfaceType Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax protected enum SurfaceType Fields Name Description RenderTarget SwapChainRenderTarget Texture"
  },
  "_api/Microsoft.Xna.Framework.Graphics.SamplerState.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SamplerState.html",
    "title": "Class SamplerState | MonoGame Documentation",
    "keywords": "Class SamplerState Inheritance System.Object GraphicsResource SamplerState Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class SamplerState : GraphicsResource, IDisposable Constructors | Improve this Doc View Source SamplerState() Declaration public SamplerState() Fields | Improve this Doc View Source AnisotropicClamp Declaration public static readonly SamplerState AnisotropicClamp Field Value Type Description SamplerState | Improve this Doc View Source AnisotropicWrap Declaration public static readonly SamplerState AnisotropicWrap Field Value Type Description SamplerState | Improve this Doc View Source LinearClamp Declaration public static readonly SamplerState LinearClamp Field Value Type Description SamplerState | Improve this Doc View Source LinearWrap Declaration public static readonly SamplerState LinearWrap Field Value Type Description SamplerState | Improve this Doc View Source PointClamp Declaration public static readonly SamplerState PointClamp Field Value Type Description SamplerState | Improve this Doc View Source PointWrap Declaration public static readonly SamplerState PointWrap Field Value Type Description SamplerState Properties | Improve this Doc View Source AddressU Declaration public TextureAddressMode AddressU { get; set; } Property Value Type Description TextureAddressMode | Improve this Doc View Source AddressV Declaration public TextureAddressMode AddressV { get; set; } Property Value Type Description TextureAddressMode | Improve this Doc View Source AddressW Declaration public TextureAddressMode AddressW { get; set; } Property Value Type Description TextureAddressMode | Improve this Doc View Source BorderColor Declaration public Color BorderColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ComparisonFunction When using comparison sampling, also set FilterMode to Comparison . Declaration public CompareFunction ComparisonFunction { get; set; } Property Value Type Description CompareFunction | Improve this Doc View Source Filter Declaration public TextureFilter Filter { get; set; } Property Value Type Description TextureFilter | Improve this Doc View Source FilterMode Declaration public TextureFilterMode FilterMode { get; set; } Property Value Type Description TextureFilterMode | Improve this Doc View Source MaxAnisotropy Declaration public int MaxAnisotropy { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxMipLevel Declaration public int MaxMipLevel { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MipMapLevelOfDetailBias Declaration public float MipMapLevelOfDetailBias { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.html",
    "title": "Class ResourceDestroyedEventArgs | MonoGame Documentation",
    "keywords": "Class ResourceDestroyedEventArgs Inheritance System.Object System.EventArgs ResourceDestroyedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ResourceDestroyedEventArgs : EventArgs Properties | Improve this Doc View Source Name The name of the destroyed resource. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Tag The resource manager tag of the destroyed resource. Declaration public object Tag { get; } Property Value Type Description System.Object"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.html",
    "title": "Struct Rgba1010102 | MonoGame Documentation",
    "keywords": "Struct Rgba1010102 Packed vector type containing unsigned normalized values ranging from 0 to 1. The x, y and z components use 10 bits, and the w component uses 2 bits. Implements IPackedVector < System.UInt32 > System.IEquatable < Rgba1010102 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Rgba1010102 : IPackedVector<uint>, IEquatable<Rgba1010102>, IPackedVector Constructors | Improve this Doc View Source Rgba1010102(Vector4) Creates a new instance of Rgba1010102. Declaration public Rgba1010102(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components for the packed vector. | Improve this Doc View Source Rgba1010102(Single, Single, Single, Single) Creates a new instance of Rgba1010102. Declaration public Rgba1010102(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x component System.Single y The y component System.Single z The z component System.Single w The w component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(Rgba1010102) Compares another Rgba1010102 packed vector with the packed vector. Declaration public bool Equals(Rgba1010102 other) Parameters Type Name Description Rgba1010102 other The Rgba1010102 packed vector to compare. Returns Type Description System.Boolean True if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean True if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Gets the packed vector in Vector4 format. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Operators | Improve this Doc View Source Equality(Rgba1010102, Rgba1010102) Declaration public static bool operator ==(Rgba1010102 lhs, Rgba1010102 rhs) Parameters Type Name Description Rgba1010102 lhs Rgba1010102 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Rgba1010102, Rgba1010102) Declaration public static bool operator !=(Rgba1010102 lhs, Rgba1010102 rhs) Parameters Type Name Description Rgba1010102 lhs Rgba1010102 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.html",
    "title": "Struct Rg32 | MonoGame Documentation",
    "keywords": "Struct Rg32 Packed vector type containing two 16-bit unsigned normalized values ranging from 0 to 1. Implements IPackedVector < System.UInt32 > System.IEquatable < Rg32 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Rg32 : IPackedVector<uint>, IEquatable<Rg32>, IPackedVector Constructors | Improve this Doc View Source Rg32(Vector2) Creates a new instance of Rg32. Declaration public Rg32(Vector2 vector) Parameters Type Name Description Vector2 vector Vector containing the components for the packed vector. | Improve this Doc View Source Rg32(Single, Single) Creates a new instance of Rg32. Declaration public Rg32(float x, float y) Parameters Type Name Description System.Single x The x component System.Single y The y component Properties | Improve this Doc View Source PackedValue Gets and sets the packed value. Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(Rg32) Compares another Rg32 packed vector with the packed vector. Declaration public bool Equals(Rg32 other) Parameters Type Name Description Rg32 other The Rg32 packed vector to compare. Returns Type Description System.Boolean True if the packed vectors are equal. | Improve this Doc View Source Equals(Object) Compares an object with the packed vector. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare. Returns Type Description System.Boolean True if the object is equal to the packed vector. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code of the packed vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 The hash code for the packed vector. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Gets a string representation of the packed vector. Declaration public override string ToString() Returns Type Description System.String A string representation of the packed vector. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector2() Gets the packed vector in Vector2 format. Declaration public Vector2 ToVector2() Returns Type Description Vector2 The packed vector in Vector2 format Operators | Improve this Doc View Source Equality(Rg32, Rg32) Declaration public static bool operator ==(Rg32 lhs, Rg32 rhs) Parameters Type Name Description Rg32 lhs Rg32 rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Rg32, Rg32) Declaration public static bool operator !=(Rg32 lhs, Rg32 rhs) Parameters Type Name Description Rg32 lhs Rg32 rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed vector from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector Vector containing the components. | Improve this Doc View Source IPackedVector.ToVector4() Gets the packed vector in Vector4 format. Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 The packed vector in Vector4 format Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.OcclusionQuery.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.OcclusionQuery.html",
    "title": "Class OcclusionQuery | MonoGame Documentation",
    "keywords": "Class OcclusionQuery Inheritance System.Object GraphicsResource OcclusionQuery Implements System.IDisposable Inherited Members GraphicsResource.GraphicsDeviceResetting() GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class OcclusionQuery : GraphicsResource, IDisposable Constructors | Improve this Doc View Source OcclusionQuery(GraphicsDevice) Initializes a new instance of the OcclusionQuery class. Declaration public OcclusionQuery(GraphicsDevice graphicsDevice) Parameters Type Name Description GraphicsDevice graphicsDevice The graphics device. Exceptions Type Condition System.ArgumentNullException graphicsDevice is null . System.NotSupportedException The current graphics profile does not support occlusion queries. Properties | Improve this Doc View Source IsComplete Gets a value indicating whether the occlusion query has completed. Declaration public bool IsComplete { get; } Property Value Type Description System.Boolean true if the occlusion query has completed; otherwise, false . | Improve this Doc View Source PixelCount Gets the number of visible pixels. Declaration public int PixelCount { get; } Property Value Type Description System.Int32 The number of visible pixels. Exceptions Type Condition System.InvalidOperationException The occlusion query has not yet completed. Check IsComplete before reading the result! Methods | Improve this Doc View Source Begin() Begins the occlusion query. Declaration public void Begin() Exceptions Type Condition System.InvalidOperationException Begin() is called again before calling End() . | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source End() Ends the occlusion query. Declaration public void End() Exceptions Type Condition System.InvalidOperationException End() is called before calling Begin() . Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException.html",
    "title": "Class NoSuitableGraphicsDeviceException | MonoGame Documentation",
    "keywords": "Class NoSuitableGraphicsDeviceException Inheritance System.Object System.Exception NoSuitableGraphicsDeviceException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax [DataContract] public sealed class NoSuitableGraphicsDeviceException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source NoSuitableGraphicsDeviceException() Declaration public NoSuitableGraphicsDeviceException() | Improve this Doc View Source NoSuitableGraphicsDeviceException(String) Declaration public NoSuitableGraphicsDeviceException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source NoSuitableGraphicsDeviceException(String, Exception) Declaration public NoSuitableGraphicsDeviceException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Graphics.IndexElementSize.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.IndexElementSize.html",
    "title": "Enum IndexElementSize | MonoGame Documentation",
    "keywords": "Enum IndexElementSize Defines size for index in IndexBuffer and DynamicIndexBuffer . Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum IndexElementSize Fields Name Description SixteenBits 16-bit short/ushort value been used. ThirtyTwoBits 32-bit int/uint value been used."
  },
  "_api/Microsoft.Xna.Framework.Media.MediaPlayer.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.MediaPlayer.html",
    "title": "Class MediaPlayer | MonoGame Documentation",
    "keywords": "Class MediaPlayer Inheritance System.Object MediaPlayer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public static class MediaPlayer Properties | Improve this Doc View Source GameHasControl Declaration public static bool GameHasControl { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsMuted Declaration public static bool IsMuted { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRepeating Declaration public static bool IsRepeating { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsShuffled Declaration public static bool IsShuffled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVisualizationEnabled Declaration public static bool IsVisualizationEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source PlayPosition Declaration public static TimeSpan PlayPosition { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Queue Declaration public static MediaQueue Queue { get; } Property Value Type Description MediaQueue | Improve this Doc View Source State Declaration public static MediaState State { get; } Property Value Type Description MediaState | Improve this Doc View Source Volume Declaration public static float Volume { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source MoveNext() Declaration public static void MoveNext() | Improve this Doc View Source MovePrevious() Declaration public static void MovePrevious() | Improve this Doc View Source Pause() Declaration public static void Pause() | Improve this Doc View Source Play(Song) Play clears the current playback queue, and then queues up the specified song for playback. Playback starts immediately at the beginning of the song. Declaration public static void Play(Song song) Parameters Type Name Description Song song | Improve this Doc View Source Play(Song, Nullable<TimeSpan>) Play clears the current playback queue, and then queues up the specified song for playback. Playback starts immediately at the given position of the song. Declaration public static void Play(Song song, TimeSpan? startPosition) Parameters Type Name Description Song song System.Nullable < System.TimeSpan > startPosition | Improve this Doc View Source Play(SongCollection, Int32) Declaration public static void Play(SongCollection collection, int index = 0) Parameters Type Name Description SongCollection collection System.Int32 index | Improve this Doc View Source Resume() Declaration public static void Resume() | Improve this Doc View Source Stop() Declaration public static void Stop() Events | Improve this Doc View Source ActiveSongChanged Declaration public static event EventHandler<EventArgs> ActiveSongChanged Event Type Type Description System.EventHandler < System.EventArgs > | Improve this Doc View Source MediaStateChanged Declaration public static event EventHandler<EventArgs> MediaStateChanged Event Type Type Description System.EventHandler < System.EventArgs >"
  },
  "_api/Microsoft.Xna.Framework.Media.MediaLibrary.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.MediaLibrary.html",
    "title": "Class MediaLibrary | MonoGame Documentation",
    "keywords": "Class MediaLibrary Inheritance System.Object MediaLibrary Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public class MediaLibrary : IDisposable Constructors | Improve this Doc View Source MediaLibrary() Declaration public MediaLibrary() | Improve this Doc View Source MediaLibrary(MediaSource) Declaration public MediaLibrary(MediaSource mediaSource) Parameters Type Name Description MediaSource mediaSource Properties | Improve this Doc View Source Albums Declaration public AlbumCollection Albums { get; } Property Value Type Description AlbumCollection | Improve this Doc View Source IsDisposed Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MediaSource Declaration public MediaSource MediaSource { get; } Property Value Type Description MediaSource | Improve this Doc View Source Songs Declaration public SongCollection Songs { get; } Property Value Type Description SongCollection Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Load(Action<Int32>) Load the contents of MediaLibrary. This blocking call might take up to a few minutes depending on the platform and the size of the user's music library. Declaration public void Load(Action<int> progressCallback = null) Parameters Type Name Description System.Action < System.Int32 > progressCallback Callback that reports back the progress of the music library loading in percents (0-100). Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Media.Genre.html": {
    "href": "_api/Microsoft.Xna.Framework.Media.Genre.html",
    "title": "Class Genre | MonoGame Documentation",
    "keywords": "Class Genre Inheritance System.Object Genre Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Media Assembly : MonoGame.Framework.dll Syntax public sealed class Genre : IDisposable Constructors | Improve this Doc View Source Genre(String) Declaration public Genre(string genre) Parameters Type Name Description System.String genre Properties | Improve this Doc View Source Albums Gets the AlbumCollection for the Genre. Declaration public AlbumCollection Albums { get; } Property Value Type Description AlbumCollection | Improve this Doc View Source IsDisposed Gets a value indicating whether the object is disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the Genre. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Songs Gets the SongCollection for the Genre. Declaration public SongCollection Songs { get; } Property Value Type Description SongCollection Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source GetHashCode() Gets the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Returns a String representation of the Genre. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Input.GamePadButtons.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePadButtons.html",
    "title": "Struct GamePadButtons | MonoGame Documentation",
    "keywords": "Struct GamePadButtons A struct that represents the current button states for the controller. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public struct GamePadButtons Constructors | Improve this Doc View Source GamePadButtons(Buttons) Declaration public GamePadButtons(Buttons buttons) Parameters Type Name Description Buttons buttons Properties | Improve this Doc View Source A Gets a value indicating if the button A is pressed. Declaration public ButtonState A { get; } Property Value Type Description ButtonState Pressed if the button A is pressed; otherwise, Released . | Improve this Doc View Source B Gets a value indicating if the button B is pressed. Declaration public ButtonState B { get; } Property Value Type Description ButtonState Pressed if the button B is pressed; otherwise, Released . | Improve this Doc View Source Back Gets a value indicating if the button Back is pressed. Declaration public ButtonState Back { get; } Property Value Type Description ButtonState Pressed if the button Back is pressed; otherwise, Released . | Improve this Doc View Source BigButton Gets a value indicating if the guide button is pressed. Declaration public ButtonState BigButton { get; } Property Value Type Description ButtonState Pressed if the guide button is pressed; otherwise, Released . | Improve this Doc View Source LeftShoulder Gets a value indicating if the left shoulder button is pressed. Declaration public ButtonState LeftShoulder { get; } Property Value Type Description ButtonState Pressed if the left shoulder button is pressed; otherwise, Released . | Improve this Doc View Source LeftStick Gets a value indicating if the left stick button is pressed. Declaration public ButtonState LeftStick { get; } Property Value Type Description ButtonState Pressed if the left stick button is pressed; otherwise, Released . | Improve this Doc View Source RightShoulder Gets a value indicating if the right shoulder button is pressed. Declaration public ButtonState RightShoulder { get; } Property Value Type Description ButtonState Pressed if the right shoulder button is pressed; otherwise, Released . | Improve this Doc View Source RightStick Gets a value indicating if the right stick button is pressed. Declaration public ButtonState RightStick { get; } Property Value Type Description ButtonState Pressed if the right stick button is pressed; otherwise, Released . | Improve this Doc View Source Start Gets a value indicating if the button Start is pressed. Declaration public ButtonState Start { get; } Property Value Type Description ButtonState Pressed if the button Start is pressed; otherwise, Released . | Improve this Doc View Source X Gets a value indicating if the button X is pressed. Declaration public ButtonState X { get; } Property Value Type Description ButtonState Pressed if the button X is pressed; otherwise, Released . | Improve this Doc View Source Y Gets a value indicating if the button Y is pressed. Declaration public ButtonState Y { get; } Property Value Type Description ButtonState Pressed if the button Y is pressed; otherwise, Released . Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An object to compare to this instance. Returns Type Description System.Boolean true if obj is a GamePadButtons and has the same value as this instance; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a GamePadButtons object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current GamePadButtons . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current GamePadButtons . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(GamePadButtons, GamePadButtons) Determines whether two specified instances of GamePadButtons are equal. Declaration public static bool operator ==(GamePadButtons left, GamePadButtons right) Parameters Type Name Description GamePadButtons left The first object to compare. GamePadButtons right The second object to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false. | Improve this Doc View Source Inequality(GamePadButtons, GamePadButtons) Determines whether two specified instances of GamePadButtons are not equal. Declaration public static bool operator !=(GamePadButtons left, GamePadButtons right) Parameters Type Name Description GamePadButtons left The first object to compare. GamePadButtons right The second object to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false."
  },
  "_api/Microsoft.Xna.Framework.Input.GamePad.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.GamePad.html",
    "title": "Class GamePad | MonoGame Documentation",
    "keywords": "Class GamePad Supports querying the game controllers and setting the vibration motors. Inheritance System.Object GamePad Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public static class GamePad Properties | Improve this Doc View Source MaximumGamePadCount The maximum number of game pads supported on this system. Attempting to access a gamepad index higher than this number will result in an System.InvalidOperationException being thrown by the API. Declaration public static int MaximumGamePadCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetCapabilities(PlayerIndex) Returns the capabilites of the connected controller. Declaration public static GamePadCapabilities GetCapabilities(PlayerIndex playerIndex) Parameters Type Name Description PlayerIndex playerIndex Player index for the controller you want to query. Returns Type Description GamePadCapabilities The capabilites of the controller. | Improve this Doc View Source GetCapabilities(Int32) Returns the capabilites of the connected controller. Declaration public static GamePadCapabilities GetCapabilities(int index) Parameters Type Name Description System.Int32 index Index for the controller you want to query. Returns Type Description GamePadCapabilities The capabilites of the controller. | Improve this Doc View Source GetState(PlayerIndex) Gets the current state of a game pad controller with an independent axes dead zone. Declaration public static GamePadState GetState(PlayerIndex playerIndex) Parameters Type Name Description PlayerIndex playerIndex Player index for the controller you want to query. Returns Type Description GamePadState The state of the controller. | Improve this Doc View Source GetState(PlayerIndex, GamePadDeadZone) Gets the current state of a game pad controller, using a specified dead zone on analog stick positions. Declaration public static GamePadState GetState(PlayerIndex playerIndex, GamePadDeadZone deadZoneMode) Parameters Type Name Description PlayerIndex playerIndex Player index for the controller you want to query. GamePadDeadZone deadZoneMode Enumerated value that specifies what dead zone type to use. Returns Type Description GamePadState The state of the controller. | Improve this Doc View Source GetState(Int32) Gets the current state of a game pad controller with an independent axes dead zone. Declaration public static GamePadState GetState(int index) Parameters Type Name Description System.Int32 index Index for the controller you want to query. Returns Type Description GamePadState The state of the controller. | Improve this Doc View Source GetState(Int32, GamePadDeadZone) Gets the current state of a game pad controller, using a specified dead zone on analog stick positions. Declaration public static GamePadState GetState(int index, GamePadDeadZone deadZoneMode) Parameters Type Name Description System.Int32 index Index for the controller you want to query. GamePadDeadZone deadZoneMode Enumerated value that specifies what dead zone type to use. Returns Type Description GamePadState The state of the controller. | Improve this Doc View Source SetVibration(PlayerIndex, Single, Single) Sets the vibration motor speeds on the controller device if supported. Declaration public static bool SetVibration(PlayerIndex playerIndex, float leftMotor, float rightMotor) Parameters Type Name Description PlayerIndex playerIndex Player index that identifies the controller to set. System.Single leftMotor The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor. System.Single rightMotor The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor. Returns Type Description System.Boolean Returns true if the vibration motors were set. | Improve this Doc View Source SetVibration(Int32, Single, Single) Sets the vibration motor speeds on the controller device if supported. Declaration public static bool SetVibration(int index, float leftMotor, float rightMotor) Parameters Type Name Description System.Int32 index Index for the controller you want to query. System.Single leftMotor The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor. System.Single rightMotor The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor. Returns Type Description System.Boolean Returns true if the vibration motors were set."
  },
  "_api/Microsoft.Xna.Framework.Input.ButtonState.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.ButtonState.html",
    "title": "Enum ButtonState | MonoGame Documentation",
    "keywords": "Enum ButtonState Defines a button state for buttons of mouse, gamepad or joystick. Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax public enum ButtonState Fields Name Description Pressed The button is pressed. Released The button is released."
  },
  "_api/Microsoft.Xna.Framework.Input.Buttons.html": {
    "href": "_api/Microsoft.Xna.Framework.Input.Buttons.html",
    "title": "Enum Buttons | MonoGame Documentation",
    "keywords": "Enum Buttons Defines the buttons on gamepad. Namespace : Microsoft.Xna.Framework.Input Assembly : MonoGame.Framework.dll Syntax [Flags] public enum Buttons Fields Name Description A A button. B B button. Back BACK button. BigButton Big button. DPadDown Directional pad down. DPadLeft Directional pad left. DPadRight Directional pad right. DPadUp Directional pad up. LeftShoulder Left bumper (shoulder) button. LeftStick Left stick button (pressing the left stick). LeftThumbstickDown Left stick is towards down. LeftThumbstickLeft Left stick is towards the left. LeftThumbstickRight Left stick is towards the right. LeftThumbstickUp Left stick is towards up. LeftTrigger Left trigger. RightShoulder Right bumper (shoulder) button. RightStick Right stick button (pressing the right stick). RightThumbstickDown Right stick is towards down. RightThumbstickLeft Right stick is towards the left. RightThumbstickRight Right stick is towards the right. RightThumbstickUp Right stick is towards up. RightTrigger Right trigger. Start START button. X X button. Y Y button."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexBufferBinding.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexBufferBinding.html",
    "title": "Struct VertexBufferBinding | MonoGame Documentation",
    "keywords": "Struct VertexBufferBinding Defines how a vertex buffer is bound to the graphics device for rendering. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct VertexBufferBinding Constructors | Improve this Doc View Source VertexBufferBinding(VertexBuffer) Creates an instance of VertexBufferBinding . Declaration public VertexBufferBinding(VertexBuffer vertexBuffer) Parameters Type Name Description VertexBuffer vertexBuffer The vertex buffer to bind. | Improve this Doc View Source VertexBufferBinding(VertexBuffer, Int32) Creates an instance of VertexBufferBinding . Declaration public VertexBufferBinding(VertexBuffer vertexBuffer, int vertexOffset) Parameters Type Name Description VertexBuffer vertexBuffer The vertex buffer to bind. System.Int32 vertexOffset The index of the first vertex in the vertex buffer to use. | Improve this Doc View Source VertexBufferBinding(VertexBuffer, Int32, Int32) Creates an instance of VertexBufferBinding. Declaration public VertexBufferBinding(VertexBuffer vertexBuffer, int vertexOffset, int instanceFrequency) Parameters Type Name Description VertexBuffer vertexBuffer The vertex buffer to bind. System.Int32 vertexOffset The index of the first vertex in the vertex buffer to use. System.Int32 instanceFrequency The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data and greater than 0 for per-instance data. Exceptions Type Condition System.ArgumentNullException vertexBuffer is null . System.ArgumentOutOfRangeException vertexOffset or instanceFrequency is invalid. Properties | Improve this Doc View Source InstanceFrequency Gets the number of instances to draw using the same per-instance data before advancing in the buffer by one element. Declaration public int InstanceFrequency { get; } Property Value Type Description System.Int32 The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data and greater than 0 for per-instance data. | Improve this Doc View Source VertexBuffer Gets the vertex buffer. Declaration public VertexBuffer VertexBuffer { get; } Property Value Type Description VertexBuffer The vertex buffer. | Improve this Doc View Source VertexOffset Gets the index of the first vertex in the vertex buffer to use. Declaration public int VertexOffset { get; } Property Value Type Description System.Int32 The index of the first vertex in the vertex buffer to use."
  },
  "_api/Microsoft.Xna.Framework.Graphics.VertexBuffer.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.VertexBuffer.html",
    "title": "Class VertexBuffer | MonoGame Documentation",
    "keywords": "Class VertexBuffer Inheritance System.Object GraphicsResource VertexBuffer DynamicVertexBuffer Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class VertexBuffer : GraphicsResource, IDisposable Constructors | Improve this Doc View Source VertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage) Declaration public VertexBuffer(GraphicsDevice graphicsDevice, VertexDeclaration vertexDeclaration, int vertexCount, BufferUsage bufferUsage) Parameters Type Name Description GraphicsDevice graphicsDevice VertexDeclaration vertexDeclaration System.Int32 vertexCount BufferUsage bufferUsage | Improve this Doc View Source VertexBuffer(GraphicsDevice, VertexDeclaration, Int32, BufferUsage, Boolean) Declaration protected VertexBuffer(GraphicsDevice graphicsDevice, VertexDeclaration vertexDeclaration, int vertexCount, BufferUsage bufferUsage, bool dynamic) Parameters Type Name Description GraphicsDevice graphicsDevice VertexDeclaration vertexDeclaration System.Int32 vertexCount BufferUsage bufferUsage System.Boolean dynamic | Improve this Doc View Source VertexBuffer(GraphicsDevice, Type, Int32, BufferUsage) Declaration public VertexBuffer(GraphicsDevice graphicsDevice, Type type, int vertexCount, BufferUsage bufferUsage) Parameters Type Name Description GraphicsDevice graphicsDevice System.Type type System.Int32 vertexCount BufferUsage bufferUsage Properties | Improve this Doc View Source BufferUsage Declaration public BufferUsage BufferUsage { get; } Property Value Type Description BufferUsage | Improve this Doc View Source VertexCount Declaration public int VertexCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VertexDeclaration Declaration public VertexDeclaration VertexDeclaration { get; } Property Value Type Description VertexDeclaration Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GetData<T>(T[]) Declaration public void GetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Type Parameters Name Description T | Improve this Doc View Source GetData<T>(T[], Int32, Int32) Declaration public void GetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data System.Int32 startIndex System.Int32 elementCount Type Parameters Name Description T | Improve this Doc View Source GetData<T>(Int32, T[], Int32, Int32, Int32) Get the vertex data froom this VertexBuffer. Declaration public void GetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride = 0)where T : struct Parameters Type Name Description System.Int32 offsetInBytes The offset to the first element in the vertex buffer in bytes. T[] data An array of T's to be filled. System.Int32 startIndex The index to start filling the data array. System.Int32 elementCount The number of T's to get. System.Int32 vertexStride The size of how a vertex buffer element should be interpreted. Type Parameters Name Description T The struct you want to fill. Remarks Note that this pulls data from VRAM into main memory and because of that is a very expensive operation. It is often a better idea to keep a copy of the data in main memory. | Improve this Doc View Source GraphicsDeviceResetting() The GraphicsDevice is resetting, so GPU resources must be recreated. Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() | Improve this Doc View Source SetData<T>(T[]) Sets the vertex buffer data. This is the same as calling SetData<T>(Int32, T[], Int32, Int32, Int32) with offsetInBytes and startIndex equal to 0 , elementCount equal to data.Length , and vertexStride equal to sizeof(T) . Declaration public void SetData<T>(T[] data)where T : struct Parameters Type Name Description T[] data Data array. Type Parameters Name Description T Type of elements in the data array. | Improve this Doc View Source SetData<T>(T[], Int32, Int32) Sets the vertex buffer data, specifying the index at which to start copying from the source data array, and the number of elements to copy from the source data array. This is the same as calling SetData<T>(Int32, T[], Int32, Int32, Int32) with offsetInBytes equal to 0 , and vertexStride equal to sizeof(T) . Declaration public void SetData<T>(T[] data, int startIndex, int elementCount)where T : struct Parameters Type Name Description T[] data Data array. System.Int32 startIndex Index at which to start copying from data . Must be within the data array bounds. System.Int32 elementCount Number of elements to copy from data . The combination of startIndex and elementCount must be within the data array bounds. Type Parameters Name Description T Type of elements in the data array. | Improve this Doc View Source SetData<T>(Int32, T[], Int32, Int32, Int32) Sets the vertex buffer data, specifying the index at which to start copying from the source data array, the number of elements to copy from the source data array, and how far apart elements from the source data array should be when they are copied into the vertex buffer. Declaration public void SetData<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride)where T : struct Parameters Type Name Description System.Int32 offsetInBytes Offset in bytes from the beginning of the vertex buffer to the start of the copied data. T[] data Data array. System.Int32 startIndex Index at which to start copying from data . Must be within the data array bounds. System.Int32 elementCount Number of elements to copy from data . The combination of startIndex and elementCount must be within the data array bounds. System.Int32 vertexStride Specifies how far apart, in bytes, elements from data should be when they are copied into the vertex buffer. In almost all cases this should be sizeof(T) , to create a tightly-packed vertex buffer. If you specify sizeof(T) , elements from data will be copied into the vertex buffer with no padding between each element. If you specify a value greater than sizeof(T) , elements from data will be copied into the vertex buffer with padding between each element. If you specify 0 for this parameter, it will be treated as if you had specified sizeof(T) . With the exception of 0 , you must specify a value greater than or equal to sizeof(T) . Type Parameters Name Description T Type of elements in the data array. Remarks If T is VertexPositionTexture , but you want to set only the position component of the vertex data, you would call this method as follows: Vector3[] positions = new Vector3[numVertices]; vertexBuffer.SetData(0, positions, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride); Continuing from the previous example, if you want to set only the texture coordinate component of the vertex data, you would call this method as follows (note the use of offsetInBytes : Vector2[] texCoords = new Vector2[numVertices]; vertexBuffer.SetData(12, texCoords, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride); | Improve this Doc View Source SetDataInternal<T>(Int32, T[], Int32, Int32, Int32, SetDataOptions) Declaration protected void SetDataInternal<T>(int offsetInBytes, T[] data, int startIndex, int elementCount, int vertexStride, SetDataOptions options)where T : struct Parameters Type Name Description System.Int32 offsetInBytes T[] data System.Int32 startIndex System.Int32 elementCount System.Int32 vertexStride SetDataOptions options Type Parameters Name Description T Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.SpriteFont.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SpriteFont.html",
    "title": "Class SpriteFont | MonoGame Documentation",
    "keywords": "Class SpriteFont Inheritance System.Object SpriteFont Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class SpriteFont Properties | Improve this Doc View Source Characters Gets a collection of the characters in the font. Declaration public ReadOnlyCollection<char> Characters { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.Char > | Improve this Doc View Source DefaultCharacter Gets or sets the character that will be substituted when a given character is not included in the font. Declaration public char ? DefaultCharacter { get; set; } Property Value Type Description System.Nullable < System.Char > | Improve this Doc View Source LineSpacing Gets or sets the line spacing (the distance from baseline to baseline) of the font. Declaration public int LineSpacing { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Spacing Gets or sets the spacing (tracking) between characters in the font. Declaration public float Spacing { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Texture Gets the texture that this SpriteFont draws from. Declaration public Texture2D Texture { get; } Property Value Type Description Texture2D Remarks Can be used to implement custom rendering of a SpriteFont Methods | Improve this Doc View Source GetGlyphs() Returns a copy of the dictionary containing the glyphs in this SpriteFont. Declaration public Dictionary<char, SpriteFont.Glyph> GetGlyphs() Returns Type Description System.Collections.Generic.Dictionary < System.Char , SpriteFont.Glyph > A new Dictionary containing all of the glyphs inthis SpriteFont Remarks Can be used to calculate character bounds when implementing custom SpriteFont rendering. | Improve this Doc View Source MeasureString(String) Returns the size of a string when rendered in this font. Declaration public Vector2 MeasureString(string text) Parameters Type Name Description System.String text The text to measure. Returns Type Description Vector2 The size, in pixels, of 'text' when rendered in this font. | Improve this Doc View Source MeasureString(StringBuilder) Returns the size of the contents of a StringBuilder when rendered in this font. Declaration public Vector2 MeasureString(StringBuilder text) Parameters Type Name Description System.Text.StringBuilder text The text to measure. Returns Type Description Vector2 The size, in pixels, of 'text' when rendered in this font."
  },
  "_api/Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.html",
    "title": "Struct SpriteFont.Glyph | MonoGame Documentation",
    "keywords": "Struct SpriteFont.Glyph Struct that defines the spacing, Kerning, and bounds of a character. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct Glyph Remarks Provides the data necessary to implement custom SpriteFont rendering. Fields | Improve this Doc View Source BoundsInTexture Rectangle in the font texture where this letter exists. Declaration public Rectangle BoundsInTexture Field Value Type Description Rectangle | Improve this Doc View Source Character The char associated with this glyph. Declaration public char Character Field Value Type Description System.Char | Improve this Doc View Source Cropping Cropping applied to the BoundsInTexture to calculate the bounds of the actual character. Declaration public Rectangle Cropping Field Value Type Description Rectangle | Improve this Doc View Source Empty Declaration public static readonly SpriteFont.Glyph Empty Field Value Type Description SpriteFont.Glyph | Improve this Doc View Source LeftSideBearing The amount of space between the left side ofthe character and its first pixel in the X dimention. Declaration public float LeftSideBearing Field Value Type Description System.Single | Improve this Doc View Source RightSideBearing The amount of space between the right side of the character and its last pixel in the X dimention. Declaration public float RightSideBearing Field Value Type Description System.Single | Improve this Doc View Source Width Width of the character before kerning is applied. Declaration public float Width Field Value Type Description System.Single | Improve this Doc View Source WidthIncludingBearings Width of the character before kerning is applied. Declaration public float WidthIncludingBearings Field Value Type Description System.Single Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "_api/Microsoft.Xna.Framework.Graphics.RasterizerState.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.RasterizerState.html",
    "title": "Class RasterizerState | MonoGame Documentation",
    "keywords": "Class RasterizerState Inheritance System.Object GraphicsResource RasterizerState Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class RasterizerState : GraphicsResource, IDisposable Constructors | Improve this Doc View Source RasterizerState() Declaration public RasterizerState() Fields | Improve this Doc View Source CullClockwise Declaration public static readonly RasterizerState CullClockwise Field Value Type Description RasterizerState | Improve this Doc View Source CullCounterClockwise Declaration public static readonly RasterizerState CullCounterClockwise Field Value Type Description RasterizerState | Improve this Doc View Source CullNone Declaration public static readonly RasterizerState CullNone Field Value Type Description RasterizerState Properties | Improve this Doc View Source CullMode Declaration public CullMode CullMode { get; set; } Property Value Type Description CullMode | Improve this Doc View Source DepthBias Declaration public float DepthBias { get; set; } Property Value Type Description System.Single | Improve this Doc View Source DepthClipEnable Declaration public bool DepthClipEnable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FillMode Declaration public FillMode FillMode { get; set; } Property Value Type Description FillMode | Improve this Doc View Source MultiSampleAntiAlias Declaration public bool MultiSampleAntiAlias { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ScissorTestEnable Declaration public bool ScissorTestEnable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SlopeScaleDepthBias Declaration public float SlopeScaleDepthBias { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PrimitiveType.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PrimitiveType.html",
    "title": "Enum PrimitiveType | MonoGame Documentation",
    "keywords": "Enum PrimitiveType Defines how vertex data is ordered. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum PrimitiveType Fields Name Description LineList Renders the vertices as a list of isolated straight line segments; the count may be any positive integer. LineStrip Renders the vertices as a single polyline; the count may be any positive integer. TriangleList Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state. TriangleStrip Renders the vertices as a triangle strip. The back-face culling flag is flipped automatically on even-numbered triangles."
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.html",
    "title": "Struct HalfSingle | MonoGame Documentation",
    "keywords": "Struct HalfSingle Implements IPackedVector < System.UInt16 > System.IEquatable < HalfSingle > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct HalfSingle : IPackedVector<ushort>, IEquatable<HalfSingle>, IPackedVector Constructors | Improve this Doc View Source HalfSingle(Single) Declaration public HalfSingle(float single) Parameters Type Name Description System.Single single Properties | Improve this Doc View Source PackedValue Declaration [CLSCompliant(false)] public ushort PackedValue { get; set; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source Equals(HalfSingle) Declaration public bool Equals(HalfSingle other) Parameters Type Name Description HalfSingle other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToSingle() Declaration public float ToSingle() Returns Type Description System.Single | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(HalfSingle, HalfSingle) Declaration public static bool operator ==(HalfSingle lhs, HalfSingle rhs) Parameters Type Name Description HalfSingle lhs HalfSingle rhs Returns Type Description System.Boolean | Improve this Doc View Source Inequality(HalfSingle, HalfSingle) Declaration public static bool operator !=(HalfSingle lhs, HalfSingle rhs) Parameters Type Name Description HalfSingle lhs HalfSingle rhs Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector | Improve this Doc View Source IPackedVector.ToVector4() Declaration Vector4 IPackedVector.ToVector4() Returns Type Description Vector4 Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.html",
    "title": "Struct Byte4 | MonoGame Documentation",
    "keywords": "Struct Byte4 Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255. Implements IPackedVector < System.UInt32 > System.IEquatable < Byte4 > IPackedVector Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics.PackedVector Assembly : MonoGame.Framework.dll Syntax public struct Byte4 : IPackedVector<uint>, IEquatable<Byte4>, IPackedVector Constructors | Improve this Doc View Source Byte4(Vector4) Initializes a new instance of the Byte4 class. Declaration public Byte4(Vector4 vector) Parameters Type Name Description Vector4 vector A vector containing the initial values for the components of the Byte4 structure. | Improve this Doc View Source Byte4(Single, Single, Single, Single) Initializes a new instance of the Byte4 class. Declaration public Byte4(float x, float y, float z, float w) Parameters Type Name Description System.Single x Initial value for the x component. System.Single y Initial value for the y component. System.Single z Initial value for the z component. System.Single w Initial value for the w component. Properties | Improve this Doc View Source PackedValue Directly gets or sets the packed representation of the value. Declaration [CLSCompliant(false)] public uint PackedValue { get; set; } Property Value Type Description System.UInt32 The packed representation of the value. Methods | Improve this Doc View Source Equals(Byte4) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public bool Equals(Byte4 other) Parameters Type Name Description Byte4 other The object with which to make the comparison. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object with which to make the comparison. Returns Type Description System.Boolean true if the current instance is equal to the specified object; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets the hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code for the instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string representation of the current instance. Declaration public override string ToString() Returns Type Description System.String String that represents the object. Overrides System.ValueType.ToString() | Improve this Doc View Source ToVector4() Expands the packed representation into a Vector4. Declaration public Vector4 ToVector4() Returns Type Description Vector4 The expanded vector. Operators | Improve this Doc View Source Equality(Byte4, Byte4) Compares the current instance of a class to another instance to determine whether they are the same. Declaration public static bool operator ==(Byte4 a, Byte4 b) Parameters Type Name Description Byte4 a The object to the left of the equality operator. Byte4 b The object to the right of the equality operator. Returns Type Description System.Boolean true if the objects are the same; false otherwise. | Improve this Doc View Source Inequality(Byte4, Byte4) Compares the current instance of a class to another instance to determine whether they are different. Declaration public static bool operator !=(Byte4 a, Byte4 b) Parameters Type Name Description Byte4 a The object to the left of the equality operator. Byte4 b The object to the right of the equality operator. Returns Type Description System.Boolean true if the objects are different; false otherwise. Explicit Interface Implementations | Improve this Doc View Source IPackedVector.PackFromVector4(Vector4) Sets the packed representation from a Vector4. Declaration void IPackedVector.PackFromVector4(Vector4 vector) Parameters Type Name Description Vector4 vector The vector to create the packed representation from. Implements IPackedVector<TPacked> System.IEquatable<T> IPackedVector"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.html",
    "title": "Struct ModelBoneCollection.Enumerator | MonoGame Documentation",
    "keywords": "Struct ModelBoneCollection.Enumerator Provides the ability to iterate through the bones in an ModelMeshCollection. Implements System.Collections.Generic.IEnumerator < ModelBone > System.IDisposable System.Collections.IEnumerator Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public struct Enumerator : IEnumerator<ModelBone>, IDisposable, IEnumerator Properties | Improve this Doc View Source Current Gets the current element in the ModelMeshCollection. Declaration public ModelBone Current { get; } Property Value Type Description ModelBone Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by this object. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the ModelMeshCollection. Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.IDisposable System.Collections.IEnumerator"
  },
  "_api/Microsoft.Xna.Framework.Graphics.ModelBone.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.ModelBone.html",
    "title": "Class ModelBone | MonoGame Documentation",
    "keywords": "Class ModelBone Inheritance System.Object ModelBone Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class ModelBone Constructors | Improve this Doc View Source ModelBone() Declaration public ModelBone() Properties | Improve this Doc View Source Children Declaration public ModelBoneCollection Children { get; } Property Value Type Description ModelBoneCollection | Improve this Doc View Source Index Declaration public int Index { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Meshes Declaration public List<ModelMesh> Meshes { get; } Property Value Type Description System.Collections.Generic.List < ModelMesh > | Improve this Doc View Source ModelTransform Transform of this node from the root of the model not from the parent Declaration public Matrix ModelTransform { get; set; } Property Value Type Description Matrix | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Parent Declaration public ModelBone Parent { get; set; } Property Value Type Description ModelBone | Improve this Doc View Source Transform Declaration public Matrix Transform { get; set; } Property Value Type Description Matrix Methods | Improve this Doc View Source AddChild(ModelBone) Declaration public void AddChild(ModelBone modelBone) Parameters Type Name Description ModelBone modelBone | Improve this Doc View Source AddMesh(ModelMesh) Declaration public void AddMesh(ModelMesh mesh) Parameters Type Name Description ModelMesh mesh"
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsDebug.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsDebug.html",
    "title": "Class GraphicsDebug | MonoGame Documentation",
    "keywords": "Class GraphicsDebug Inheritance System.Object GraphicsDebug Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class GraphicsDebug Constructors | Improve this Doc View Source GraphicsDebug(GraphicsDevice) Declaration public GraphicsDebug(GraphicsDevice device) Parameters Type Name Description GraphicsDevice device Methods | Improve this Doc View Source TryDequeueMessage(out GraphicsDebugMessage) Attempt to dequeue a debugging message from the graphics subsystem. Declaration public bool TryDequeueMessage(out GraphicsDebugMessage message) Parameters Type Name Description GraphicsDebugMessage message The graphics debugging message if retrieved, null otherwise. Returns Type Description System.Boolean True if a graphics debugging message was retrieved, false otherwise. Remarks When running on a graphics device with debugging enabled, this allows you to retrieve subsystem-specific (e.g. DirectX, OpenGL, etc.) debugging messages including information about improper usage of shaders and APIs."
  },
  "_api/Microsoft.Xna.Framework.Graphics.GraphicsAdapter.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.GraphicsAdapter.html",
    "title": "Class GraphicsAdapter | MonoGame Documentation",
    "keywords": "Class GraphicsAdapter Inheritance System.Object GraphicsAdapter Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public sealed class GraphicsAdapter : IDisposable Properties | Improve this Doc View Source Adapters Declaration public static ReadOnlyCollection<GraphicsAdapter> Adapters { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < GraphicsAdapter > | Improve this Doc View Source CurrentDisplayMode Declaration public DisplayMode CurrentDisplayMode { get; } Property Value Type Description DisplayMode | Improve this Doc View Source DefaultAdapter Declaration public static GraphicsAdapter DefaultAdapter { get; } Property Value Type Description GraphicsAdapter | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description System.String | Improve this Doc View Source DeviceId Declaration public int DeviceId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DeviceName Declaration public string DeviceName { get; } Property Value Type Description System.String | Improve this Doc View Source IsDefaultAdapter Declaration public bool IsDefaultAdapter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsWideScreen Returns true if the CurrentDisplayMode is widescreen. Declaration public bool IsWideScreen { get; } Property Value Type Description System.Boolean Remarks Common widescreen modes include 16:9, 16:10 and 2:1. | Improve this Doc View Source MonitorHandle Declaration public IntPtr MonitorHandle { get; } Property Value Type Description System.IntPtr | Improve this Doc View Source Revision Declaration public int Revision { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SubSystemId Declaration public int SubSystemId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SupportedDisplayModes Declaration public DisplayModeCollection SupportedDisplayModes { get; } Property Value Type Description DisplayModeCollection | Improve this Doc View Source UseDebugLayers Used to request the graphics device should be created with debugging features enabled. Declaration public static bool UseDebugLayers { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseDriverType Used to request creation of a specific kind of driver. Declaration public static GraphicsAdapter.DriverType UseDriverType { get; set; } Property Value Type Description GraphicsAdapter.DriverType Remarks These values only work on DirectX platforms and must be defined before the graphics device is created. Hardware by default. | Improve this Doc View Source UseReferenceDevice Used to request creation of the reference graphics device, or the default hardware accelerated device (when set to false). Declaration public static bool UseReferenceDevice { get; set; } Property Value Type Description System.Boolean Remarks This only works on DirectX platforms where a reference graphics device is available and must be defined before the graphics device is created. It defaults to false. | Improve this Doc View Source VendorId Declaration public int VendorId { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source IsProfileSupported(GraphicsProfile) Declaration public bool IsProfileSupported(GraphicsProfile graphicsProfile) Parameters Type Name Description GraphicsProfile graphicsProfile Returns Type Description System.Boolean Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.EffectAnnotation.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.EffectAnnotation.html",
    "title": "Class EffectAnnotation | MonoGame Documentation",
    "keywords": "Class EffectAnnotation Inheritance System.Object EffectAnnotation Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class EffectAnnotation Properties | Improve this Doc View Source ColumnCount Declaration public int ColumnCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ParameterClass Declaration public EffectParameterClass ParameterClass { get; } Property Value Type Description EffectParameterClass | Improve this Doc View Source ParameterType Declaration public EffectParameterType ParameterType { get; } Property Value Type Description EffectParameterType | Improve this Doc View Source RowCount Declaration public int RowCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Semantic Declaration public string Semantic { get; } Property Value Type Description System.String"
  },
  "_api/Microsoft.Xna.Framework.Graphics.Effect.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.Effect.html",
    "title": "Class Effect | MonoGame Documentation",
    "keywords": "Class Effect Inheritance System.Object GraphicsResource Effect AlphaTestEffect BasicEffect DualTextureEffect EffectMaterial EnvironmentMapEffect SkinnedEffect SpriteEffect Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class Effect : GraphicsResource, IDisposable Constructors | Improve this Doc View Source Effect(Effect) Declaration protected Effect(Effect cloneSource) Parameters Type Name Description Effect cloneSource | Improve this Doc View Source Effect(GraphicsDevice, Byte[]) Declaration public Effect(GraphicsDevice graphicsDevice, byte[] effectCode) Parameters Type Name Description GraphicsDevice graphicsDevice System.Byte [] effectCode | Improve this Doc View Source Effect(GraphicsDevice, Byte[], Int32, Int32) Declaration public Effect(GraphicsDevice graphicsDevice, byte[] effectCode, int index, int count) Parameters Type Name Description GraphicsDevice graphicsDevice System.Byte [] effectCode System.Int32 index System.Int32 count Properties | Improve this Doc View Source CurrentTechnique Declaration public EffectTechnique CurrentTechnique { get; set; } Property Value Type Description EffectTechnique | Improve this Doc View Source Parameters Declaration public EffectParameterCollection Parameters { get; } Property Value Type Description EffectParameterCollection | Improve this Doc View Source Techniques Declaration public EffectTechniqueCollection Techniques { get; } Property Value Type Description EffectTechniqueCollection Methods | Improve this Doc View Source Clone() Returns a deep copy of the effect where immutable types are shared and mutable data is duplicated. Declaration public virtual Effect Clone() Returns Type Description Effect The cloned effect. Remarks See \"Cloning an Effect\" in MSDN: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476138(v=vs.85).aspx | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() | Improve this Doc View Source OnApply() Declaration protected virtual void OnApply() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.Graphics.BufferUsage.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.BufferUsage.html",
    "title": "Enum BufferUsage | MonoGame Documentation",
    "keywords": "Enum BufferUsage A usage hint for optimizing memory placement of graphics buffers. Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public enum BufferUsage Fields Name Description None No special usage. WriteOnly The buffer will not be readable and will be optimized for rendering and writing."
  },
  "_api/Microsoft.Xna.Framework.Graphics.BlendState.html": {
    "href": "_api/Microsoft.Xna.Framework.Graphics.BlendState.html",
    "title": "Class BlendState | MonoGame Documentation",
    "keywords": "Class BlendState Inheritance System.Object GraphicsResource BlendState Implements System.IDisposable Inherited Members GraphicsResource.Dispose() GraphicsResource.Disposing GraphicsResource.GraphicsDevice GraphicsResource.IsDisposed GraphicsResource.Name GraphicsResource.Tag GraphicsResource.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Graphics Assembly : MonoGame.Framework.dll Syntax public class BlendState : GraphicsResource, IDisposable Constructors | Improve this Doc View Source BlendState() Declaration public BlendState() Fields | Improve this Doc View Source Additive Declaration public static readonly BlendState Additive Field Value Type Description BlendState | Improve this Doc View Source AlphaBlend Declaration public static readonly BlendState AlphaBlend Field Value Type Description BlendState | Improve this Doc View Source NonPremultiplied Declaration public static readonly BlendState NonPremultiplied Field Value Type Description BlendState | Improve this Doc View Source Opaque Declaration public static readonly BlendState Opaque Field Value Type Description BlendState Properties | Improve this Doc View Source AlphaBlendFunction Declaration public BlendFunction AlphaBlendFunction { get; set; } Property Value Type Description BlendFunction | Improve this Doc View Source AlphaDestinationBlend Declaration public Blend AlphaDestinationBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source AlphaSourceBlend Declaration public Blend AlphaSourceBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source BlendFactor The color used as blend factor when alpha blending. Declaration public Color BlendFactor { get; set; } Property Value Type Description Color Remarks BlendFactor is set to this value when this BlendState is bound to a GraphicsDevice. | Improve this Doc View Source ColorBlendFunction Declaration public BlendFunction ColorBlendFunction { get; set; } Property Value Type Description BlendFunction | Improve this Doc View Source ColorDestinationBlend Declaration public Blend ColorDestinationBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source ColorSourceBlend Declaration public Blend ColorSourceBlend { get; set; } Property Value Type Description Blend | Improve this Doc View Source ColorWriteChannels Declaration public ColorWriteChannels ColorWriteChannels { get; set; } Property Value Type Description ColorWriteChannels | Improve this Doc View Source ColorWriteChannels1 Declaration public ColorWriteChannels ColorWriteChannels1 { get; set; } Property Value Type Description ColorWriteChannels | Improve this Doc View Source ColorWriteChannels2 Declaration public ColorWriteChannels ColorWriteChannels2 { get; set; } Property Value Type Description ColorWriteChannels | Improve this Doc View Source ColorWriteChannels3 Declaration public ColorWriteChannels ColorWriteChannels3 { get; set; } Property Value Type Description ColorWriteChannels | Improve this Doc View Source IndependentBlendEnable Enables use of the per-target blend states. Declaration public bool IndependentBlendEnable { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Returns the target specific blend state. Declaration public TargetBlendState this[int index] { get; } Parameters Type Name Description System.Int32 index The 0 to 3 target blend state index. Property Value Type Description TargetBlendState A target blend state. | Improve this Doc View Source MultiSampleMask Declaration public int MultiSampleMask { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides GraphicsResource.Dispose(Boolean) | Improve this Doc View Source GraphicsDeviceResetting() Declaration protected override void GraphicsDeviceResetting() Overrides GraphicsResource.GraphicsDeviceResetting() Implements System.IDisposable"
  },
  "_api/Microsoft.Xna.Framework.GameServiceContainer.html": {
    "href": "_api/Microsoft.Xna.Framework.GameServiceContainer.html",
    "title": "Class GameServiceContainer | MonoGame Documentation",
    "keywords": "Class GameServiceContainer Inheritance System.Object GameServiceContainer Implements System.IServiceProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public class GameServiceContainer : IServiceProvider Constructors | Improve this Doc View Source GameServiceContainer() Declaration public GameServiceContainer() Methods | Improve this Doc View Source AddService(Type, Object) Declaration public void AddService(Type type, object provider) Parameters Type Name Description System.Type type System.Object provider | Improve this Doc View Source AddService<T>(T) Declaration public void AddService<T>(T provider) Parameters Type Name Description T provider Type Parameters Name Description T | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Object | Improve this Doc View Source GetService<T>() Declaration public T GetService<T>()where T : class Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source RemoveService(Type) Declaration public void RemoveService(Type type) Parameters Type Name Description System.Type type Implements System.IServiceProvider"
  },
  "_api/Microsoft.Xna.Framework.DisplayOrientation.html": {
    "href": "_api/Microsoft.Xna.Framework.DisplayOrientation.html",
    "title": "Enum DisplayOrientation | MonoGame Documentation",
    "keywords": "Enum DisplayOrientation Defines the orientation of the display. Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [Flags] public enum DisplayOrientation Fields Name Description Default The default orientation. LandscapeLeft The display is rotated counterclockwise into a landscape orientation. Width is greater than height. LandscapeRight The display is rotated clockwise into a landscape orientation. Width is greater than height. Portrait The display is rotated as portrait, where height is greater than width. PortraitDown The display is rotated as inverted portrait, where height is greater than width. Unknown Unknown display orientation."
  },
  "_api/Microsoft.Xna.Framework.CurveKey.html": {
    "href": "_api/Microsoft.Xna.Framework.CurveKey.html",
    "title": "Class CurveKey | MonoGame Documentation",
    "keywords": "Class CurveKey Key point on the Curve . Inheritance System.Object CurveKey Implements System.IEquatable < CurveKey > System.IComparable < CurveKey > Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax [DataContract] public class CurveKey : IEquatable<CurveKey>, IComparable<CurveKey> Constructors | Improve this Doc View Source CurveKey() Creates a new instance of CurveKey class with position: 0 and value: 0. Declaration public CurveKey() | Improve this Doc View Source CurveKey(Single, Single) Creates a new instance of CurveKey class. Declaration public CurveKey(float position, float value) Parameters Type Name Description System.Single position Position on the curve. System.Single value Value of the control point. | Improve this Doc View Source CurveKey(Single, Single, Single, Single) Creates a new instance of CurveKey class. Declaration public CurveKey(float position, float value, float tangentIn, float tangentOut) Parameters Type Name Description System.Single position Position on the curve. System.Single value Value of the control point. System.Single tangentIn Tangent approaching point from the previous point on the curve. System.Single tangentOut Tangent leaving point toward next point on the curve. | Improve this Doc View Source CurveKey(Single, Single, Single, Single, CurveContinuity) Creates a new instance of CurveKey class. Declaration public CurveKey(float position, float value, float tangentIn, float tangentOut, CurveContinuity continuity) Parameters Type Name Description System.Single position Position on the curve. System.Single value Value of the control point. System.Single tangentIn Tangent approaching point from the previous point on the curve. System.Single tangentOut Tangent leaving point toward next point on the curve. CurveContinuity continuity Indicates whether the curve is discrete or continuous. Properties | Improve this Doc View Source Continuity Gets or sets the indicator whether the segment between this point and the next point on the curve is discrete or continuous. Declaration [DataMember] public CurveContinuity Continuity { get; set; } Property Value Type Description CurveContinuity | Improve this Doc View Source Position Gets a position of the key on the curve. Declaration [DataMember] public float Position { get; } Property Value Type Description System.Single | Improve this Doc View Source TangentIn Gets or sets a tangent when approaching this point from the previous point on the curve. Declaration [DataMember] public float TangentIn { get; set; } Property Value Type Description System.Single | Improve this Doc View Source TangentOut Gets or sets a tangent when leaving this point to the next point on the curve. Declaration [DataMember] public float TangentOut { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Value Gets a value of this point. Declaration [DataMember] public float Value { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Clone() Creates a copy of this key. Declaration public CurveKey Clone() Returns Type Description CurveKey A copy of this key. | Improve this Doc View Source CompareTo(CurveKey) Declaration public int CompareTo(CurveKey other) Parameters Type Name Description CurveKey other Returns Type Description System.Int32 | Improve this Doc View Source Equals(CurveKey) Declaration public bool Equals(CurveKey other) Parameters Type Name Description CurveKey other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators | Improve this Doc View Source Equality(CurveKey, CurveKey) Compares whether two CurveKey instances are equal. Declaration public static bool operator ==(CurveKey value1, CurveKey value2) Parameters Type Name Description CurveKey value1 CurveKey instance on the left of the equal sign. CurveKey value2 CurveKey instance on the right of the equal sign. Returns Type Description System.Boolean true if the instances are equal; false otherwise. | Improve this Doc View Source Inequality(CurveKey, CurveKey) Compares whether two CurveKey instances are not equal. Declaration public static bool operator !=(CurveKey value1, CurveKey value2) Parameters Type Name Description CurveKey value1 CurveKey instance on the left of the not equal sign. CurveKey value2 CurveKey instance on the right of the not equal sign. Returns Type Description System.Boolean true if the instances are not equal; false otherwise. Implements System.IEquatable<T> System.IComparable<T>"
  },
  "_api/Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.html": {
    "href": "_api/Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.html",
    "title": "Class ContentSerializerTypeVersionAttribute | MonoGame Documentation",
    "keywords": "Class ContentSerializerTypeVersionAttribute This is used to specify the version when deserializing this object at runtime. Inheritance System.Object System.Attribute ContentSerializerTypeVersionAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Content Assembly : MonoGame.Framework.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public sealed class ContentSerializerTypeVersionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ContentSerializerTypeVersionAttribute(Int32) Creates an instance of the attribute. Declaration public ContentSerializerTypeVersionAttribute(int typeVersion) Parameters Type Name Description System.Int32 typeVersion The version passed to the type at runtime. Properties | Improve this Doc View Source TypeVersion The version passed to the type at runtime. Declaration public int TypeVersion { get; } Property Value Type Description System.Int32 Implements System.Runtime.InteropServices._Attribute"
  },
  "_api/Microsoft.Xna.Framework.ContainmentType.html": {
    "href": "_api/Microsoft.Xna.Framework.ContainmentType.html",
    "title": "Enum ContainmentType | MonoGame Documentation",
    "keywords": "Enum ContainmentType Defines how the bounding volumes intersects or contain one another. Namespace : Microsoft.Xna.Framework Assembly : MonoGame.Framework.dll Syntax public enum ContainmentType Fields Name Description Contains Indicates that one bounding volume completely contains another volume. Disjoint Indicates that there is no overlap between two bounding volumes. Intersects Indicates that bounding volumes partially overlap one another."
  },
  "_api/Microsoft.Xna.Framework.Audio.SoundState.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.SoundState.html",
    "title": "Enum SoundState | MonoGame Documentation",
    "keywords": "Enum SoundState Described the playback state of a SoundEffectInstance. Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public enum SoundState Fields Name Description Paused The SoundEffectInstance is currently paused. Playing The SoundEffectInstance is currently playing. Stopped The SoundEffectInstance is currently stopped."
  },
  "_api/Microsoft.Xna.Framework.Audio.NoAudioHardwareException.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.NoAudioHardwareException.html",
    "title": "Class NoAudioHardwareException | MonoGame Documentation",
    "keywords": "Class NoAudioHardwareException The exception thrown when no audio hardware is present, or driver issues are detected. Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException NoAudioHardwareException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Runtime.InteropServices.ExternalException.ToString() System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax [DataContract] public sealed class NoAudioHardwareException : ExternalException, ISerializable, _Exception Constructors | Improve this Doc View Source NoAudioHardwareException(String) Declaration public NoAudioHardwareException(string msg) Parameters Type Name Description System.String msg A message describing the error. | Improve this Doc View Source NoAudioHardwareException(String, Exception) Declaration public NoAudioHardwareException(string msg, Exception innerException) Parameters Type Name Description System.String msg A message describing the error. System.Exception innerException The exception that is the underlying cause of the current exception. If not null, the current exception is raised in a try/catch block that handled the innerException. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "_api/Microsoft.Xna.Framework.Audio.Cue.html": {
    "href": "_api/Microsoft.Xna.Framework.Audio.Cue.html",
    "title": "Class Cue | MonoGame Documentation",
    "keywords": "Class Cue Manages the playback of a sound or set of sounds. Inheritance System.Object Cue Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Microsoft.Xna.Framework.Audio Assembly : MonoGame.Framework.dll Syntax public class Cue : IDisposable Remarks Cues are comprised of one or more sounds. Cues also define specific properties such as pitch or volume. Cues are referenced through SoundBank objects. Properties | Improve this Doc View Source IsCreated Declaration public bool IsCreated { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDisposed Is true if the Cue has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPaused Indicates whether or not the cue is currently paused. Declaration public bool IsPaused { get; } Property Value Type Description System.Boolean Remarks IsPlaying and IsPaused both return true if a cue is paused while playing. | Improve this Doc View Source IsPlaying Indicates whether or not the cue is currently playing. Declaration public bool IsPlaying { get; } Property Value Type Description System.Boolean Remarks IsPlaying and IsPaused both return true if a cue is paused while playing. | Improve this Doc View Source IsPrepared Declaration public bool IsPrepared { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPreparing Declaration public bool IsPreparing { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsStopped Indicates whether or not the cue is currently stopped. Declaration public bool IsStopped { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsStopping Declaration public bool IsStopping { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the friendly name of the cue. Declaration public string Name { get; } Property Value Type Description System.String Remarks The friendly name is a value set from the designer. Methods | Improve this Doc View Source Apply3D(AudioListener, AudioEmitter) Updates the simulated 3D Audio settings calculated between an AudioEmitter and AudioListener. Declaration public void Apply3D(AudioListener listener, AudioEmitter emitter) Parameters Type Name Description AudioListener listener The listener to calculate. AudioEmitter emitter The emitter to calculate. Remarks This must be called before Play(). Calling this method automatically converts the sound to monoaural and sets the speaker mix for any sound played by this cue to a value calculated with the listener's and emitter's positions. Any stereo information in the sound will be discarded. | Improve this Doc View Source Dispose() Disposes the Cue. Declaration public void Dispose() | Improve this Doc View Source GetVariable(String) Gets a cue-instance variable value based on its friendly name. Declaration public float GetVariable(string name) Parameters Type Name Description System.String name Friendly name of the variable. Returns Type Description System.Single Value of the variable. Remarks Cue-instance variables are useful when multiple instantiations of a single cue (and its associated sounds) are required (for example, a \"car\" cue where there may be more than one car at any given time). While a global variable allows multiple audio elements to be controlled in unison, a cue instance variable grants discrete control of each instance of a cue, even for each copy of the same cue. The friendly name is a value set from the designer. | Improve this Doc View Source Pause() Pauses playback. Declaration public void Pause() | Improve this Doc View Source Play() Requests playback of a prepared or preparing Cue. Declaration public void Play() Remarks Calling Play when the Cue already is playing can result in an InvalidOperationException. | Improve this Doc View Source Resume() Resumes playback of a paused Cue. Declaration public void Resume() | Improve this Doc View Source SetVariable(String, Single) Sets the value of a cue-instance variable based on its friendly name. Declaration public void SetVariable(string name, float value) Parameters Type Name Description System.String name Friendly name of the variable to set. System.Single value Value to assign to the variable. Remarks The friendly name is a value set from the designer. | Improve this Doc View Source Stop(AudioStopOptions) Stops playback of a Cue. Declaration public void Stop(AudioStopOptions options) Parameters Type Name Description AudioStopOptions options Specifies if the sound should play any pending release phases or transitions before stopping. Events | Improve this Doc View Source Disposing This event is triggered when the Cue is disposed. Declaration public event EventHandler<EventArgs> Disposing Event Type Type Description System.EventHandler < System.EventArgs > Implements System.IDisposable"
  },
  "tutorials/external.html": {
    "href": "tutorials/external.html",
    "title": "External Tutorials | MonoGame Documentation",
    "keywords": "External Tutorials Links to various tutorials and articles to help you get started with MonoGame. Pluralsight Cross Platform Game Development with MonoGame Microsoft Tara Walker's \"Building a Shooter Game\" tutorial series. Part 1: Overview, Installation, MonoGame 3.0 Project Creation Part 2: Creating the Shooter/Player Asset of the Game Part 3: Updating Graphics using Content Pipeline with MonoGame Part 4: Adding and Processing Player (User) Input Part 5: Animating the Player/Ship and Creating a Parallaxing Background Part 6: Creating Enemies and Detecting Collisions Part 7: Creating Projectiles and Detecting Collisions Part 8: Creating Explosions using Sprite Animations Part 9: Adding Sound Effects and Game Music Nokia XNA Games On Windows Phone 8 with MonoGame ( in Portugese ) MonoGame on Windows Phone 8 Post-Processing Your Game MonoGame on Windows Phone 8 Lighting and Normal Mapping Your Game Loading levels built with 3D World Studio Neil Danson's F# series Part 1 - MacOS Part 2 - Android Part 3 - iOS Part 4 - Content Pipeline Others Making a platformer in F# with MonoGame XNA 4.0 Shader Programming / HLSL Porting to Android - MonoGame, Textures and SpriteSheets Porting to Android - Performance on Devices BMFont rendering with MonoGame RB Whitaker's MonoGame Tutorials RB Whitaker's XNA Tutorials including sharers, 2D, 3D, Game loops, advancted topics Setting window position tutorial Using Spine with MonoGame - by Randolph Burt (Randeroo) Mac porting series Porting a Windows Phone 7 Game to Android A series on embedding MonoGame/WinGL into WinForms French articles about MonoGame on Linux, Windows and Windows 8 Building Games for Windows 8 with MonoGame Dark Genesis Blog MonoGame \"Hello World\" on Mac OS X and Xamarin Studio Solving Resolution Independent Rendering And 2D Camera Using Monogame XNA is Dead; Long Live the New XNA, MonoGame Make Santa Jump - Making an endless runner game in F# using MonoGame Running MonoGame on Android Wear Video Tutorials CodingMadeEasy RPG Tutorial Psuedo Games Tutorials Desenvolvendo jogos multiplataforma em C# com MonoGame - Alexandre Chohfi (Portuguese) Desenvolvimento de jogos para Windows 8 com XNA - Alexandre Chohfi (Portuguese) Desenvolvimento de jogos para Windows Phone 8 com MonoGame - Alexandre Chohfi (Portuguese) Desenvolvimento de jogos para Windows Phone 8 com MonoGame (C#) - Alexandre Chohfi (Portuguese)"
  }
}